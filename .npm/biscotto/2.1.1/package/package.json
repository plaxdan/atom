{"name":"biscotto","description":"A CoffeeScript documentation generator.","keywords":["coffeescript","doc","api","tomdoc"],"author":{"name":"Garen J. Torikian","email":"gjtorikian@gmail.com"},"maintainers":[{"name":"Garen J. Torikian"}],"version":"2.1.1","engines":{"node":">=0.10.0"},"main":"./src/biscotto","bin":{"biscotto":"./bin/biscotto"},"dependencies":{"coffee-script":">= 1.6.2","source-map":"0.1.29","walkdir":">= 0.0.2","optimist":"~0.3.5","marked":">= 0.1.9","underscore":">= 0.1.0","underscore.string":">= 0.1.0","haml-coffee":">= 0.6.0","mkdirp":">= 0.1.0","connect":">= 0.1.0","async":">= 0.1.22","colors":"~0.6.2"},"devDependencies":{"grunt":"~0.4.1","grunt-release":"~0.6.0","grunt-exec":"0.4.3","grunt-gh-pages":"0.9.0","jasmine-node":">= 1.0.13","diff":"1.0.4","grunt-cli":"~0.1.13"},"homepage":"https://github.com/atom/biscotto","repository":{"type":"git","url":"git://github.com/atom/biscotto.git"},"scripts":{"test":"grunt test"},"readme":"Biscotto is a [CoffeeScript](http://coffeescript.org/) API documentation generator. The underlying architecture is based on [codo](https://github.com/coffeedoc/codo); however, this uses a variant of the excellent [TomDoc](http://tomdoc.org/) notation, instead of verbose JSDoc.\n\n[![Build Status](https://travis-ci.org/atom/biscotto.png?branch=master)](https://travis-ci.org/atom/biscotto)\n\n## Features\n\n* Detects classes, methods, constants, mixins & concerns.\n* Generates a nice site to browse your code documentation in various ways.\n* Intermediate JSON output to transform into any output\n\n## Comment Parsing\n\nThe following section outlines how comments in your files are processed.\n\n### TomDoc\n\nAPI documentation should be written in the [TomDoc](http://tomdoc.org/)\nnotation. Originally conceived for Ruby, TomDoc lends itself pretty nicely to\nCoffeescript. There are some slight changes in the parse rules to match\nCoffeescript. Briefly, here's a list of how you should format your\ndocumentation.\n\n#### Visibility\n\nEvery class and method should start with one of three phrases: `Public:`,\n`Internal:`, and `Private:`. During the documentation generation process, you\ncan flag whether or not to include Internal and Private members via the options\npassed in. If you don't have one of these status indicators, Biscotto will assume the\nglobal visibility (more on this below).\n\n```coffeescript\n# Public: This is a test class with `inline.dot`. Beware.\nclass TestClassDocumentation\n```\n\n#### Method arguments\n\nEach method argument must start with the argument name, followed by a dash (`-`), and\nthe description of the argument:\n\n```\nargument - Some words about the arg!\n```\n\nHash options are placed on a newline and begin with a colon:\n\n```\noptions - These are the options:\n          :key1 - Blah blah.\n          :key2 - Blah\n```\n\n```coffeescript\n# Public: Does some stuff.\n#\n# something - Blah blah blah. Fah fah fah? Foo foo foo!\n# something2 - Bar bar bar. Cha cha cha!!\n# opts - The options\n#        :speed - The {String} speed\n#        :repeat -  How many {Number} times to repeat\n#        :tasks - The {Tasks} tasks to do\nbound: (something, something2, opts) =>\n```\n\n#### Examples\n\nThe examples section must start with the word \"Examples\" on a line by itself. The\nnext line should be blank. Every line thereafter should be indented by two spaces\nfrom the initial comment marker:\n\n``` coffeescript\n# A method to run.\n#\n# Examples\n#\n#  biscotto = require 'biscotto'\n#  file = (filename, content) ->\n#    console.log \"New file %s with content %s\", filename, content\n#  done = (err) ->\n#    if err\n#      console.log \"Cannot generate documentation:\", err\n#    else\n#      console.log \"Documentation generated\"\n#  biscotto.run file, done\nrun: ->\n```\n\n#### Return types\n\nWhen returning from a method, your line must start with the word `Returns`.\nYou can list more than one `Returns` per method by separating each type on a different line.\n\n```coffeescript\n# Private: Do it!\n#\n# Returns {Boolean} when it works.\nreturnSingleType: ->\n\n# Internal: Does some thing.\n#\n# Returns an object with the keys:\n#   :duration - A {Number} of millseconds.\nreturnAHash: =>\n```\n\n### Deviation from TomDoc\n\n#### GitHub Flavored Markdown\n\nBiscotto documentation is processed with [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown).\n\n#### Automatic link references\n\nBiscotto comments are parsed for references to other classes, methods, and mixins, and are automatically\nlinked together.\n\nThere are several different link types supported:\n\n* Normal URL links: `{http://coffeescript.org/}` or `[Try CoffeeScript](http://coffeescript.org/)`\n* Link to a class or a mixin: `{Animal::Lion}` or `[The mighty lion]{Animal::Lion}`\n* Direct link to an instance method: `{Animal.Lion::walk}` or `[The lion walks]{Animal.Lion::walk}`\n* Direct link to a class method: `{Animal.Lion.constructor}` or `[A new king was born]{Animal.Lion.constructor}`\n\nIf you are referring to a method within the same class, you can omit the class name: `{::walk}` or `{.constructor}`.\n\nAs an added bonus, default JavaScript \"types,\" like String, Number, Boolean, *e.t.c.*,\nhave automatic links generated to [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript).\n\nHere's an example of using links:\n\n```coffeescript\n# This links out to the `long` method of the same class.\n#\n# See {::internalLinkLong} for more info.\n#\ninternalLinkShort: ->\n\n# This links out to MDN.\n#\n# Returns a {Number} greater than zero.\ninternalLinkLong: ->\n```\n\nNote: reference resolution does not take place within code blocks.\n\n#### Status Blocks\n\nAs noted above, classes and methods can be `Public,` `Private`, or `Internal`.\n\nYou can flag multiple methods in a file with the following syntax:\n\n```coffee\n### Public ###\n```\n\nThat will mark every method underneath that block as `Public`. You can follow the\nsame notion for `Internal` and `Private` as well.\n\nYou can have as many block status flags as you want. The amount of `#`s must be at\nleast three, and you can have any text inside the block you want. For example:\n\n```coffee\n### Internal: This does some secret stuff. ###\n```\n\nIf you explicitly specify a status for a method within a block, the status is respected.\nFor example:\n\n\n```coffee\n### Public ###\n\n# Internal: A secret method\nnotShown: ->\n\nshown: ->\n```\n\n`shown` is kept as Public because of the status block, while `notShown` is indeed Internal.\n\n#### Delegation\n\nIf you're writing methods that do the exact same thing as another method, you can\nchoose to copy over the documentation via _delegation_. For example:\n\n```coffee\n# {Delegates to: .delegatedRegular}\ndelegatedMethod: ->\n\n# Public: I'm being delegated to!\n#\n# a - A {Number}\n# b - A {String}\n#\n# Returns a {Boolean}\ndelegatedRegular: (a, b) ->\n```\n\n`delegatedMethod` has the same arguments, return type, and documentation as\n`delegatedRegular`. You can also choose to delegate to a different class:\n\n```coffee\n# Private: {Delegates to: Another.Class@somewhere}\ndelegatedMethod: ->\n```\n\nClasses that are delegated should still set their own statuses. For example, even though\n`Another.Class@somewhere` is Public, `delegatedMethod` is still marked as `Private`.\nThe same documentation remains.\n\n#### Defaults\n\nUnlike TomDoc, there is no notation for `default` values. Biscotto will take care of it for you.\n\n## More Examples\n\nFor more technical examples, peruse the [spec](./spec) folder, which contains all\nthe tests for Biscotto.\n\n## Generate\n\nAfter the installation, you will have a `biscotto` binary that can be used to generate the documentation recursively for all CoffeeScript files within a directory.\n\nTo view a list of commands, type\n\n```bash\n$ biscotto --help\n```\n\nBiscotto wants to be smart and tries to detect the best default settings for the sources, the readme, the extra files, and\nthe project name, so the above defaults may be different on your project.\n\n### Project defaults\n\nYou can define your project defaults by writing your command line options to a `.biscottoopts` file:\n\n```bash\n--name       \"Biscotto\"\n--readme     README.md\n--title      \"Biscotto Documentation\"\n--private\n--quiet\n--output-dir ./doc\n./src\n-\nLICENSE\nCHANGELOG.md\n```\n\nPut each option flag on a separate line, followed by the source directories or files, and optionally any extra file that\nshould be included into the documentation separated by a dash (`-`). If your extra file has the extension `.md`, it'll\nbe rendered as Markdown.\n\n## Keyboard navigation\n\nYou can quickly search and jump through the documentation by using the fuzzy finder dialog:\n\n* Open fuzzy finder dialog: `Ctrl-T`\n\nIn frame mode you can toggle the list navigation frame on the left side:\n\n* Toggle list view: `Ctrl-L`\n\nYou can focus a list in frame mode or toggle a tab in frameless mode:\n\n* Class list: `Ctrl-C`\n* Mixin list: `Ctrl-I`\n* File list: `Ctrl-F`\n* Method list: `Ctrl-M`\n* Extras list: `Ctrl-E`\n\nYou can focus and blur the search input:\n\n* Focus search input: `Ctrl-S`\n* Blur search input: `Esc`\n\nIn frameless mode you can close the list tab:\n\n* Close list tab: `Esc`\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Garen J. Torikian\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/atom/biscotto/issues"},"_id":"biscotto@2.1.1","_shasum":"711bd43ffa5f5d6b1bd4b40473a96d73da7cdca1","_from":"biscotto@>=2.1.1 <3.0","_resolved":"https://registry.npmjs.org/biscotto/-/biscotto-2.1.1.tgz"}