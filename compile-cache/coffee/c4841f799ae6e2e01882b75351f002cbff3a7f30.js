(function() {
  var Pane, PaneContainer;

  PaneContainer = require('../src/pane-container');

  Pane = require('../src/pane');

  describe("PaneContainer", function() {
    describe("serialization", function() {
      var containerA, pane1A, pane2A, pane3A, _ref;
      _ref = [], containerA = _ref[0], pane1A = _ref[1], pane2A = _ref[2], pane3A = _ref[3];
      beforeEach(function() {
        var Item;
        Item = (function() {
          function Item() {}

          atom.deserializers.add(Item);

          Item.deserialize = function() {
            return new this;
          };

          Item.prototype.serialize = function() {
            return {
              deserializer: 'Item'
            };
          };

          return Item;

        })();
        pane1A = new Pane({
          items: [new Item]
        });
        containerA = new PaneContainer({
          root: pane1A
        });
        pane2A = pane1A.splitRight({
          items: [new Item]
        });
        pane3A = pane2A.splitDown({
          items: [new Item]
        });
        return pane3A.focus();
      });
      it("preserves the focused pane across serialization", function() {
        var containerB, pane1B, pane2B, pane3B, _ref1;
        expect(pane3A.focused).toBe(true);
        containerB = containerA.testSerialization();
        _ref1 = containerB.getPanes(), pane1B = _ref1[0], pane2B = _ref1[1], pane3B = _ref1[2];
        return expect(pane3B.focused).toBe(true);
      });
      return it("preserves the active pane across serialization, independent of focus", function() {
        var containerB, pane1B, pane2B, pane3B, _ref1;
        pane3A.activate();
        expect(containerA.activePane).toBe(pane3A);
        containerB = containerA.testSerialization();
        _ref1 = containerB.getPanes(), pane1B = _ref1[0], pane2B = _ref1[1], pane3B = _ref1[2];
        return expect(containerB.activePane).toBe(pane3B);
      });
    });
    return describe("::activePane", function() {
      var container, pane1, pane2, _ref;
      _ref = [], container = _ref[0], pane1 = _ref[1], pane2 = _ref[2];
      beforeEach(function() {
        container = new PaneContainer;
        return pane1 = container.root;
      });
      it("references the first pane if no pane has been made active", function() {
        expect(container.activePane).toBe(pane1);
        return expect(pane1.active).toBe(true);
      });
      it("references the most pane on which ::activate was most recently called", function() {
        pane2 = pane1.splitRight();
        pane2.activate();
        expect(container.activePane).toBe(pane2);
        expect(pane1.active).toBe(false);
        expect(pane2.active).toBe(true);
        pane1.activate();
        expect(container.activePane).toBe(pane1);
        expect(pane1.active).toBe(true);
        return expect(pane2.active).toBe(false);
      });
      it("is reassigned to the next pane if the current active pane is destroyed", function() {
        pane2 = pane1.splitRight();
        pane2.activate();
        pane2.destroy();
        expect(container.activePane).toBe(pane1);
        return expect(pane1.active).toBe(true);
      });
      return it("does not allow the root pane to be destroyed", function() {
        pane1.destroy();
        expect(container.root).toBe(pane1);
        return expect(pane1.isDestroyed()).toBe(false);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLG1CQUFBOztBQUFBLEVBQUEsYUFBQSxHQUFnQixPQUFBLENBQVEsdUJBQVIsQ0FBaEIsQ0FBQTs7QUFBQSxFQUNBLElBQUEsR0FBTyxPQUFBLENBQVEsYUFBUixDQURQLENBQUE7O0FBQUEsRUFHQSxRQUFBLENBQVMsZUFBVCxFQUEwQixTQUFBLEdBQUE7QUFDeEIsSUFBQSxRQUFBLENBQVMsZUFBVCxFQUEwQixTQUFBLEdBQUE7QUFDeEIsVUFBQSx3Q0FBQTtBQUFBLE1BQUEsT0FBdUMsRUFBdkMsRUFBQyxvQkFBRCxFQUFhLGdCQUFiLEVBQXFCLGdCQUFyQixFQUE2QixnQkFBN0IsQ0FBQTtBQUFBLE1BRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUVULFlBQUEsSUFBQTtBQUFBLFFBQU07NEJBQ0o7O0FBQUEsVUFBQSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQW5CLENBQXVCLElBQXZCLENBQUEsQ0FBQTs7QUFBQSxVQUNBLElBQUMsQ0FBQSxXQUFELEdBQWMsU0FBQSxHQUFBO21CQUFHLEdBQUEsQ0FBQSxLQUFIO1VBQUEsQ0FEZCxDQUFBOztBQUFBLHlCQUVBLFNBQUEsR0FBVyxTQUFBLEdBQUE7bUJBQUc7QUFBQSxjQUFBLFlBQUEsRUFBYyxNQUFkO2NBQUg7VUFBQSxDQUZYLENBQUE7O3NCQUFBOztZQURGLENBQUE7QUFBQSxRQUtBLE1BQUEsR0FBYSxJQUFBLElBQUEsQ0FBSztBQUFBLFVBQUEsS0FBQSxFQUFPLENBQUMsR0FBQSxDQUFBLElBQUQsQ0FBUDtTQUFMLENBTGIsQ0FBQTtBQUFBLFFBTUEsVUFBQSxHQUFpQixJQUFBLGFBQUEsQ0FBYztBQUFBLFVBQUEsSUFBQSxFQUFNLE1BQU47U0FBZCxDQU5qQixDQUFBO0FBQUEsUUFPQSxNQUFBLEdBQVMsTUFBTSxDQUFDLFVBQVAsQ0FBa0I7QUFBQSxVQUFBLEtBQUEsRUFBTyxDQUFDLEdBQUEsQ0FBQSxJQUFELENBQVA7U0FBbEIsQ0FQVCxDQUFBO0FBQUEsUUFRQSxNQUFBLEdBQVMsTUFBTSxDQUFDLFNBQVAsQ0FBaUI7QUFBQSxVQUFBLEtBQUEsRUFBTyxDQUFDLEdBQUEsQ0FBQSxJQUFELENBQVA7U0FBakIsQ0FSVCxDQUFBO2VBU0EsTUFBTSxDQUFDLEtBQVAsQ0FBQSxFQVhTO01BQUEsQ0FBWCxDQUZBLENBQUE7QUFBQSxNQWVBLEVBQUEsQ0FBRyxpREFBSCxFQUFzRCxTQUFBLEdBQUE7QUFDcEQsWUFBQSx5Q0FBQTtBQUFBLFFBQUEsTUFBQSxDQUFPLE1BQU0sQ0FBQyxPQUFkLENBQXNCLENBQUMsSUFBdkIsQ0FBNEIsSUFBNUIsQ0FBQSxDQUFBO0FBQUEsUUFFQSxVQUFBLEdBQWEsVUFBVSxDQUFDLGlCQUFYLENBQUEsQ0FGYixDQUFBO0FBQUEsUUFHQSxRQUEyQixVQUFVLENBQUMsUUFBWCxDQUFBLENBQTNCLEVBQUMsaUJBQUQsRUFBUyxpQkFBVCxFQUFpQixpQkFIakIsQ0FBQTtlQUlBLE1BQUEsQ0FBTyxNQUFNLENBQUMsT0FBZCxDQUFzQixDQUFDLElBQXZCLENBQTRCLElBQTVCLEVBTG9EO01BQUEsQ0FBdEQsQ0FmQSxDQUFBO2FBc0JBLEVBQUEsQ0FBRyxzRUFBSCxFQUEyRSxTQUFBLEdBQUE7QUFDekUsWUFBQSx5Q0FBQTtBQUFBLFFBQUEsTUFBTSxDQUFDLFFBQVAsQ0FBQSxDQUFBLENBQUE7QUFBQSxRQUNBLE1BQUEsQ0FBTyxVQUFVLENBQUMsVUFBbEIsQ0FBNkIsQ0FBQyxJQUE5QixDQUFtQyxNQUFuQyxDQURBLENBQUE7QUFBQSxRQUdBLFVBQUEsR0FBYSxVQUFVLENBQUMsaUJBQVgsQ0FBQSxDQUhiLENBQUE7QUFBQSxRQUlBLFFBQTJCLFVBQVUsQ0FBQyxRQUFYLENBQUEsQ0FBM0IsRUFBQyxpQkFBRCxFQUFTLGlCQUFULEVBQWlCLGlCQUpqQixDQUFBO2VBS0EsTUFBQSxDQUFPLFVBQVUsQ0FBQyxVQUFsQixDQUE2QixDQUFDLElBQTlCLENBQW1DLE1BQW5DLEVBTnlFO01BQUEsQ0FBM0UsRUF2QndCO0lBQUEsQ0FBMUIsQ0FBQSxDQUFBO1dBK0JBLFFBQUEsQ0FBUyxjQUFULEVBQXlCLFNBQUEsR0FBQTtBQUN2QixVQUFBLDZCQUFBO0FBQUEsTUFBQSxPQUE0QixFQUE1QixFQUFDLG1CQUFELEVBQVksZUFBWixFQUFtQixlQUFuQixDQUFBO0FBQUEsTUFFQSxVQUFBLENBQVcsU0FBQSxHQUFBO0FBQ1QsUUFBQSxTQUFBLEdBQVksR0FBQSxDQUFBLGFBQVosQ0FBQTtlQUNBLEtBQUEsR0FBUSxTQUFTLENBQUMsS0FGVDtNQUFBLENBQVgsQ0FGQSxDQUFBO0FBQUEsTUFNQSxFQUFBLENBQUcsMkRBQUgsRUFBZ0UsU0FBQSxHQUFBO0FBQzlELFFBQUEsTUFBQSxDQUFPLFNBQVMsQ0FBQyxVQUFqQixDQUE0QixDQUFDLElBQTdCLENBQWtDLEtBQWxDLENBQUEsQ0FBQTtlQUNBLE1BQUEsQ0FBTyxLQUFLLENBQUMsTUFBYixDQUFvQixDQUFDLElBQXJCLENBQTBCLElBQTFCLEVBRjhEO01BQUEsQ0FBaEUsQ0FOQSxDQUFBO0FBQUEsTUFVQSxFQUFBLENBQUcsdUVBQUgsRUFBNEUsU0FBQSxHQUFBO0FBQzFFLFFBQUEsS0FBQSxHQUFRLEtBQUssQ0FBQyxVQUFOLENBQUEsQ0FBUixDQUFBO0FBQUEsUUFDQSxLQUFLLENBQUMsUUFBTixDQUFBLENBREEsQ0FBQTtBQUFBLFFBRUEsTUFBQSxDQUFPLFNBQVMsQ0FBQyxVQUFqQixDQUE0QixDQUFDLElBQTdCLENBQWtDLEtBQWxDLENBRkEsQ0FBQTtBQUFBLFFBR0EsTUFBQSxDQUFPLEtBQUssQ0FBQyxNQUFiLENBQW9CLENBQUMsSUFBckIsQ0FBMEIsS0FBMUIsQ0FIQSxDQUFBO0FBQUEsUUFJQSxNQUFBLENBQU8sS0FBSyxDQUFDLE1BQWIsQ0FBb0IsQ0FBQyxJQUFyQixDQUEwQixJQUExQixDQUpBLENBQUE7QUFBQSxRQUtBLEtBQUssQ0FBQyxRQUFOLENBQUEsQ0FMQSxDQUFBO0FBQUEsUUFNQSxNQUFBLENBQU8sU0FBUyxDQUFDLFVBQWpCLENBQTRCLENBQUMsSUFBN0IsQ0FBa0MsS0FBbEMsQ0FOQSxDQUFBO0FBQUEsUUFPQSxNQUFBLENBQU8sS0FBSyxDQUFDLE1BQWIsQ0FBb0IsQ0FBQyxJQUFyQixDQUEwQixJQUExQixDQVBBLENBQUE7ZUFRQSxNQUFBLENBQU8sS0FBSyxDQUFDLE1BQWIsQ0FBb0IsQ0FBQyxJQUFyQixDQUEwQixLQUExQixFQVQwRTtNQUFBLENBQTVFLENBVkEsQ0FBQTtBQUFBLE1BcUJBLEVBQUEsQ0FBRyx3RUFBSCxFQUE2RSxTQUFBLEdBQUE7QUFDM0UsUUFBQSxLQUFBLEdBQVEsS0FBSyxDQUFDLFVBQU4sQ0FBQSxDQUFSLENBQUE7QUFBQSxRQUNBLEtBQUssQ0FBQyxRQUFOLENBQUEsQ0FEQSxDQUFBO0FBQUEsUUFFQSxLQUFLLENBQUMsT0FBTixDQUFBLENBRkEsQ0FBQTtBQUFBLFFBR0EsTUFBQSxDQUFPLFNBQVMsQ0FBQyxVQUFqQixDQUE0QixDQUFDLElBQTdCLENBQWtDLEtBQWxDLENBSEEsQ0FBQTtlQUlBLE1BQUEsQ0FBTyxLQUFLLENBQUMsTUFBYixDQUFvQixDQUFDLElBQXJCLENBQTBCLElBQTFCLEVBTDJFO01BQUEsQ0FBN0UsQ0FyQkEsQ0FBQTthQTRCQSxFQUFBLENBQUcsOENBQUgsRUFBbUQsU0FBQSxHQUFBO0FBQ2pELFFBQUEsS0FBSyxDQUFDLE9BQU4sQ0FBQSxDQUFBLENBQUE7QUFBQSxRQUNBLE1BQUEsQ0FBTyxTQUFTLENBQUMsSUFBakIsQ0FBc0IsQ0FBQyxJQUF2QixDQUE0QixLQUE1QixDQURBLENBQUE7ZUFFQSxNQUFBLENBQU8sS0FBSyxDQUFDLFdBQU4sQ0FBQSxDQUFQLENBQTJCLENBQUMsSUFBNUIsQ0FBaUMsS0FBakMsRUFIaUQ7TUFBQSxDQUFuRCxFQTdCdUI7SUFBQSxDQUF6QixFQWhDd0I7RUFBQSxDQUExQixDQUhBLENBQUE7QUFBQSIKfQ==
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/pane-container-spec.coffee