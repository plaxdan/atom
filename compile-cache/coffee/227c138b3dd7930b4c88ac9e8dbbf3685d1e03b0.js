(function() {
  var $, PaneContainerView, PaneView, View, fs, path, temp, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PaneContainerView = require('../src/pane-container-view');

  PaneView = require('../src/pane-view');

  fs = require('fs-plus');

  _ref = require('atom'), $ = _ref.$, View = _ref.View;

  path = require('path');

  temp = require('temp');

  describe("PaneView", function() {
    var TestView, container, editor1, editor2, pane, paneModel, view1, view2, _ref1;
    _ref1 = [], container = _ref1[0], view1 = _ref1[1], view2 = _ref1[2], editor1 = _ref1[3], editor2 = _ref1[4], pane = _ref1[5], paneModel = _ref1[6];
    TestView = (function(_super) {
      __extends(TestView, _super);

      function TestView() {
        return TestView.__super__.constructor.apply(this, arguments);
      }

      TestView.deserialize = function(_arg) {
        var id, text;
        id = _arg.id, text = _arg.text;
        return new TestView({
          id: id,
          text: text
        });
      };

      TestView.content = function(_arg) {
        var id, text;
        id = _arg.id, text = _arg.text;
        return this.div({
          "class": 'test-view',
          id: id,
          tabindex: -1
        }, text);
      };

      TestView.prototype.initialize = function(_arg) {
        this.id = _arg.id, this.text = _arg.text;
      };

      TestView.prototype.serialize = function() {
        return {
          deserializer: 'TestView',
          id: this.id,
          text: this.text
        };
      };

      TestView.prototype.getUri = function() {
        return this.id;
      };

      TestView.prototype.isEqual = function(other) {
        return (other != null) && this.id === other.id && this.text === other.text;
      };

      return TestView;

    })(View);
    beforeEach(function() {
      atom.deserializers.add(TestView);
      container = new PaneContainerView;
      view1 = new TestView({
        id: 'view-1',
        text: 'View 1'
      });
      view2 = new TestView({
        id: 'view-2',
        text: 'View 2'
      });
      waitsForPromise(function() {
        return atom.workspace.open('sample.js').then(function(o) {
          return editor1 = o;
        });
      });
      waitsForPromise(function() {
        return atom.workspace.open('sample.txt').then(function(o) {
          return editor2 = o;
        });
      });
      return runs(function() {
        pane = container.getRoot();
        paneModel = pane.model;
        return paneModel.addItems([view1, editor1, view2, editor2]);
      });
    });
    afterEach(function() {
      return atom.deserializers.remove(TestView);
    });
    describe("when the active pane item changes", function() {
      it("hides all item views except the active one", function() {
        expect(pane.activeItem).toBe(view1);
        expect(view1.css('display')).not.toBe('none');
        pane.activateItem(view2);
        expect(view1.css('display')).toBe('none');
        return expect(view2.css('display')).not.toBe('none');
      });
      it("triggers 'pane:active-item-changed'", function() {
        var itemChangedHandler;
        itemChangedHandler = jasmine.createSpy("itemChangedHandler");
        container.on('pane:active-item-changed', itemChangedHandler);
        expect(pane.activeItem).toBe(view1);
        paneModel.activateItem(view2);
        paneModel.activateItem(view2);
        expect(itemChangedHandler.callCount).toBe(1);
        expect(itemChangedHandler.argsForCall[0][1]).toBe(view2);
        itemChangedHandler.reset();
        paneModel.activateItem(editor1);
        expect(itemChangedHandler).toHaveBeenCalled();
        expect(itemChangedHandler.argsForCall[0][1]).toBe(editor1);
        return itemChangedHandler.reset();
      });
      it("transfers focus to the new active view if the previous view was focused", function() {
        container.attachToDom();
        pane.focus();
        expect(pane.activeView).not.toBe(view2);
        expect(pane.activeView).toMatchSelector(':focus');
        paneModel.activateItem(view2);
        return expect(view2).toMatchSelector(':focus');
      });
      describe("when the new activeItem is a model", function() {
        return it("shows the item's view or creates and shows a new view for the item if none exists", function() {
          var initialViewCount, model1, model2;
          initialViewCount = pane.itemViews.find('.test-view').length;
          model1 = {
            id: 'test-model-1',
            text: 'Test Model 1',
            serialize: function() {
              return {
                id: this.id,
                text: this.text
              };
            },
            getViewClass: function() {
              return TestView;
            }
          };
          model2 = {
            id: 'test-model-2',
            text: 'Test Model 2',
            serialize: function() {
              return {
                id: this.id,
                text: this.text
              };
            },
            getViewClass: function() {
              return TestView;
            }
          };
          paneModel.activateItem(model1);
          paneModel.activateItem(model2);
          expect(pane.itemViews.find('.test-view').length).toBe(initialViewCount + 2);
          paneModel.activatePreviousItem();
          expect(pane.itemViews.find('.test-view').length).toBe(initialViewCount + 2);
          paneModel.destroyItem(model2);
          expect(pane.itemViews.find('.test-view').length).toBe(initialViewCount + 1);
          paneModel.destroyItem(model1);
          return expect(pane.itemViews.find('.test-view').length).toBe(initialViewCount);
        });
      });
      return describe("when the new activeItem is a view", function() {
        return it("appends it to the itemViews div if it hasn't already been appended and shows it", function() {
          expect(pane.itemViews.find('#view-2')).not.toExist();
          paneModel.activateItem(view2);
          expect(pane.itemViews.find('#view-2')).toExist();
          paneModel.activateItem(view1);
          paneModel.activateItem(view2);
          return expect(pane.itemViews.find('#view-2').length).toBe(1);
        });
      });
    });
    describe("when an item is destroyed", function() {
      it("triggers the 'pane:item-removed' event with the item and its former index", function() {
        var itemRemovedHandler;
        itemRemovedHandler = jasmine.createSpy("itemRemovedHandler");
        pane.on('pane:item-removed', itemRemovedHandler);
        paneModel.destroyItem(editor1);
        expect(itemRemovedHandler).toHaveBeenCalled();
        return expect(itemRemovedHandler.argsForCall[0].slice(1, 3)).toEqual([editor1, 1]);
      });
      describe("when the destroyed item is a view", function() {
        return it("removes the item from the 'item-views' div", function() {
          expect(view1.parent()).toMatchSelector(pane.itemViews);
          paneModel.destroyItem(view1);
          return expect(view1.parent()).not.toMatchSelector(pane.itemViews);
        });
      });
      return describe("when the destroyed item is a model", function() {
        return it("removes the associated view", function() {
          paneModel.activateItem(editor1);
          expect(pane.itemViews.find('.editor').length).toBe(1);
          pane.destroyItem(editor1);
          return expect(pane.itemViews.find('.editor').length).toBe(0);
        });
      });
    });
    describe("when an item is moved within the same pane", function() {
      return it("emits a 'pane:item-moved' event with the item and the new index", function() {
        var itemMovedHandler;
        pane.on('pane:item-moved', itemMovedHandler = jasmine.createSpy("itemMovedHandler"));
        paneModel.moveItem(view1, 2);
        expect(itemMovedHandler).toHaveBeenCalled();
        return expect(itemMovedHandler.argsForCall[0].slice(1, 3)).toEqual([view1, 2]);
      });
    });
    describe("when an item is moved to another pane", function() {
      return it("detaches the item's view rather than removing it", function() {
        var paneModel2;
        paneModel2 = paneModel.splitRight();
        view1.data('preservative', 1234);
        paneModel.moveItemToPane(view1, paneModel2, 1);
        expect(view1.data('preservative')).toBe(1234);
        paneModel2.activateItemAtIndex(1);
        return expect(view1.data('preservative')).toBe(1234);
      });
    });
    describe("when the title of the active item changes", function() {
      return it("emits pane:active-item-title-changed", function() {
        var activeItemTitleChangedHandler;
        activeItemTitleChangedHandler = jasmine.createSpy("activeItemTitleChangedHandler");
        pane.on('pane:active-item-title-changed', activeItemTitleChangedHandler);
        expect(pane.activeItem).toBe(view1);
        view2.trigger('title-changed');
        expect(activeItemTitleChangedHandler).not.toHaveBeenCalled();
        view1.trigger('title-changed');
        expect(activeItemTitleChangedHandler).toHaveBeenCalled();
        activeItemTitleChangedHandler.reset();
        pane.activateItem(view2);
        view2.trigger('title-changed');
        return expect(activeItemTitleChangedHandler).toHaveBeenCalled();
      });
    });
    describe("when an unmodifed buffer's path is deleted", function() {
      return it("removes the pane item", function() {
        var editor, filePath;
        editor = null;
        jasmine.unspy(window, 'setTimeout');
        filePath = path.join(temp.mkdirSync(), 'file.txt');
        fs.writeFileSync(filePath, '');
        waitsForPromise(function() {
          return atom.workspace.open(filePath).then(function(o) {
            return editor = o;
          });
        });
        runs(function() {
          pane.activateItem(editor);
          expect(pane.items).toHaveLength(5);
          return fs.removeSync(filePath);
        });
        return waitsFor(function() {
          return pane.items.length === 4;
        });
      });
    });
    describe("when a pane is destroyed", function() {
      var pane2, pane2Model, _ref2;
      _ref2 = [], pane2 = _ref2[0], pane2Model = _ref2[1];
      beforeEach(function() {
        pane2Model = paneModel.splitRight();
        return pane2 = pane2Model._view;
      });
      it("triggers a 'pane:removed' event with the pane", function() {
        var removedHandler;
        removedHandler = jasmine.createSpy("removedHandler");
        container.on('pane:removed', removedHandler);
        paneModel.destroy();
        expect(removedHandler).toHaveBeenCalled();
        return expect(removedHandler.argsForCall[0][1]).toBe(pane);
      });
      return describe("if the destroyed pane has focus", function() {
        var paneToLeft, paneToRight, _ref3;
        _ref3 = [], paneToLeft = _ref3[0], paneToRight = _ref3[1];
        return it("focuses the next pane", function() {
          container.attachToDom();
          pane2.activate();
          expect(pane.hasFocus()).toBe(false);
          expect(pane2.hasFocus()).toBe(true);
          pane2Model.destroy();
          return expect(pane.hasFocus()).toBe(true);
        });
      });
    });
    describe("::getNextPane()", function() {
      return it("returns the next pane if one exists, wrapping around from the last pane to the first", function() {
        var pane2;
        pane.activateItem(editor1);
        expect(pane.getNextPane()).toBeUndefined;
        pane2 = pane.splitRight(pane.copyActiveItem());
        expect(pane.getNextPane()).toBe(pane2);
        return expect(pane2.getNextPane()).toBe(pane);
      });
    });
    describe("when the pane's active status changes", function() {
      var pane2, pane2Model, _ref2;
      _ref2 = [], pane2 = _ref2[0], pane2Model = _ref2[1];
      beforeEach(function() {
        pane2Model = paneModel.splitRight({
          items: [pane.copyActiveItem()]
        });
        pane2 = pane2Model._view;
        return expect(pane2Model.isActive()).toBe(true);
      });
      it("adds or removes the .active class as appropriate", function() {
        expect(pane).not.toHaveClass('active');
        paneModel.activate();
        expect(pane).toHaveClass('active');
        pane2Model.activate();
        return expect(pane).not.toHaveClass('active');
      });
      return it("triggers 'pane:became-active' or 'pane:became-inactive' according to the current status", function() {
        var becameActiveHandler, becameInactiveHandler;
        pane.on('pane:became-active', becameActiveHandler = jasmine.createSpy("becameActiveHandler"));
        pane.on('pane:became-inactive', becameInactiveHandler = jasmine.createSpy("becameInactiveHandler"));
        paneModel.activate();
        expect(becameActiveHandler.callCount).toBe(1);
        expect(becameInactiveHandler.callCount).toBe(0);
        pane2Model.activate();
        expect(becameActiveHandler.callCount).toBe(1);
        return expect(becameInactiveHandler.callCount).toBe(1);
      });
    });
    describe("when the pane is focused", function() {
      beforeEach(function() {
        return container.attachToDom();
      });
      it("transfers focus to the active view", function() {
        var focusHandler;
        focusHandler = jasmine.createSpy("focusHandler");
        pane.activeItem.on('focus', focusHandler);
        pane.focus();
        return expect(focusHandler).toHaveBeenCalled();
      });
      return it("makes the pane active", function() {
        paneModel.splitRight({
          items: [pane.copyActiveItem()]
        });
        expect(paneModel.isActive()).toBe(false);
        pane.focus();
        return expect(paneModel.isActive()).toBe(true);
      });
    });
    describe("when a pane is split", function() {
      return it("builds the appropriate pane-row and pane-column views", function() {
        var pane1, pane1Model, pane2, pane2Model, pane3, pane3Model;
        pane1 = pane;
        pane1Model = pane.model;
        pane.activateItem(editor1);
        pane2Model = pane1Model.splitRight({
          items: [pane1Model.copyActiveItem()]
        });
        pane3Model = pane2Model.splitDown({
          items: [pane2Model.copyActiveItem()]
        });
        pane2 = pane2Model._view;
        pane3 = pane3Model._view;
        expect(container.find('> .pane-row > .pane').toArray()).toEqual([pane1[0]]);
        expect(container.find('> .pane-row > .pane-column > .pane').toArray()).toEqual([pane2[0], pane3[0]]);
        pane1Model.destroy();
        return expect(container.find('> .pane-column > .pane').toArray()).toEqual([pane2[0], pane3[0]]);
      });
    });
    return describe("serialization", function() {
      return it("focuses the pane after attach only if had focus when serialized", function() {
        var container2, container3, pane2, pane3;
        container.attachToDom();
        pane.focus();
        container2 = new PaneContainerView(container.model.testSerialization());
        pane2 = container2.getRoot();
        container2.attachToDom();
        expect(pane2).toMatchSelector(':has(:focus)');
        $(document.activeElement).blur();
        container3 = new PaneContainerView(container.model.testSerialization());
        pane3 = container3.getRoot();
        container3.attachToDom();
        return expect(pane3).not.toMatchSelector(':has(:focus)');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/pane-view-spec.coffee