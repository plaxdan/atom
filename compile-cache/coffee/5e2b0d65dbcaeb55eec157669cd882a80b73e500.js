(function() {
  var TextEditor;

  TextEditor = require('../src/text-editor');

  describe("Selection", function() {
    var buffer, editor, selection, _ref;
    _ref = [], buffer = _ref[0], editor = _ref[1], selection = _ref[2];
    beforeEach(function() {
      buffer = atom.project.bufferForPathSync('sample.js');
      editor = new TextEditor({
        buffer: buffer,
        tabLength: 2
      });
      return selection = editor.getLastSelection();
    });
    afterEach(function() {
      return buffer.destroy();
    });
    describe(".deleteSelectedText()", function() {
      describe("when nothing is selected", function() {
        return it("deletes nothing", function() {
          selection.setBufferRange([[0, 3], [0, 3]]);
          selection.deleteSelectedText();
          return expect(buffer.lineForRow(0)).toBe("var quicksort = function () {");
        });
      });
      describe("when one line is selected", function() {
        return it("deletes selected text and clears the selection", function() {
          var endOfLine;
          selection.setBufferRange([[0, 4], [0, 14]]);
          selection.deleteSelectedText();
          expect(buffer.lineForRow(0)).toBe("var = function () {");
          endOfLine = buffer.lineForRow(0).length;
          selection.setBufferRange([[0, 0], [0, endOfLine]]);
          selection.deleteSelectedText();
          expect(buffer.lineForRow(0)).toBe("");
          return expect(selection.isEmpty()).toBeTruthy();
        });
      });
      describe("when multiple lines are selected", function() {
        return it("deletes selected text and clears the selection", function() {
          selection.setBufferRange([[0, 1], [2, 39]]);
          selection.deleteSelectedText();
          expect(buffer.lineForRow(0)).toBe("v;");
          return expect(selection.isEmpty()).toBeTruthy();
        });
      });
      return describe("when the cursor precedes the tail", function() {
        return it("deletes selected text and clears the selection", function() {
          selection.cursor.setScreenPosition([0, 13]);
          selection.selectToScreenPosition([0, 4]);
          selection["delete"]();
          expect(buffer.lineForRow(0)).toBe("var  = function () {");
          return expect(selection.isEmpty()).toBeTruthy();
        });
      });
    });
    describe(".isReversed()", function() {
      return it("returns true if the cursor precedes the tail", function() {
        selection.cursor.setScreenPosition([0, 20]);
        selection.selectToScreenPosition([0, 10]);
        expect(selection.isReversed()).toBeTruthy();
        selection.selectToScreenPosition([0, 25]);
        return expect(selection.isReversed()).toBeFalsy();
      });
    });
    describe("when only the selection's tail is moved (regression)", function() {
      return it("notifies ::onDidChangeRange observers", function() {
        var changeScreenRangeHandler;
        selection.setBufferRange([[2, 0], [2, 10]], {
          reversed: true
        });
        changeScreenRangeHandler = jasmine.createSpy('changeScreenRangeHandler');
        selection.onDidChangeRange(changeScreenRangeHandler);
        buffer.insert([2, 5], 'abc');
        return expect(changeScreenRangeHandler).toHaveBeenCalled();
      });
    });
    return describe("when the selection is destroyed", function() {
      return it("destroys its marker", function() {
        selection.setBufferRange([[2, 0], [2, 10]]);
        selection.destroy();
        return expect(selection.marker.isDestroyed()).toBeTruthy();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLFVBQUE7O0FBQUEsRUFBQSxVQUFBLEdBQWEsT0FBQSxDQUFRLG9CQUFSLENBQWIsQ0FBQTs7QUFBQSxFQUVBLFFBQUEsQ0FBUyxXQUFULEVBQXNCLFNBQUEsR0FBQTtBQUNwQixRQUFBLCtCQUFBO0FBQUEsSUFBQSxPQUE4QixFQUE5QixFQUFDLGdCQUFELEVBQVMsZ0JBQVQsRUFBaUIsbUJBQWpCLENBQUE7QUFBQSxJQUVBLFVBQUEsQ0FBVyxTQUFBLEdBQUE7QUFDVCxNQUFBLE1BQUEsR0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFiLENBQStCLFdBQS9CLENBQVQsQ0FBQTtBQUFBLE1BQ0EsTUFBQSxHQUFhLElBQUEsVUFBQSxDQUFXO0FBQUEsUUFBQSxNQUFBLEVBQVEsTUFBUjtBQUFBLFFBQWdCLFNBQUEsRUFBVyxDQUEzQjtPQUFYLENBRGIsQ0FBQTthQUVBLFNBQUEsR0FBWSxNQUFNLENBQUMsZ0JBQVAsQ0FBQSxFQUhIO0lBQUEsQ0FBWCxDQUZBLENBQUE7QUFBQSxJQU9BLFNBQUEsQ0FBVSxTQUFBLEdBQUE7YUFDUixNQUFNLENBQUMsT0FBUCxDQUFBLEVBRFE7SUFBQSxDQUFWLENBUEEsQ0FBQTtBQUFBLElBVUEsUUFBQSxDQUFTLHVCQUFULEVBQWtDLFNBQUEsR0FBQTtBQUNoQyxNQUFBLFFBQUEsQ0FBUywwQkFBVCxFQUFxQyxTQUFBLEdBQUE7ZUFDbkMsRUFBQSxDQUFHLGlCQUFILEVBQXNCLFNBQUEsR0FBQTtBQUNwQixVQUFBLFNBQVMsQ0FBQyxjQUFWLENBQXlCLENBQUMsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFELEVBQVEsQ0FBQyxDQUFELEVBQUcsQ0FBSCxDQUFSLENBQXpCLENBQUEsQ0FBQTtBQUFBLFVBQ0EsU0FBUyxDQUFDLGtCQUFWLENBQUEs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
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/selection-spec.coffee