(function() {
  var $, $$, SelectListView, _ref;

  SelectListView = require('../src/select-list-view');

  _ref = require('atom'), $ = _ref.$, $$ = _ref.$$;

  describe("SelectListView", function() {
    var filterEditorView, items, list, selectList, _ref1;
    _ref1 = [], selectList = _ref1[0], items = _ref1[1], list = _ref1[2], filterEditorView = _ref1[3];
    beforeEach(function() {
      items = [["A", "Alpha"], ["B", "Bravo"], ["C", "Charlie"], ["D", "Delta"], ["E", "Echo"], ["F", "Foxtrot"]];
      selectList = new SelectListView;
      selectList.setMaxItems(4);
      selectList.getFilterKey = function() {
        return 1;
      };
      selectList.viewForItem = function(item) {
        return $$(function() {
          return this.li(item[1], {
            "class": item[0]
          });
        });
      };
      selectList.confirmed = jasmine.createSpy('confirmed hook');
      selectList.cancelled = jasmine.createSpy('cancelled hook');
      selectList.setItems(items);
      return list = selectList.list, filterEditorView = selectList.filterEditorView, selectList;
    });
    describe("when an array is assigned", function() {
      return it("populates the list with up to maxItems items, based on the liForElement function", function() {
        expect(list.find('li').length).toBe(selectList.maxItems);
        expect(list.find('li:eq(0)')).toHaveText('Alpha');
        return expect(list.find('li:eq(0)')).toHaveClass('A');
      });
    });
    describe("viewForItem(item)", function() {
      it("allows raw DOM elements to be returned", function() {
        selectList.viewForItem = function(item) {
          var li;
          li = document.createElement('li');
          li.classList.add(item[0]);
          li.innerText = item[1];
          return li;
        };
        selectList.setItems(items);
        expect(list.find('li').length).toBe(selectList.maxItems);
        expect(list.find('li:eq(0)')).toHaveText('Alpha');
        expect(list.find('li:eq(0)')).toHaveClass('A');
        return expect(selectList.getSelectedItem()).toBe(items[0]);
      });
      return it("allows raw HTML to be returned", function() {
        selectList.viewForItem = function(item) {
          return "<li>" + item + "</li>";
        };
        selectList.setItems(['Bermuda', 'Bahama']);
        expect(list.find('li:eq(0)')).toHaveText('Bermuda');
        return expect(selectList.getSelectedItem()).toBe('Bermuda');
      });
    });
    describe("when the text of the mini editor changes", function() {
      beforeEach(function() {
        return selectList.attachToDom();
      });
      it("filters the elements in the list based on the scoreElement function and selects the first item", function() {
        filterEditorView.getEditor().insertText('la');
        window.advanceClock(selectList.inputThrottle);
        expect(list.find('li').length).toBe(2);
        expect(list.find('li:contains(Alpha)')).toExist();
        expect(list.find('li:contains(Delta)')).toExist();
        expect(list.find('li:first')).toHaveClass('selected');
        return expect(selectList.error).not.toBeVisible();
      });
      it("displays an error if there are no matches, removes error when there are matches", function() {
        filterEditorView.getEditor().insertText('nothing will match this');
        window.advanceClock(selectList.inputThrottle);
        expect(list.find('li').length).toBe(0);
        expect(selectList.error).not.toBeHidden();
        filterEditorView.getEditor().setText('la');
        window.advanceClock(selectList.inputThrottle);
        expect(list.find('li').length).toBe(2);
        return expect(selectList.error).not.toBeVisible();
      });
      return it("displays no elements until the array has been set on the list", function() {
        selectList.items = null;
        selectList.list.empty();
        filterEditorView.getEditor().insertText('la');
        window.advanceClock(selectList.inputThrottle);
        expect(list.find('li').length).toBe(0);
        expect(selectList.error).toBeHidden();
        selectList.setItems(items);
        return expect(list.find('li').length).toBe(2);
      });
    });
    describe("when core:move-up / core:move-down are triggered on the filterEditorView", function() {
      it("selects the previous / next item in the list, or wraps around to the other side", function() {
        expect(list.find('li:first')).toHaveClass('selected');
        filterEditorView.trigger('core:move-up');
        expect(list.find('li:first')).not.toHaveClass('selected');
        expect(list.find('li:last')).toHaveClass('selected');
        filterEditorView.trigger('core:move-down');
        expect(list.find('li:first')).toHaveClass('selected');
        expect(list.find('li:last')).not.toHaveClass('selected');
        filterEditorView.trigger('core:move-down');
        expect(list.find('li:eq(0)')).not.toHaveClass('selected');
        expect(list.find('li:eq(1)')).toHaveClass('selected');
        filterEditorView.trigger('core:move-down');
        expect(list.find('li:eq(1)')).not.toHaveClass('selected');
        expect(list.find('li:eq(2)')).toHaveClass('selected');
        filterEditorView.trigger('core:move-up');
        expect(list.find('li:eq(2)')).not.toHaveClass('selected');
        return expect(list.find('li:eq(1)')).toHaveClass('selected');
      });
      return it("scrolls to keep the selected item in view", function() {
        var itemHeight;
        selectList.attachToDom();
        itemHeight = list.find('li').outerHeight();
        list.height(itemHeight * 2);
        filterEditorView.trigger('core:move-down');
        filterEditorView.trigger('core:move-down');
        expect(list.scrollBottom()).toBe(itemHeight * 3);
        filterEditorView.trigger('core:move-down');
        expect(list.scrollBottom()).toBe(itemHeight * 4);
        filterEditorView.trigger('core:move-up');
        filterEditorView.trigger('core:move-up');
        return expect(list.scrollTop()).toBe(itemHeight);
      });
    });
    describe("the core:confirm event", function() {
      describe("when there is an item selected (because the list in not empty)", function() {
        return it("triggers the selected hook with the selected array element", function() {
          filterEditorView.trigger('core:move-down');
          filterEditorView.trigger('core:move-down');
          filterEditorView.trigger('core:confirm');
          return expect(selectList.confirmed).toHaveBeenCalledWith(items[2]);
        });
      });
      return describe("when there is no item selected (because the list is empty)", function() {
        beforeEach(function() {
          return selectList.attachToDom();
        });
        it("does not trigger the confirmed hook", function() {
          filterEditorView.getEditor().insertText("i will never match anything");
          window.advanceClock(selectList.inputThrottle);
          expect(list.find('li')).not.toExist();
          filterEditorView.trigger('core:confirm');
          return expect(selectList.confirmed).not.toHaveBeenCalled();
        });
        return it("does trigger the cancelled hook", function() {
          filterEditorView.getEditor().insertText("i will never match anything");
          window.advanceClock(selectList.inputThrottle);
          expect(list.find('li')).not.toExist();
          filterEditorView.trigger('core:confirm');
          return expect(selectList.cancelled).toHaveBeenCalled();
        });
      });
    });
    describe("when a list item is clicked", function() {
      return it("selects the item on mousedown and confirms it on mouseup", function() {
        var item;
        item = list.find('li:eq(1)');
        item.mousedown();
        expect(item).toHaveClass('selected');
        item.mouseup();
        return expect(selectList.confirmed).toHaveBeenCalledWith(items[1]);
      });
    });
    describe("the core:cancel event", function() {
      return it("triggers the cancelled hook and detaches and empties the select list", function() {
        spyOn(selectList, 'detach');
        filterEditorView.trigger('core:cancel');
        expect(selectList.cancelled).toHaveBeenCalled();
        expect(selectList.detach).toHaveBeenCalled();
        return expect(selectList.list).toBeEmpty();
      });
    });
    describe("when the mini editor loses focus", function() {
      return it("triggers the cancelled hook and detaches the select list", function() {
        spyOn(selectList, 'detach');
        filterEditorView.hiddenInput.trigger('focusout');
        expect(selectList.cancelled).toHaveBeenCalled();
        return expect(selectList.detach).toHaveBeenCalled();
      });
    });
    describe("the core:move-to-top event", function() {
      return it("scrolls to the top, selects the first element, and does not bubble the event", function() {
        var moveToTopHandler;
        selectList.attachToDom();
        moveToTopHandler = jasmine.createSpy("moveToTopHandler");
        selectList.parent().on('core:move-to-top', moveToTopHandler);
        selectList.trigger('core:move-down');
        expect(list.find('li:eq(1)')).toHaveClass('selected');
        selectList.trigger('core:move-to-top');
        expect(list.find('li:first')).toHaveClass('selected');
        return expect(moveToTopHandler).not.toHaveBeenCalled();
      });
    });
    return describe("the core:move-to-bottom event", function() {
      return it("scrolls to the bottom, selects the last element, and does not bubble the event", function() {
        var moveToBottomHandler;
        selectList.attachToDom();
        moveToBottomHandler = jasmine.createSpy("moveToBottomHandler");
        selectList.parent().on('core:move-to-bottom', moveToBottomHandler);
        expect(list.find('li:first')).toHaveClass('selected');
        selectList.trigger('core:move-to-bottom');
        expect(list.find('li:last')).toHaveClass('selected');
        return expect(moveToBottomHandler).not.toHaveBeenCalled();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/select-list-view-spec.coffee