(function() {
  var Git, Task, copyRepository, fs, path, temp;

  temp = require('temp');

  Git = require('../src/git');

  fs = require('fs-plus');

  path = require('path');

  Task = require('../src/task');

  copyRepository = function() {
    var workingDirPath;
    workingDirPath = temp.mkdirSync('atom-working-dir');
    fs.copySync(path.join(__dirname, 'fixtures', 'git', 'working-dir'), workingDirPath);
    fs.renameSync(path.join(workingDirPath, 'git.git'), path.join(workingDirPath, '.git'));
    return workingDirPath;
  };

  describe("Git", function() {
    var repo;
    repo = null;
    beforeEach(function() {
      var gitPath;
      gitPath = path.join(temp.dir, '.git');
      if (fs.isDirectorySync(gitPath)) {
        return fs.removeSync(gitPath);
      }
    });
    afterEach(function() {
      if ((repo != null ? repo.repo : void 0) != null) {
        return repo.destroy();
      }
    });
    describe("@open(path)", function() {
      return it("returns null when no repository is found", function() {
        return expect(Git.open(path.join(temp.dir, 'nogit.txt'))).toBeNull();
      });
    });
    describe("new Git(path)", function() {
      return it("throws an exception when no repository is found", function() {
        return expect(function() {
          return new Git(path.join(temp.dir, 'nogit.txt'));
        }).toThrow();
      });
    });
    describe(".getPath()", function() {
      it("returns the repository path for a .git directory path", function() {
        repo = new Git(path.join(__dirname, 'fixtures', 'git', 'master.git', 'HEAD'));
        return expect(repo.getPath()).toBe(path.join(__dirname, 'fixtures', 'git', 'master.git'));
      });
      return it("returns the repository path for a repository path", function() {
        repo = new Git(path.join(__dirname, 'fixtures', 'git', 'master.git'));
        return expect(repo.getPath()).toBe(path.join(__dirname, 'fixtures', 'git', 'master.git'));
      });
    });
    describe(".isPathIgnored(path)", function() {
      it("returns true for an ignored path", function() {
        repo = new Git(path.join(__dirname, 'fixtures', 'git', 'ignore.git'));
        return expect(repo.isPathIgnored('a.txt')).toBeTruthy();
      });
      return it("returns false for a non-ignored path", function() {
        repo = new Git(path.join(__dirname, 'fixtures', 'git', 'ignore.git'));
        return expect(repo.isPathIgnored('b.txt')).toBeFalsy();
      });
    });
    describe(".isPathModified(path)", function() {
      var filePath, newPath, _ref;
      _ref = [], repo = _ref[0], filePath = _ref[1], newPath = _ref[2];
      beforeEach(function() {
        var workingDirPath;
        workingDirPath = copyRepository();
        repo = new Git(workingDirPath);
        filePath = path.join(workingDirPath, 'a.txt');
        return newPath = path.join(workingDirPath, 'new-path.txt');
      });
      return describe("when the path is unstaged", function() {
        it("returns false if the path has not been modified", function() {
          return expect(repo.isPathModified(filePath)).toBeFalsy();
        });
        it("returns true if the path is modified", function() {
          fs.writeFileSync(filePath, "change");
          return expect(repo.isPathModified(filePath)).toBeTruthy();
        });
        it("returns true if the path is deleted", function() {
          fs.removeSync(filePath);
          return expect(repo.isPathModified(filePath)).toBeTruthy();
        });
        return it("returns false if the path is new", function() {
          return expect(repo.isPathModified(newPath)).toBeFalsy();
        });
      });
    });
    describe(".isPathNew(path)", function() {
      var filePath, newPath, _ref;
      _ref = [], filePath = _ref[0], newPath = _ref[1];
      beforeEach(function() {
        var workingDirPath;
        workingDirPath = copyRepository();
        repo = new Git(workingDirPath);
        filePath = path.join(workingDirPath, 'a.txt');
        newPath = path.join(workingDirPath, 'new-path.txt');
        return fs.writeFileSync(newPath, "i'm new here");
      });
      return describe("when the path is unstaged", function() {
        it("returns true if the path is new", function() {
          return expect(repo.isPathNew(newPath)).toBeTruthy();
        });
        return it("returns false if the path isn't new", function() {
          return expect(repo.isPathNew(filePath)).toBeFalsy();
        });
      });
    });
    describe(".checkoutHead(path)", function() {
      var filePath;
      filePath = [][0];
      beforeEach(function() {
        var workingDirPath;
        workingDirPath = copyRepository();
        repo = new Git(workingDirPath);
        return filePath = path.join(workingDirPath, 'a.txt');
      });
      it("no longer reports a path as modified after checkout", function() {
        expect(repo.isPathModified(filePath)).toBeFalsy();
        fs.writeFileSync(filePath, 'ch ch changes');
        expect(repo.isPathModified(filePath)).toBeTruthy();
        expect(repo.checkoutHead(filePath)).toBeTruthy();
        return expect(repo.isPathModified(filePath)).toBeFalsy();
      });
      it("restores the contents of the path to the original text", function() {
        fs.writeFileSync(filePath, 'ch ch changes');
        expect(repo.checkoutHead(filePath)).toBeTruthy();
        return expect(fs.readFileSync(filePath, 'utf8')).toBe('');
      });
      return it("fires a status-changed event if the checkout completes successfully", function() {
        var statusHandler;
        fs.writeFileSync(filePath, 'ch ch changes');
        repo.getPathStatus(filePath);
        statusHandler = jasmine.createSpy('statusHandler');
        repo.on('status-changed', statusHandler);
        repo.checkoutHead(filePath);
        expect(statusHandler.callCount).toBe(1);
        expect(statusHandler.argsForCall[0].slice(0, 2)).toEqual([filePath, 0]);
        repo.checkoutHead(filePath);
        return expect(statusHandler.callCount).toBe(1);
      });
    });
    describe(".destroy()", function() {
      return it("throws an exception when any method is called after it is called", function() {
        repo = new Git(require.resolve('./fixtures/git/master.git/HEAD'));
        repo.destroy();
        return expect(function() {
          return repo.getShortHead();
        }).toThrow();
      });
    });
    describe(".getPathStatus(path)", function() {
      var filePath;
      filePath = [][0];
      beforeEach(function() {
        var workingDirectory;
        workingDirectory = copyRepository();
        repo = new Git(workingDirectory);
        return filePath = path.join(workingDirectory, 'file.txt');
      });
      return it("trigger a status-changed event when the new status differs from the last cached one", function() {
        var status, statusHandler;
        statusHandler = jasmine.createSpy("statusHandler");
        repo.on('status-changed', statusHandler);
        fs.writeFileSync(filePath, '');
        status = repo.getPathStatus(filePath);
        expect(statusHandler.callCount).toBe(1);
        expect(statusHandler.argsForCall[0].slice(0, 2)).toEqual([filePath, status]);
        fs.writeFileSync(filePath, 'abc');
        status = repo.getPathStatus(filePath);
        return expect(statusHandler.callCount).toBe(1);
      });
    });
    describe(".getDirectoryStatus(path)", function() {
      var directoryPath, filePath, _ref;
      _ref = [], directoryPath = _ref[0], filePath = _ref[1];
      beforeEach(function() {
        var workingDirectory;
        workingDirectory = copyRepository();
        repo = new Git(workingDirectory);
        directoryPath = path.join(workingDirectory, 'dir');
        return filePath = path.join(directoryPath, 'b.txt');
      });
      return it("gets the status based on the files inside the directory", function() {
        expect(repo.isStatusModified(repo.getDirectoryStatus(directoryPath))).toBe(false);
        fs.writeFileSync(filePath, 'abc');
        repo.getPathStatus(filePath);
        return expect(repo.isStatusModified(repo.getDirectoryStatus(directoryPath))).toBe(true);
      });
    });
    describe(".refreshStatus()", function() {
      var cleanPath, modifiedPath, newPath, originalModifiedPathText, _ref;
      _ref = [], newPath = _ref[0], modifiedPath = _ref[1], cleanPath = _ref[2], originalModifiedPathText = _ref[3];
      beforeEach(function() {
        var workingDirectory;
        workingDirectory = copyRepository();
        repo = new Git(workingDirectory);
        modifiedPath = path.join(workingDirectory, 'file.txt');
        newPath = path.join(workingDirectory, 'untracked.txt');
        cleanPath = path.join(workingDirectory, 'other.txt');
        fs.writeFileSync(cleanPath, 'Full of text');
        fs.writeFileSync(newPath, '');
        return newPath = fs.absolute(newPath);
      });
      return it("returns status information for all new and modified files", function() {
        var statusHandler;
        fs.writeFileSync(modifiedPath, 'making this path modified');
        statusHandler = jasmine.createSpy('statusHandler');
        repo.on('statuses-changed', statusHandler);
        repo.refreshStatus();
        waitsFor(function() {
          return statusHandler.callCount > 0;
        });
        return runs(function() {
          expect(repo.getCachedPathStatus(cleanPath)).toBeUndefined();
          expect(repo.isStatusNew(repo.getCachedPathStatus(newPath))).toBeTruthy();
          return expect(repo.isStatusModified(repo.getCachedPathStatus(modifiedPath))).toBeTruthy();
        });
      });
    });
    describe("buffer events", function() {
      var editor;
      editor = [][0];
      beforeEach(function() {
        atom.project.setPath(copyRepository());
        return waitsForPromise(function() {
          return atom.workspace.open('other.txt').then(function(o) {
            return editor = o;
          });
        });
      });
      it("emits a status-changed event when a buffer is saved", function() {
        var statusHandler;
        editor.insertNewline();
        statusHandler = jasmine.createSpy('statusHandler');
        atom.project.getRepo().on('status-changed', statusHandler);
        editor.save();
        expect(statusHandler.callCount).toBe(1);
        return expect(statusHandler).toHaveBeenCalledWith(editor.getPath(), 256);
      });
      it("emits a status-changed event when a buffer is reloaded", function() {
        var statusHandler;
        fs.writeFileSync(editor.getPath(), 'changed');
        statusHandler = jasmine.createSpy('statusHandler');
        atom.project.getRepo().on('status-changed', statusHandler);
        editor.getBuffer().reload();
        expect(statusHandler.callCount).toBe(1);
        expect(statusHandler).toHaveBeenCalledWith(editor.getPath(), 256);
        editor.getBuffer().reload();
        return expect(statusHandler.callCount).toBe(1);
      });
      return it("emits a status-changed event when a buffer's path changes", function() {
        var statusHandler;
        fs.writeFileSync(editor.getPath(), 'changed');
        statusHandler = jasmine.createSpy('statusHandler');
        atom.project.getRepo().on('status-changed', statusHandler);
        editor.getBuffer().emit('path-changed');
        expect(statusHandler.callCount).toBe(1);
        expect(statusHandler).toHaveBeenCalledWith(editor.getPath(), 256);
        editor.getBuffer().emit('path-changed');
        return expect(statusHandler.callCount).toBe(1);
      });
    });
    return describe("when a project is deserialized", function() {
      var buffer, project2, _ref;
      _ref = [], buffer = _ref[0], project2 = _ref[1];
      afterEach(function() {
        return project2 != null ? project2.destroy() : void 0;
      });
      return it("subscribes to all the serialized buffers in the project", function() {
        atom.project.setPath(copyRepository());
        waitsForPromise(function() {
          return atom.workspace.open('file.txt');
        });
        runs(function() {
          project2 = atom.project.testSerialization();
          return buffer = project2.getBuffers()[0];
        });
        waitsFor(function() {
          return buffer.loaded;
        });
        return runs(function() {
          var originalContent, statusHandler;
          originalContent = buffer.getText();
          buffer.append('changes');
          statusHandler = jasmine.createSpy('statusHandler');
          project2.getRepo().on('status-changed', statusHandler);
          buffer.save();
          expect(statusHandler.callCount).toBe(1);
          return expect(statusHandler).toHaveBeenCalledWith(buffer.getPath(), 256);
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/git-spec.coffee