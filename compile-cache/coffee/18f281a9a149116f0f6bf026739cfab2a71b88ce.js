(function() {
  var Omni, OmniSharpServer, Promise, Url, rp, _;

  OmniSharpServer = require('./omni-sharp-server');

  rp = require("request-promise");

  Url = require("url");

  _ = require("underscore");

  Promise = require("bluebird");

  module.exports = Omni = (function() {
    function Omni() {}

    Omni.getEditorContext = function(editor) {
      var context, marker;
      editor = editor || atom.workspace.getActiveEditor();
      if (!editor) {
        return;
      }
      marker = editor.getCursorBufferPosition();
      context = {
        column: marker.column + 1,
        filename: editor.getUri(),
        line: marker.row + 1,
        buffer: editor.buffer.getLines().join('\n')
      };
      return context;
    };

    Omni._uri = function(path, query) {
      var port;
      port = OmniSharpServer.get().getPortNumber();
      return Url.format({
        hostname: "localhost",
        protocol: "http",
        port: port,
        pathname: path,
        query: query
      });
    };

    Omni.req = function(path, event, d, editor) {
      return Omni._req(path, event, d, editor)["catch"](function(data) {
        var _ref;
        if (typeof data !== 'string') {
          return console.error(data.statusCode != null, (_ref = data.options) != null ? _ref.uri : void 0);
        }
      });
    };

    Omni._req = function(path, event, d, editor) {
      var context;
      if (OmniSharpServer.vm.isNotReady) {
        return Promise.reject("omnisharp not ready");
      }
      context = Omni.getEditorContext(editor);
      if (!context) {
        return Promise.reject("no editor context found");
      }
      return rp({
        uri: Omni._uri(path),
        method: "POST",
        form: _.extend({}, context, d)
      }).then(function(data) {
        var json;
        json = JSON.parse(data);
        atom.emit("omni:" + event, json);
        return json;
      });
    };

    Omni.syntaxErrors = function() {
      return Omni.req("syntaxErrors", "syntax-errors");
    };

    Omni.codecheck = function(buffer, editor) {
      return Omni.req("codecheck", "quick-fixes", null, editor);
    };

    Omni.findUsages = function() {
      return Omni.req("findUsages", "find-usages");
    };

    Omni.goToDefinition = function() {
      return Omni.req("gotoDefinition", "navigate-to");
    };

    Omni.autocomplete = function(wordToComplete) {
      var data;
      data = {
        wordToComplete: wordToComplete,
        wantDocumentationForEveryCompletionResult: false
      };
      return Omni.req("autocomplete", "autocomplete", data);
    };

    return Omni;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDBDQUFBOztBQUFBLEVBQUEsZUFBQSxHQUFrQixPQUFBLENBQVEscUJBQVIsQ0FBbEIsQ0FBQTs7QUFBQSxFQUNBLEVBQUEsR0FBSyxPQUFBLENBQVEsaUJBQVIsQ0FETCxDQUFBOztBQUFBLEVBRUEsR0FBQSxHQUFNLE9BQUEsQ0FBUSxLQUFSLENBRk4sQ0FBQTs7QUFBQSxFQUdBLENBQUEsR0FBSSxPQUFBLENBQVEsWUFBUixDQUhKLENBQUE7O0FBQUEsRUFJQSxPQUFBLEdBQVUsT0FBQSxDQUFRLFVBQVIsQ0FKVixDQUFBOztBQUFBLEVBTUEsTUFBTSxDQUFDLE9BQVAsR0FFUTtzQkFFSjs7QUFBQSxJQUFBLElBQUMsQ0FBQSxnQkFBRCxHQUFtQixTQUFDLE1BQUQsR0FBQTtBQUNqQixVQUFBLGVBQUE7QUFBQSxNQUFBLE1BQUEsR0FBUyxNQUFBLElBQVUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFmLENBQUEsQ0FBbkIsQ0FBQTtBQUNBLE1BQUEsSUFBQSxDQUFBLE1BQUE7QUFBQSxjQUFBLENBQUE7T0FEQTtBQUFBLE1BRUEsTUFBQSxHQUFTLE1BQU0sQ0FBQyx1QkFBUCxDQUFBLENBRlQsQ0FBQTtBQUFBLE1BSUEsT0FBQSxHQUNFO0FBQUEsUUFBQSxNQUFBLEVBQVEsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsQ0FBeEI7QUFBQSxRQUNBLFFBQUEsRUFBVSxNQUFNLENBQUMsTUFBUCxDQUFBLENBRFY7QUFBQSxRQUVBLElBQUEsRUFBTSxNQUFNLENBQUMsR0FBUCxHQUFhLENBRm5CO0FBQUEsUUFHQSxNQUFBLEVBQVEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFkLENBQUEsQ0FBd0IsQ0FBQyxJQUF6QixDQUE4QixJQUE5QixDQUhSO09BTEYsQ0FBQTthQVNBLFFBVmlCO0lBQUEs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
//# sourceURL=/Users/daniel/.atom/packages/omnisharp-atom/lib/omni-sharp-server/omni.coffee