(function() {
  var $$, ContextMenuManager;

  $$ = require('atom').$$;

  ContextMenuManager = require('../src/context-menu-manager');

  describe("ContextMenuManager", function() {
    var contextMenu;
    contextMenu = [][0];
    beforeEach(function() {
      return contextMenu = new ContextMenuManager;
    });
    describe("adding definitions", function() {
      it('loads', function() {
        contextMenu.add('file-path', {
          '.selector': {
            'label': 'command'
          }
        });
        expect(contextMenu.definitions['.selector'][0].label).toEqual('label');
        return expect(contextMenu.definitions['.selector'][0].command).toEqual('command');
      });
      it('does not add duplicate menu items', function() {
        contextMenu.add('file-path', {
          '.selector': {
            'label': 'command'
          }
        });
        contextMenu.add('file-path', {
          '.selector': {
            'label': 'command'
          }
        });
        expect(contextMenu.definitions['.selector'][0].label).toEqual('label');
        expect(contextMenu.definitions['.selector'][0].command).toEqual('command');
        return expect(contextMenu.definitions['.selector'].length).toBe(1);
      });
      it('allows duplicate commands with different labels', function() {
        contextMenu.add('file-path', {
          '.selector': {
            'label': 'command'
          }
        });
        contextMenu.add('file-path', {
          '.selector': {
            'another label': 'command'
          }
        });
        expect(contextMenu.definitions['.selector'][0].label).toEqual('label');
        expect(contextMenu.definitions['.selector'][0].command).toEqual('command');
        expect(contextMenu.definitions['.selector'][1].label).toEqual('another label');
        return expect(contextMenu.definitions['.selector'][1].command).toEqual('command');
      });
      it("loads submenus", function() {
        contextMenu.add('file-path', {
          '.selector': {
            'parent': {
              'child-1': 'child-1:trigger',
              'child-2': 'child-2:trigger'
            },
            'parent-2': 'parent-2:trigger'
          }
        });
        expect(contextMenu.definitions['.selector'].length).toBe(2);
        expect(contextMenu.definitions['.selector'][0].label).toEqual('parent');
        expect(contextMenu.definitions['.selector'][0].submenu.length).toBe(2);
        expect(contextMenu.definitions['.selector'][0].submenu[0].label).toBe('child-1');
        expect(contextMenu.definitions['.selector'][0].submenu[0].command).toBe('child-1:trigger');
        expect(contextMenu.definitions['.selector'][0].submenu[1].label).toBe('child-2');
        return expect(contextMenu.definitions['.selector'][0].submenu[1].command).toBe('child-2:trigger');
      });
      return describe('dev mode', function() {
        return it('loads', function() {
          contextMenu.add('file-path', {
            '.selector': {
              'label': 'command'
            }
          }, {
            devMode: true
          });
          expect(contextMenu.devModeDefinitions['.selector'][0].label).toEqual('label');
          return expect(contextMenu.devModeDefinitions['.selector'][0].command).toEqual('command');
        });
      });
    });
    describe("building a menu template", function() {
      beforeEach(function() {
        contextMenu.definitions = {
          '.parent': [
            {
              label: 'parent',
              command: 'command-p'
            }
          ],
          '.child': [
            {
              label: 'child',
              command: 'command-c'
            }
          ]
        };
        return contextMenu.devModeDefinitions = {
          '.parent': [
            {
              label: 'dev-label',
              command: 'dev-command'
            }
          ]
        };
      });
      describe("on a single element", function() {
        var element;
        element = [][0];
        beforeEach(function() {
          return element = ($$(function() {
            return this.div({
              "class": 'parent'
            });
          }))[0];
        });
        it("creates a menu with a single item", function() {
          var menu;
          menu = contextMenu.combinedMenuTemplateForElement(element);
          expect(menu[0].label).toEqual('parent');
          expect(menu[0].command).toEqual('command-p');
          return expect(menu[1]).toBeUndefined();
        });
        return describe("in devMode", function() {
          beforeEach(function() {
            return contextMenu.devMode = true;
          });
          return it("creates a menu with development items", function() {
            var menu;
            menu = contextMenu.combinedMenuTemplateForElement(element);
            expect(menu[0].label).toEqual('parent');
            expect(menu[0].command).toEqual('command-p');
            expect(menu[1].type).toEqual('separator');
            expect(menu[2].label).toEqual('dev-label');
            return expect(menu[2].command).toEqual('dev-command');
          });
        });
      });
      return describe("on multiple elements", function() {
        var element;
        element = [][0];
        beforeEach(function() {
          element = $$(function() {
            return this.div({
              "class": 'parent'
            }, (function(_this) {
              return function() {
                return _this.div({
                  "class": 'child'
                });
              };
            })(this));
          });
          return element = element.find('.child')[0];
        });
        it("creates a menu with a two items", function() {
          var menu;
          menu = contextMenu.combinedMenuTemplateForElement(element);
          expect(menu[0].label).toEqual('child');
          expect(menu[0].command).toEqual('command-c');
          expect(menu[1].label).toEqual('parent');
          expect(menu[1].command).toEqual('command-p');
          return expect(menu[2]).toBeUndefined();
        });
        return describe("in devMode", function() {
          beforeEach(function() {
            return contextMenu.devMode = true;
          });
          return xit("creates a menu with development items", function() {
            var menu;
            menu = contextMenu.combinedMenuTemplateForElement(element);
            expect(menu[0].label).toEqual('child');
            expect(menu[0].command).toEqual('command-c');
            expect(menu[1].label).toEqual('parent');
            expect(menu[1].command).toEqual('command-p');
            expect(menu[2].label).toEqual('dev-label');
            expect(menu[2].command).toEqual('dev-command');
            return expect(menu[3]).toBeUndefined();
          });
        });
      });
    });
    return describe("executeBuildHandlers", function() {
      var event, menuTemplate;
      menuTemplate = [
        {
          label: 'label',
          executeAtBuild: function() {}
        }
      ];
      event = {
        target: null
      };
      return it('should invoke the executeAtBuild fn', function() {
        var buildFn;
        buildFn = spyOn(menuTemplate[0], 'executeAtBuild');
        contextMenu.executeBuildHandlers(event, menuTemplate);
        expect(buildFn).toHaveBeenCalled();
        return expect(buildFn.mostRecentCall.args[0]).toBe(event);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/context-menu-manager-spec.coffee