(function() {
  var Pane, PaneContainer;

  PaneContainer = require('../src/pane-container');

  Pane = require('../src/pane');

  describe("PaneContainer", function() {
    describe("serialization", function() {
      var containerA, pane1A, pane2A, pane3A, _ref;
      _ref = [], containerA = _ref[0], pane1A = _ref[1], pane2A = _ref[2], pane3A = _ref[3];
      beforeEach(function() {
        var Item;
        Item = (function() {
          function Item() {}

          atom.deserializers.add(Item);

          Item.deserialize = function() {
            return new this;
          };

          Item.prototype.serialize = function() {
            return {
              deserializer: 'Item'
            };
          };

          return Item;

        })();
        pane1A = new Pane({
          items: [new Item]
        });
        containerA = new PaneContainer({
          root: pane1A
        });
        pane2A = pane1A.splitRight({
          items: [new Item]
        });
        pane3A = pane2A.splitDown({
          items: [new Item]
        });
        return pane3A.focus();
      });
      it("preserves the focused pane across serialization", function() {
        var containerB, pane1B, pane2B, pane3B, _ref1;
        expect(pane3A.focused).toBe(true);
        containerB = containerA.testSerialization();
        _ref1 = containerB.getPanes(), pane1B = _ref1[0], pane2B = _ref1[1], pane3B = _ref1[2];
        return expect(pane3B.focused).toBe(true);
      });
      return it("preserves the active pane across serialization, independent of focus", function() {
        var containerB, pane1B, pane2B, pane3B, _ref1;
        pane3A.activate();
        expect(containerA.getActivePane()).toBe(pane3A);
        containerB = containerA.testSerialization();
        _ref1 = containerB.getPanes(), pane1B = _ref1[0], pane2B = _ref1[1], pane3B = _ref1[2];
        return expect(containerB.getActivePane()).toBe(pane3B);
      });
    });
    it("does not allow the root pane to be destroyed", function() {
      var container;
      container = new PaneContainer;
      container.getRoot().destroy();
      expect(container.getRoot()).toBeDefined();
      return expect(container.getRoot().isDestroyed()).toBe(false);
    });
    describe("::getActivePane()", function() {
      var container, pane1, pane2, _ref;
      _ref = [], container = _ref[0], pane1 = _ref[1], pane2 = _ref[2];
      beforeEach(function() {
        container = new PaneContainer;
        return pane1 = container.getRoot();
      });
      it("returns the first pane if no pane has been made active", function() {
        expect(container.getActivePane()).toBe(pane1);
        return expect(pane1.isActive()).toBe(true);
      });
      it("returns the most pane on which ::activate() was most recently called", function() {
        pane2 = pane1.splitRight();
        pane2.activate();
        expect(container.getActivePane()).toBe(pane2);
        expect(pane1.isActive()).toBe(false);
        expect(pane2.isActive()).toBe(true);
        pane1.activate();
        expect(container.getActivePane()).toBe(pane1);
        expect(pane1.isActive()).toBe(true);
        return expect(pane2.isActive()).toBe(false);
      });
      return it("returns the next pane if the current active pane is destroyed", function() {
        pane2 = pane1.splitRight();
        pane2.activate();
        pane2.destroy();
        expect(container.getActivePane()).toBe(pane1);
        return expect(pane1.isActive()).toBe(true);
      });
    });
    describe("::onDidChangeActivePaneItem()", function() {
      var container, observed, pane1, pane2, _ref;
      _ref = [], container = _ref[0], pane1 = _ref[1], pane2 = _ref[2], observed = _ref[3];
      beforeEach(function() {
        var _ref1;
        container = new PaneContainer({
          root: new Pane({
            items: [new Object, new Object]
          })
        });
        container.getRoot().splitRight({
          items: [new Object, new Object]
        });
        _ref1 = container.getPanes(), pane1 = _ref1[0], pane2 = _ref1[1];
        observed = [];
        return container.onDidChangeActivePaneItem(function(item) {
          return observed.push(item);
        });
      });
      it("invokes observers when the active item of the active pane changes", function() {
        pane2.activateNextItem();
        pane2.activateNextItem();
        return expect(observed).toEqual([pane2.itemAtIndex(1), pane2.itemAtIndex(0)]);
      });
      return it("invokes observers when the active pane changes", function() {
        pane1.activate();
        pane2.activate();
        return expect(observed).toEqual([pane1.itemAtIndex(0), pane2.itemAtIndex(0)]);
      });
    });
    describe("::observePanes()", function() {
      return it("invokes observers with all current and future panes", function() {
        var container, observed, pane1, pane2, pane3, pane4, _ref;
        container = new PaneContainer;
        container.getRoot().splitRight();
        _ref = container.getPanes(), pane1 = _ref[0], pane2 = _ref[1];
        observed = [];
        container.observePanes(function(pane) {
          return observed.push(pane);
        });
        pane3 = pane2.splitDown();
        pane4 = pane2.splitRight();
        return expect(observed).toEqual([pane1, pane2, pane3, pane4]);
      });
    });
    return describe("::observePaneItems()", function() {
      return it("invokes observers with all current and future pane items", function() {
        var container, observed, pane1, pane2, pane3, _ref;
        container = new PaneContainer({
          root: new Pane({
            items: [new Object, new Object]
          })
        });
        container.getRoot().splitRight({
          items: [new Object]
        });
        _ref = container.getPanes(), pane1 = _ref[0], pane2 = _ref[1];
        observed = [];
        container.observePaneItems(function(pane) {
          return observed.push(pane);
        });
        pane3 = pane2.splitDown({
          items: [new Object]
        });
        pane3.addItems([new Object, new Object]);
        return expect(observed).toEqual(container.getPaneItems());
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/pane-container-spec.coffee