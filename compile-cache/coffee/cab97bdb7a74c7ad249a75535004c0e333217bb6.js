(function() {
  var Editor;

  Editor = require('../src/editor');

  describe("Selection", function() {
    var buffer, editor, selection, _ref;
    _ref = [], buffer = _ref[0], editor = _ref[1], selection = _ref[2];
    beforeEach(function() {
      buffer = atom.project.bufferForPathSync('sample.js');
      editor = new Editor({
        buffer: buffer,
        tabLength: 2
      });
      return selection = editor.getSelection();
    });
    afterEach(function() {
      return buffer.destroy();
    });
    describe(".deleteSelectedText()", function() {
      describe("when nothing is selected", function() {
        return it("deletes nothing", function() {
          selection.setBufferRange([[0, 3], [0, 3]]);
          selection.deleteSelectedText();
          return expect(buffer.lineForRow(0)).toBe("var quicksort = function () {");
        });
      });
      describe("when one line is selected", function() {
        return it("deletes selected text and clears the selection", function() {
          var endOfLine;
          selection.setBufferRange([[0, 4], [0, 14]]);
          selection.deleteSelectedText();
          expect(buffer.lineForRow(0)).toBe("var = function () {");
          endOfLine = buffer.lineForRow(0).length;
          selection.setBufferRange([[0, 0], [0, endOfLine]]);
          selection.deleteSelectedText();
          expect(buffer.lineForRow(0)).toBe("");
          return expect(selection.isEmpty()).toBeTruthy();
        });
      });
      describe("when multiple lines are selected", function() {
        return it("deletes selected text and clears the selection", function() {
          selection.setBufferRange([[0, 1], [2, 39]]);
          selection.deleteSelectedText();
          expect(buffer.lineForRow(0)).toBe("v;");
          return expect(selection.isEmpty()).toBeTruthy();
        });
      });
      return describe("when the cursor precedes the tail", function() {
        return it("deletes selected text and clears the selection", function() {
          selection.cursor.setScreenPosition([0, 13]);
          selection.selectToScreenPosition([0, 4]);
          selection["delete"]();
          expect(buffer.lineForRow(0)).toBe("var  = function () {");
          return expect(selection.isEmpty()).toBeTruthy();
        });
      });
    });
    describe(".isReversed()", function() {
      return it("returns true if the cursor precedes the tail", function() {
        selection.cursor.setScreenPosition([0, 20]);
        selection.selectToScreenPosition([0, 10]);
        expect(selection.isReversed()).toBeTruthy();
        selection.selectToScreenPosition([0, 25]);
        return expect(selection.isReversed()).toBeFalsy();
      });
    });
    describe("when only the selection's tail is moved (regression)", function() {
      return it("emits the 'screen-range-changed' event", function() {
        var changeScreenRangeHandler;
        selection.setBufferRange([[2, 0], [2, 10]], {
          reversed: true
        });
        changeScreenRangeHandler = jasmine.createSpy('changeScreenRangeHandler');
        selection.on('screen-range-changed', changeScreenRangeHandler);
        buffer.insert([2, 5], 'abc');
        return expect(changeScreenRangeHandler).toHaveBeenCalled();
      });
    });
    return describe("when the selection is destroyed", function() {
      return it("destroys its marker", function() {
        selection.setBufferRange([[2, 0], [2, 10]]);
        selection.destroy();
        return expect(selection.marker.isDestroyed()).toBeTruthy();
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLE1BQUE7O0FBQUEsRUFBQSxNQUFBLEdBQVMsT0FBQSxDQUFRLGVBQVIsQ0FBVCxDQUFBOztBQUFBLEVBRUEsUUFBQSxDQUFTLFdBQVQsRUFBc0IsU0FBQSxHQUFBO0FBQ3BCLFFBQUEsK0JBQUE7QUFBQSxJQUFBLE9BQThCLEVBQTlCLEVBQUMsZ0JBQUQsRUFBUyxnQkFBVCxFQUFpQixtQkFBakIsQ0FBQTtBQUFBLElBRUEsVUFBQSxDQUFXLFNBQUEsR0FBQTtBQUNULE1BQUEsTUFBQSxHQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWIsQ0FBK0IsV0FBL0IsQ0FBVCxDQUFBO0FBQUEsTUFDQSxNQUFBLEdBQWEsSUFBQSxNQUFBLENBQU87QUFBQSxRQUFBLE1BQUEsRUFBUSxNQUFSO0FBQUEsUUFBZ0IsU0FBQSxFQUFXLENBQTNCO09BQVAsQ0FEYixDQUFBO2FBRUEsU0FBQSxHQUFZLE1BQU0sQ0FBQyxZQUFQLENBQUEsRUFISDtJQUFBLENBQVgsQ0FGQSxDQUFBO0FBQUEsSUFPQSxTQUFBLENBQVUsU0FBQSxHQUFBO2FBQ1IsTUFBTSxDQUFDLE9BQVAsQ0FBQSxFQURRO0lBQUEsQ0FBVixDQVBBLENBQUE7QUFBQSxJQVVBLFFBQUEsQ0FBUyx1QkFBVCxFQUFrQyxTQUFBLEdBQUE7QUFDaEMsTUFBQSxRQUFBLENBQVMsMEJBQVQsRUFBcUMsU0FBQSxHQUFBO2VBQ25DLEVBQUEsQ0FBRyxpQkFBSCxFQUFzQixTQUFBLEdBQUE7QUFDcEIsVUFBQSxTQUFTLENBQUMsY0FBVixDQUF5QixDQUFDLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBRCxFQUFRLENBQUMsQ0FBRCxFQUFHLENBQUgsQ0FBUixDQUF6QixDQUFBLENBQUE7QUFBQSxVQUNBLFNBQVMsQ0FBQyxrQkFBVixDQUFBLENB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
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/selection-spec.coffee