(function() {
  var RowMap;

  RowMap = require('../src/row-map');

  describe("RowMap", function() {
    var map;
    map = null;
    beforeEach(function() {
      return map = new RowMap;
    });
    describe("::screenRowRangeForBufferRow(bufferRow)", function() {
      return it("returns the range of screen rows corresponding to the given buffer row", function() {
        map.spliceRegions(0, 0, [
          {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 1,
            screenRows: 5
          }, {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 5,
            screenRows: 1
          }
        ]);
        expect(map.screenRowRangeForBufferRow(0)).toEqual([0, 1]);
        expect(map.screenRowRangeForBufferRow(5)).toEqual([5, 10]);
        expect(map.screenRowRangeForBufferRow(6)).toEqual([10, 11]);
        expect(map.screenRowRangeForBufferRow(11)).toEqual([15, 16]);
        expect(map.screenRowRangeForBufferRow(12)).toEqual([15, 16]);
        return expect(map.screenRowRangeForBufferRow(16)).toEqual([16, 17]);
      });
    });
    describe("::bufferRowRangeForScreenRow(screenRow)", function() {
      return it("returns the range of buffer rows corresponding to the given screen row", function() {
        map.spliceRegions(0, 0, [
          {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 1,
            screenRows: 5
          }, {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 5,
            screenRows: 1
          }
        ]);
        expect(map.bufferRowRangeForScreenRow(0)).toEqual([0, 1]);
        expect(map.bufferRowRangeForScreenRow(5)).toEqual([5, 6]);
        expect(map.bufferRowRangeForScreenRow(6)).toEqual([5, 6]);
        expect(map.bufferRowRangeForScreenRow(10)).toEqual([6, 7]);
        expect(map.bufferRowRangeForScreenRow(14)).toEqual([10, 11]);
        expect(map.bufferRowRangeForScreenRow(15)).toEqual([11, 16]);
        return expect(map.bufferRowRangeForScreenRow(16)).toEqual([16, 17]);
      });
    });
    return describe("::spliceRegions(startBufferRow, bufferRowCount, regions)", function() {
      it("can insert regions when empty", function() {
        var regions;
        regions = [
          {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 1,
            screenRows: 5
          }, {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 5,
            screenRows: 1
          }
        ];
        map.spliceRegions(0, 0, regions);
        return expect(map.getRegions()).toEqual(regions);
      });
      it("can insert wrapped lines into rectangular regions", function() {
        map.spliceRegions(0, 0, [
          {
            bufferRows: 10,
            screenRows: 10
          }
        ]);
        map.spliceRegions(5, 0, [
          {
            bufferRows: 1,
            screenRows: 3
          }
        ]);
        return expect(map.getRegions()).toEqual([
          {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 1,
            screenRows: 3
          }, {
            bufferRows: 5,
            screenRows: 5
          }
        ]);
      });
      it("can splice wrapped lines into rectangular regions", function() {
        map.spliceRegions(0, 0, [
          {
            bufferRows: 10,
            screenRows: 10
          }
        ]);
        map.spliceRegions(5, 1, [
          {
            bufferRows: 1,
            screenRows: 3
          }
        ]);
        return expect(map.getRegions()).toEqual([
          {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 1,
            screenRows: 3
          }, {
            bufferRows: 4,
            screenRows: 4
          }
        ]);
      });
      it("can splice folded lines into rectangular regions", function() {
        map.spliceRegions(0, 0, [
          {
            bufferRows: 10,
            screenRows: 10
          }
        ]);
        map.spliceRegions(5, 3, [
          {
            bufferRows: 3,
            screenRows: 1
          }
        ]);
        return expect(map.getRegions()).toEqual([
          {
            bufferRows: 5,
            screenRows: 5
          }, {
            bufferRows: 3,
            screenRows: 1
          }, {
            bufferRows: 2,
            screenRows: 2
          }
        ]);
      });
      it("can replace folded regions with a folded region that surrounds them", function() {
        map.spliceRegions(0, 0, [
          {
            bufferRows: 3,
            screenRows: 3
          }, {
            bufferRows: 3,
            screenRows: 1
          }, {
            bufferRows: 1,
            screenRows: 1
          }, {
            bufferRows: 3,
            screenRows: 1
          }, {
            bufferRows: 3,
            screenRows: 3
          }
        ]);
        map.spliceRegions(2, 8, [
          {
            bufferRows: 8,
            screenRows: 1
          }
        ]);
        return expect(map.getRegions()).toEqual([
          {
            bufferRows: 2,
            screenRows: 2
          }, {
            bufferRows: 8,
            screenRows: 1
          }, {
            bufferRows: 3,
            screenRows: 3
          }
        ]);
      });
      return it("merges adjacent rectangular regions", function() {
        map.spliceRegions(0, 0, [
          {
            bufferRows: 3,
            screenRows: 3
          }, {
            bufferRows: 3,
            screenRows: 1
          }, {
            bufferRows: 1,
            screenRows: 1
          }, {
            bufferRows: 3,
            screenRows: 1
          }, {
            bufferRows: 3,
            screenRows: 3
          }
        ]);
        return map.spliceRegions(3, 7, [
          {
            bufferRows: 5,
            screenRows: 5
          }
        ]);
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/row-map-spec.coffee