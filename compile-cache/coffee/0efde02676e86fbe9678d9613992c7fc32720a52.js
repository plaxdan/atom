(function() {
  var $, BOTTOM, CONFLICT_REGEX, Conflict, Emitter, INVALID, MIDDLE, Marker, Navigator, OurSide, Side, TOP, TheirSide, _ref;

  $ = require('atom').$;

  Emitter = require('emissary').Emitter;

  _ref = require('./side'), Side = _ref.Side, OurSide = _ref.OurSide, TheirSide = _ref.TheirSide;

  Navigator = require('./navigator');

  CONFLICT_REGEX = /^<{7} (.+)\r?\n([^]*?)={7}\r?\n([^]*?)>{7} (.+)(?:\r?\n)?/mg;

  INVALID = null;

  TOP = 'top';

  MIDDLE = 'middle';

  BOTTOM = 'bottom';

  Marker = (function() {
    var options;

    options = {
      persistent: false,
      invalidate: 'never'
    };

    function Marker(state, editor) {
      this.state = state;
      this.editor = editor;
      this.position = INVALID;
    }

    Marker.prototype.start = function(m) {
      this.m = m;
      this.startRow = this.m.range.start.row;
      this.endRow = this.m.range.end.row;
      this.chunks = this.m.match;
      this.chunks.shift();
      this.currentRow = this.startRow;
      return this.position = TOP;
    };

    Marker.prototype.markOurs = function() {
      return this._markHunk(OurSide);
    };

    Marker.prototype.markSeparator = function() {
      var marker, sepRowEnd, sepRowStart;
      if (this.position !== MIDDLE) {
        throw new Error("Unexpected position for separator: " + this.position);
      }
      this.position = BOTTOM;
      sepRowStart = this.currentRow;
      sepRowEnd = this._advance(1);
      marker = this.editor.markBufferRange([[sepRowStart, 0], [sepRowEnd, 0]], this.options);
      return new Navigator(marker);
    };

    Marker.prototype.markTheirs = function() {
      return this._markHunk(TheirSide);
    };

    Marker.prototype._markHunk = function(sideKlass) {
      var bannerMarker, bannerRowEnd, bannerRowStart, lines, marker, ref, rowEnd, rowStart, sidePosition, text;
      sidePosition = this.position;
      switch (this.position) {
        case TOP:
          ref = this.chunks.shift();
          text = this.chunks.shift();
          lines = text.split(/\n/);
          bannerRowStart = this.currentRow;
          bannerRowEnd = rowStart = this._advance(1);
          rowEnd = this._advance(lines.length - 1);
          this.position = MIDDLE;
          break;
        case BOTTOM:
          text = this.chunks.shift();
          ref = this.chunks.shift();
          lines = text.split(/\n/);
          rowStart = this.currentRow;
          bannerRowStart = rowEnd = this._advance(lines.length - 1);
          bannerRowEnd = this._advance(1);
          this.position = INVALID;
          break;
        default:
          throw new Error("Unexpected position for side: " + this.position);
      }
      bannerMarker = this.editor.markBufferRange([[bannerRowStart, 0], [bannerRowEnd, 0]], this.options);
      marker = this.editor.markBufferRange([[rowStart, 0], [rowEnd, 0]], this.options);
      return new sideKlass(text, ref, marker, bannerMarker, sidePosition);
    };

    Marker.prototype._advance = function(rowCount) {
      return this.currentRow += rowCount;
    };

    return Marker;

  })();

  module.exports = Conflict = (function() {
    Emitter.includeInto(Conflict);

    function Conflict(ours, theirs, parent, navigator, state) {
      this.ours = ours;
      this.theirs = theirs;
      this.parent = parent;
      this.navigator = navigator;
      this.state = state;
      this.ours.conflict = this;
      this.theirs.conflict = this;
      this.navigator.conflict = this;
      this.resolution = null;
    }

    Conflict.prototype.isResolved = function() {
      return this.resolution != null;
    };

    Conflict.prototype.resolveAs = function(side) {
      this.resolution = side;
      return this.emit("conflict:resolved");
    };

    Conflict.prototype.scrollTarget = function() {
      return this.ours.marker.getTailBufferPosition();
    };

    Conflict.all = function(state, editor) {
      var marker, previous, results;
      results = [];
      previous = null;
      marker = new Marker(state, editor);
      editor.getBuffer().scan(CONFLICT_REGEX, function(m) {
        var c, nav, ours, theirs;
        marker.start(m);
        if (state.isRebase) {
          theirs = marker.markTheirs();
          nav = marker.markSeparator();
          ours = marker.markOurs();
        } else {
          ours = marker.markOurs();
          nav = marker.markSeparator();
          theirs = marker.markTheirs();
        }
        c = new Conflict(ours, theirs, null, nav, state);
        results.push(c);
        nav.linkToPrevious(previous);
        return previous = c;
      });
      return results;
    };

    return Conflict;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLHFIQUFBOztBQUFBLEVBQUMsSUFBSyxPQUFBLENBQVEsTUFBUixFQUFMLENBQUQsQ0FBQTs7QUFBQSxFQUNDLFVBQVcsT0FBQSxDQUFRLFVBQVIsRUFBWCxPQURELENBQUE7O0FBQUEsRUFHQSxPQUE2QixPQUFBLENBQVEsUUFBUixDQUE3QixFQUFDLFlBQUEsSUFBRCxFQUFPLGVBQUEsT0FBUCxFQUFnQixpQkFBQSxTQUhoQixDQUFBOztBQUFBLEVBSUEsU0FBQSxHQUFZLE9BQUEsQ0FBUSxhQUFSLENBSlosQ0FBQTs7QUFBQSxFQU1BLGNBQUEsR0FBaUIsNkRBTmpCLENBQUE7O0FBQUEsRUFRQSxPQUFBLEdBQVUsSUFSVixDQUFBOztBQUFBLEVBU0EsR0FBQSxHQUFNLEtBVE4sQ0FBQTs7QUFBQSxFQVVBLE1BQUEsR0FBUyxRQVZULENBQUE7O0FBQUEsRUFXQSxNQUFBLEdBQVMsUUFYVCxDQUFBOztBQUFBLEVBYU07QUFFSixRQUFBLE9BQUE7O0FBQUEsSUFBQSxPQUFBLEdBQ0U7QUFBQSxNQUFBLFVBQUEsRUFBWSxLQUFaO0FBQUEsTUFDQSxVQUFBLEVBQVksT0FEWjtLQURGLENBQUE7O0FBSWEsSUFBQSxnQkFBRSxLQUFGLEVBQVUsTUFBVixHQUFBO0FBQ1gsTUFEWSxJQUFDLENBQUEsUUFBQSxLQUNiLENBQUE7QUFBQSxNQURvQixJQUFDLENBQUEsU0FBQSxNQUNyQixDQUFBO0FBQUEsTUFBQSxJQUFDLENBQUEsUUFBRCxHQUFZLE9BQVosQ0FEVztJQUFBLENBSmI7O0FBQUEscUJBT0EsS0FBQSxHQUFPLFNBQUUsQ0FBRixHQUFBO0FBQ0wsTUFETSxJQUFDLENBQUEsSUFBQSxDQUNQLENBQUE7QUFBQSxNQUFBLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBQyxDQUFBLENBQUMs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
//# sourceURL=/Users/daniel/.atom/packages/merge-conflicts/lib/conflict.coffee