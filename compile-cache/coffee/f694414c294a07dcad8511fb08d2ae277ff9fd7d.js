(function() {
  var $, $$, EditorView, PaneView, Q, View, Workspace, WorkspaceView, path, temp, _ref;

  _ref = require('atom'), $ = _ref.$, $$ = _ref.$$, WorkspaceView = _ref.WorkspaceView, View = _ref.View;

  Q = require('q');

  path = require('path');

  temp = require('temp');

  EditorView = require('../src/editor-view');

  PaneView = require('../src/pane-view');

  Workspace = require('../src/workspace');

  describe("WorkspaceView", function() {
    var pathToOpen;
    pathToOpen = null;
    beforeEach(function() {
      atom.project.setPath(atom.project.resolve('dir'));
      pathToOpen = atom.project.resolve('a');
      atom.workspace = new Workspace;
      atom.workspaceView = new WorkspaceView(atom.workspace);
      atom.workspaceView.enableKeymap();
      atom.workspaceView.focus();
      return waitsForPromise(function() {
        return atom.workspace.open(pathToOpen);
      });
    });
    describe("@deserialize()", function() {
      var simulateReload, viewState;
      viewState = null;
      simulateReload = function() {
        var projectState, workspaceState;
        workspaceState = atom.workspace.serialize();
        projectState = atom.project.serialize();
        atom.workspaceView.remove();
        atom.project = atom.deserializers.deserialize(projectState);
        atom.workspace = Workspace.deserialize(workspaceState);
        atom.workspaceView = new WorkspaceView(atom.workspace);
        return atom.workspaceView.attachToDom();
      };
      describe("when the serialized WorkspaceView has an unsaved buffer", function() {
        return it("constructs the view with the same panes", function() {
          atom.workspaceView.attachToDom();
          waitsForPromise(function() {
            return atom.workspace.open();
          });
          return runs(function() {
            var buffer, editorView1;
            editorView1 = atom.workspaceView.getActiveView();
            buffer = editorView1.getEditor().getBuffer();
            editorView1.splitRight();
            expect(atom.workspaceView.getActivePaneView()).toBe(atom.workspaceView.getPaneViews()[1]);
            simulateReload();
            expect(atom.workspaceView.getEditorViews().length).toBe(2);
            expect(atom.workspaceView.getActivePaneView()).toBe(atom.workspaceView.getPaneViews()[1]);
            return expect(atom.workspaceView.title).toBe("untitled - " + (atom.project.getPath()));
          });
        });
      });
      describe("when there are open editors", function() {
        return it("constructs the view with the same panes", function() {
          var pane1, pane2, pane3, pane4;
          atom.workspaceView.attachToDom();
          pane1 = atom.workspaceView.getActivePaneView();
          pane2 = pane1.splitRight();
          pane3 = pane2.splitRight();
          pane4 = null;
          waitsForPromise(function() {
            return atom.workspace.open('b').then(function(editor) {
              return pane2.activateItem(editor);
            });
          });
          waitsForPromise(function() {
            return atom.workspace.open('../sample.js').then(function(editor) {
              return pane3.activateItem(editor);
            });
          });
          runs(function() {
            pane3.activeItem.setCursorScreenPosition([2, 4]);
            return pane4 = pane2.splitDown();
          });
          waitsForPromise(function() {
            return atom.workspace.open('../sample.txt').then(function(editor) {
              return pane4.activateItem(editor);
            });
          });
          return runs(function() {
            var editorView1, editorView2, editorView3, editorView4;
            pane4.activeItem.setCursorScreenPosition([0, 2]);
            pane2.focus();
            simulateReload();
            expect(atom.workspaceView.getEditorViews().length).toBe(4);
            editorView1 = atom.workspaceView.panes.find('.pane-row > .pane .editor:eq(0)').view();
            editorView3 = atom.workspaceView.panes.find('.pane-row > .pane .editor:eq(1)').view();
            editorView2 = atom.workspaceView.panes.find('.pane-row > .pane-column > .pane .editor:eq(0)').view();
            editorView4 = atom.workspaceView.panes.find('.pane-row > .pane-column > .pane .editor:eq(1)').view();
            expect(editorView1.getEditor().getPath()).toBe(atom.project.resolve('a'));
            expect(editorView2.getEditor().getPath()).toBe(atom.project.resolve('b'));
            expect(editorView3.getEditor().getPath()).toBe(atom.project.resolve('../sample.js'));
            expect(editorView3.getEditor().getCursorScreenPosition()).toEqual([2, 4]);
            expect(editorView4.getEditor().getPath()).toBe(atom.project.resolve('../sample.txt'));
            expect(editorView4.getEditor().getCursorScreenPosition()).toEqual([0, 2]);
            expect(editorView1.width()).toBeGreaterThan(0);
            expect(editorView2.width()).toBeGreaterThan(0);
            expect(editorView3.width()).toBeGreaterThan(0);
            expect(editorView4.width()).toBeGreaterThan(0);
            expect(editorView2).toHaveFocus();
            expect(editorView1).not.toHaveFocus();
            expect(editorView3).not.toHaveFocus();
            expect(editorView4).not.toHaveFocus();
            return expect(atom.workspaceView.title).toBe("" + (path.basename(editorView2.getEditor().getPath())) + " - " + (atom.project.getPath()));
          });
        });
      });
      return describe("where there are no open editors", function() {
        return it("constructs the view with no open editors", function() {
          atom.workspaceView.getActivePaneView().remove();
          expect(atom.workspaceView.getEditorViews().length).toBe(0);
          simulateReload();
          return expect(atom.workspaceView.getEditorViews().length).toBe(0);
        });
      });
    });
    describe("focus", function() {
      beforeEach(function() {
        return atom.workspaceView.attachToDom();
      });
      return it("hands off focus to the active pane", function() {
        var activePane;
        activePane = atom.workspaceView.getActivePaneView();
        $('body').focus();
        expect(activePane).not.toHaveFocus();
        atom.workspaceView.focus();
        return expect(activePane).toHaveFocus();
      });
    });
    describe("keymap wiring", function() {
      var commandHandler;
      commandHandler = null;
      beforeEach(function() {
        commandHandler = jasmine.createSpy('commandHandler');
        atom.workspaceView.on('foo-command', commandHandler);
        return atom.keymaps.add('name', {
          '*': {
            'x': 'foo-command'
          }
        });
      });
      return describe("when a keydown event is triggered in the WorkspaceView", function() {
        return it("triggers matching keybindings for that event", function() {
          var event;
          event = keydownEvent('x', {
            target: atom.workspaceView[0]
          });
          atom.workspaceView.trigger(event);
          return expect(commandHandler).toHaveBeenCalled();
        });
      });
    });
    describe("window title", function() {
      describe("when the project has no path", function() {
        return it("sets the title to 'untitled'", function() {
          atom.project.setPath(void 0);
          return expect(atom.workspaceView.title).toBe('untitled');
        });
      });
      describe("when the project has a path", function() {
        beforeEach(function() {
          return waitsForPromise(function() {
            return atom.workspace.open('b');
          });
        });
        describe("when there is an active pane item", function() {
          return it("sets the title to the pane item's title plus the project path", function() {
            var item;
            item = atom.workspace.getActivePaneItem();
            return expect(atom.workspaceView.title).toBe("" + (item.getTitle()) + " - " + (atom.project.getPath()));
          });
        });
        describe("when the title of the active pane item changes", function() {
          return it("updates the window title based on the item's new title", function() {
            var editor;
            editor = atom.workspace.getActivePaneItem();
            editor.buffer.setPath(path.join(temp.dir, 'hi'));
            return expect(atom.workspaceView.title).toBe("" + (editor.getTitle()) + " - " + (atom.project.getPath()));
          });
        });
        describe("when the active pane's item changes", function() {
          return it("updates the title to the new item's title plus the project path", function() {
            var item;
            atom.workspaceView.getActivePaneView().activateNextItem();
            item = atom.workspace.getActivePaneItem();
            return expect(atom.workspaceView.title).toBe("" + (item.getTitle()) + " - " + (atom.project.getPath()));
          });
        });
        describe("when the last pane item is removed", function() {
          return it("updates the title to contain the project's path", function() {
            atom.workspaceView.getActivePaneView().remove();
            expect(atom.workspace.getActivePaneItem()).toBeUndefined();
            return expect(atom.workspaceView.title).toBe(atom.project.getPath());
          });
        });
        return describe("when an inactive pane's item changes", function() {
          return it("does not update the title", function() {
            var initialTitle, pane;
            pane = atom.workspaceView.getActivePaneView();
            pane.splitRight();
            initialTitle = atom.workspaceView.title;
            pane.activateNextItem();
            return expect(atom.workspaceView.title).toBe(initialTitle);
          });
        });
      });
      return describe("when the root view is deserialized", function() {
        return it("updates the title to contain the project's path", function() {
          var item, workspaceView2;
          workspaceView2 = new WorkspaceView(atom.workspace.testSerialization());
          item = atom.workspace.getActivePaneItem();
          expect(workspaceView2.title).toBe("" + (item.getTitle()) + " - " + (atom.project.getPath()));
          return workspaceView2.remove();
        });
      });
    });
    describe("window:toggle-invisibles event", function() {
      return it("shows/hides invisibles in all open and future editors", function() {
        var eol, invisibles, leftEditorView, lowerLeftEditorView, lowerRightEditorView, rightEditorView, space, tab, withInvisiblesShowing;
        atom.workspaceView.height(200);
        atom.workspaceView.attachToDom();
        rightEditorView = atom.workspaceView.getActiveView();
        rightEditorView.getEditor().setText("\t  ");
        leftEditorView = rightEditorView.splitLeft();
        expect(rightEditorView.find(".line:first").text()).toBe("    ");
        expect(leftEditorView.find(".line:first").text()).toBe("    ");
        invisibles = rightEditorView.component.state.invisibles;
        space = invisibles.space, tab = invisibles.tab, eol = invisibles.eol;
        withInvisiblesShowing = "" + tab + " " + space + space + eol;
        atom.workspaceView.trigger("window:toggle-invisibles");
        expect(rightEditorView.find(".line:first").text()).toBe(withInvisiblesShowing);
        expect(leftEditorView.find(".line:first").text()).toBe(withInvisiblesShowing);
        lowerLeftEditorView = leftEditorView.splitDown();
        expect(lowerLeftEditorView.find(".line:first").text()).toBe(withInvisiblesShowing);
        atom.workspaceView.trigger("window:toggle-invisibles");
        expect(rightEditorView.find(".line:first").text()).toBe("    ");
        expect(leftEditorView.find(".line:first").text()).toBe("    ");
        lowerRightEditorView = rightEditorView.splitDown();
        return expect(lowerRightEditorView.find(".line:first").text()).toBe("    ");
      });
    });
    describe(".eachEditorView(callback)", function() {
      beforeEach(function() {
        return atom.workspaceView.attachToDom();
      });
      it("invokes the callback for existing editor", function() {
        var callback, callbackEditor, count;
        count = 0;
        callbackEditor = null;
        callback = function(editor) {
          callbackEditor = editor;
          return count++;
        };
        atom.workspaceView.eachEditorView(callback);
        expect(count).toBe(1);
        return expect(callbackEditor).toBe(atom.workspaceView.getActiveView());
      });
      it("invokes the callback for new editor", function() {
        var callback, callbackEditor, count;
        count = 0;
        callbackEditor = null;
        callback = function(editor) {
          callbackEditor = editor;
          return count++;
        };
        atom.workspaceView.eachEditorView(callback);
        count = 0;
        callbackEditor = null;
        atom.workspaceView.getActiveView().splitRight();
        expect(count).toBe(1);
        return expect(callbackEditor).toBe(atom.workspaceView.getActiveView());
      });
      it("does not invoke the callback for mini editors", function() {
        var editorViewCreatedHandler, miniEditor;
        editorViewCreatedHandler = jasmine.createSpy('editorViewCreatedHandler');
        atom.workspaceView.eachEditorView(editorViewCreatedHandler);
        editorViewCreatedHandler.reset();
        miniEditor = new EditorView({
          mini: true
        });
        atom.workspaceView.append(miniEditor);
        return expect(editorViewCreatedHandler).not.toHaveBeenCalled();
      });
      return it("returns a subscription that can be disabled", function() {
        var callback, count, subscription;
        count = 0;
        callback = function(editor) {
          return count++;
        };
        subscription = atom.workspaceView.eachEditorView(callback);
        expect(count).toBe(1);
        atom.workspaceView.getActiveView().splitRight();
        expect(count).toBe(2);
        subscription.off();
        atom.workspaceView.getActiveView().splitRight();
        return expect(count).toBe(2);
      });
    });
    describe("core:close", function() {
      return it("closes the active pane item until all that remains is a single empty pane", function() {
        var editorView, paneView1, paneView2;
        atom.config.set('core.destroyEmptyPanes', true);
        paneView1 = atom.workspaceView.getActivePaneView();
        editorView = atom.workspaceView.getActiveView();
        editorView.splitRight();
        paneView2 = atom.workspaceView.getActivePaneView();
        expect(paneView1).not.toBe(paneView2);
        expect(atom.workspaceView.getPaneViews()).toHaveLength(2);
        atom.workspaceView.trigger('core:close');
        expect(atom.workspaceView.getActivePaneView().getItems()).toHaveLength(1);
        expect(atom.workspaceView.getPaneViews()).toHaveLength(1);
        atom.workspaceView.trigger('core:close');
        expect(atom.workspaceView.getActivePaneView().getItems()).toHaveLength(0);
        return expect(atom.workspaceView.getPaneViews()).toHaveLength(1);
      });
    });
    return describe("the scrollbar visibility class", function() {
      return it("has a class based on the style of the scrollbar", function() {
        var scrollbarStyle;
        scrollbarStyle = require('scrollbar-style');
        scrollbarStyle.emitValue('legacy');
        expect(atom.workspaceView).toHaveClass('scrollbars-visible-always');
        scrollbarStyle.emitValue('overlay');
        return expect(atom.workspaceView).toHaveClass('scrollbars-visible-when-scrolling');
      });
    });
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/Applications/Atom.app/Contents/Resources/app/spec/workspace-view-spec.coffee