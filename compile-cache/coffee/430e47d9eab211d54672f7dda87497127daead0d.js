(function() {
  var $, BLANK_HASH, BlameLineComponent, HASH_LENGTH, RP, React, Reactionary, a, div, errorController, formatDate, getDefaultDate, moment, renderLoading, span, _defaultDate, _ref;

  _ref = require('atom'), $ = _ref.$, React = _ref.React, Reactionary = _ref.Reactionary;

  div = Reactionary.div, span = Reactionary.span, a = Reactionary.a;

  RP = React.PropTypes;

  moment = require('moment');

  formatDate = require('../util/blameFormatter').formatDate;

  errorController = require('../controllers/errorController');

  HASH_LENGTH = 7;

  BLANK_HASH = '-'.repeat(HASH_LENGTH);

  _defaultDate = null;

  getDefaultDate = function() {
    return _defaultDate != null ? _defaultDate : _defaultDate = formatDate(moment("2014-01-01T13:37:00 Z"));
  };

  renderLoading = function() {
    return div({
      className: 'blame-line loading'
    }, span({
      className: 'hash'
    }, BLANK_HASH), span({
      className: 'date'
    }, getDefaultDate()), span({
      className: 'committer'
    }, 'Loading'));
  };

  BlameLineComponent = React.createClass({
    propTypes: {
      date: RP.string.isRequired,
      hash: RP.string.isRequired,
      remoteRevision: RP.object,
      author: RP.string.isRequired,
      committer: RP.string.isRequired,
      committerDate: RP.string.isRequired,
      summary: RP.string.isRequired,
      backgroundClass: RP.string,
      noCommit: RP.bool
    },
    render: function() {
      var url;
      if (this.props.noCommit) {
        return div({
          className: 'blame-line no-commit text-subtle'
        }, span({
          className: 'hash'
        }, BLANK_HASH), span({
          className: 'date'
        }, this.props.date), span({
          className: 'committer'
        }, 'Nobody'));
      } else {
        return div({
          className: 'blame-line ' + this.props.backgroundClass
        }, !this.props.remoteRevision ? a({
          onClick: this.didClickHashWithoutUrl,
          className: 'hash'
        }, this.props.hash.substring(0, HASH_LENGTH)) : (url = this.props.remoteRevision.url(this.props.hash), a({
          className: 'hash',
          href: url
        }, this.props.hash.substring(0, HASH_LENGTH))), span({
          className: 'date'
        }, this.props.date), span({
          className: 'committer text-highlight'
        }, this.props.author.split(' ').slice(-1)[0]));
      }
    },
    componentDidMount: function() {
      var $el;
      $el = $(this.getDOMNode());
      if (this.props.summary) {
        return $el.setTooltip({
          title: this.props.summary,
          placement: "auto left"
        });
      }
    },
    componentWillUnmount: function() {
      return $(this.getDOMNode()).tooltip("destroy");
    },
    shouldComponentUpdate: function(_arg) {
      var hash;
      hash = _arg.hash;
      return hash !== this.props.hash;
    },
    didClickHashWithoutUrl: function(event, element) {
      return errorController.showError('error-no-custom-url-specified');
    }
  });

  module.exports = {
    BlameLineComponent: BlameLineComponent,
    renderLoading: renderLoading
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDRLQUFBOztBQUFBLEVBQUEsT0FBMEIsT0FBQSxDQUFRLE1BQVIsQ0FBMUIsRUFBQyxTQUFBLENBQUQsRUFBSSxhQUFBLEtBQUosRUFBVyxtQkFBQSxXQUFYLENBQUE7O0FBQUEsRUFDQyxrQkFBQSxHQUFELEVBQU0sbUJBQUEsSUFBTixFQUFZLGdCQUFBLENBRFosQ0FBQTs7QUFBQSxFQUVBLEVBQUEsR0FBSyxLQUFLLENBQUMsU0FGWCxDQUFBOztBQUFBLEVBR0EsTUFBQSxHQUFTLE9BQUEsQ0FBUSxRQUFSLENBSFQsQ0FBQTs7QUFBQSxFQUlDLGFBQWMsT0FBQSxDQUFRLHdCQUFSLEVBQWQsVUFKRCxDQUFBOztBQUFBLEVBS0EsZUFBQSxHQUFrQixPQUFBLENBQVEsZ0NBQVIsQ0FMbEIsQ0FBQTs7QUFBQSxFQU9BLFdBQUEsR0FBYyxDQVBkLENBQUE7O0FBQUEsRUFRQSxVQUFBLEdBQWEsR0FBRyxDQUFDLE1BQUosQ0FBVyxXQUFYLENBUmIsQ0FBQTs7QUFBQSxFQVVBLFlBQUEsR0FBZSxJQVZmLENBQUE7O0FBQUEsRUFXQSxjQUFBLEdBQWlCLFNBQUEsR0FBQTtrQ0FDZixlQUFBLGVBQWdCLFVBQUEsQ0FBVyxNQUFBLENBQU8sdUJBQVAsQ0FBWCxFQUREO0VBQUEsQ0FYakIsQ0FBQTs7QUFBQSxFQWVBLGFBQUEsR0FBZ0IsU0FBQSxHQUFBO1dBQ2QsR0FBQSxDQUFJO0FBQUEsTUFBQSxTQUFBLEVBQVcsb0JBQVg7S0FBSixFQUNFLElBQUEsQ0FBSztBQUFBLE1BQUEsU0FBQSxFQUFXLE1BQVg7S0FBTCxFQUF3QixVQUF4QixDQURGLEVBRUUsSUFBQSxDQUFLO0FBQUEsTUFBQSxTQUFBLEVBQVcsTUFBWDtLQUFMLEVBQXdCLGNBQUEsQ0FBQSxDQUF4QixDQUZGLEVBR0UsSUFB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
//# sourceURL=/Users/daniel/.atom/packages/git-blame/lib/views/blame-line-view.coffee