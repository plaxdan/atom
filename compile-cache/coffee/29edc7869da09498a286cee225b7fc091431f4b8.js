(function() {
  var AtomRunner, AtomRunnerView, ConfigObserver, fs, spawn, url;

  ConfigObserver = require('atom').ConfigObserver;

  spawn = require('child_process').spawn;

  fs = require('fs');

  url = require('url');

  AtomRunnerView = require('./atom-runner-view');

  AtomRunner = (function() {
    function AtomRunner() {}

    AtomRunner.prototype.cfg = {
      ext: 'runner.extensions',
      scope: 'runner.scopes'
    };

    AtomRunner.prototype.defaultExtensionMap = {
      'spec.coffee': 'jasmine-node --coffee'
    };

    AtomRunner.prototype.defaultScopeMap = {
      coffee: 'coffee',
      js: 'node',
      ruby: 'ruby',
      python: 'python',
      go: 'go run'
    };

    AtomRunner.prototype.extensionMap = null;

    AtomRunner.prototype.scopeMap = null;

    AtomRunner.prototype.destroy = function() {
      atom.config.unobserve(this.cfg.ext);
      return atom.config.unobserve(this.cfg.scope);
    };

    AtomRunner.prototype.activate = function() {
      this.runnerView = null;
      atom.config.setDefaults(this.cfg.ext, this.defaultExtensionMap);
      atom.config.setDefaults(this.cfg.scope, this.defaultScopeMap);
      atom.config.observe(this.cfg.ext, (function(_this) {
        return function() {
          return _this.extensionMap = atom.config.get(_this.cfg.ext);
        };
      })(this));
      atom.config.observe(this.cfg.scope, (function(_this) {
        return function() {
          return _this.scopeMap = atom.config.get(_this.cfg.scope);
        };
      })(this));
      atom.workspaceView.command('runner:run', (function(_this) {
        return function() {
          return _this.run();
        };
      })(this));
      return atom.workspaceView.command('runner:stop', (function(_this) {
        return function() {
          return _this.stop();
        };
      })(this));
    };

    AtomRunner.prototype.run = function() {
      var cmd, editor, panes, path, previousPane;
      editor = atom.workspace.getActiveEditor();
      if (editor == null) {
        return;
      }
      path = editor.getPath();
      cmd = this.commandFor(editor);
      if (cmd == null) {
        console.warn("No registered executable for file '" + path + "'");
        return;
      }
      previousPane = atom.workspaceView.getActivePaneView();
      if ((this.runnerView == null) || atom.workspaceView.find('.atom-runner').size() === 0) {
        this.runnerView = new AtomRunnerView(editor.getTitle());
        panes = atom.workspaceView.getPaneViews();
        this.pane = panes[panes.length - 1].splitRight(this.runnerView);
      }
      this.runnerView.setTitle(editor.getTitle());
      if (this.pane && this.pane.isOnDom()) {
        this.pane.activateItem(this.runnerView);
      }
      return this.execute(cmd, editor);
    };

    AtomRunner.prototype.stop = function() {
      if (this.child) {
        this.child.kill();
        this.child = null;
        if (this.runnerView) {
          return this.runnerView.append('^C', 'stdin');
        }
      }
    };

    AtomRunner.prototype.runnerView = null;

    AtomRunner.prototype.pane = null;

    AtomRunner.prototype.execute = function(cmd, editor) {
      var args, splitCmd, startTime;
      this.stop();
      this.runnerView.clear();
      args = [];
      if (editor.getPath()) {
        editor.save();
        args.push(editor.getPath());
      }
      splitCmd = cmd.split(/\s+/);
      if (splitCmd.length > 1) {
        cmd = splitCmd[0];
        args = splitCmd.slice(1).concat(args);
      }
      this.child = spawn(cmd, args, {
        cwd: atom.project.path
      });
      this.child.stderr.on('data', (function(_this) {
        return function(data) {
          _this.runnerView.append(data, 'stderr');
          return _this.runnerView.scrollToBottom();
        };
      })(this));
      this.child.stdout.on('data', (function(_this) {
        return function(data) {
          _this.runnerView.append(data, 'stdout');
          return _this.runnerView.scrollToBottom();
        };
      })(this));
      this.child.on('close', (function(_this) {
        return function(code, signal) {
          _this.runnerView.footer('Exited with code=' + code + ' in ' + ((new Date - startTime) / 1000) + ' seconds');
          return _this.child = null;
        };
      })(this));
      startTime = new Date;
      if (editor.getPath() == null) {
        this.child.stdin.write(editor.getText());
      }
      this.child.stdin.end();
      return this.runnerView.footer('Running: ' + cmd + ' ' + editor.getPath());
    };

    AtomRunner.prototype.commandFor = function(editor) {
      var ext, name, scope, _i, _j, _len, _len1, _ref, _ref1;
      if (editor.getPath() != null) {
        _ref = Object.keys(this.extensionMap).sort(function(a, b) {
          return b.length - a.length;
        });
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ext = _ref[_i];
          if (editor.getPath().match('\\.' + ext + '$')) {
            return this.extensionMap[ext];
          }
        }
      }
      scope = editor.getCursorScopes()[0];
      _ref1 = Object.keys(this.scopeMap);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        name = _ref1[_j];
        if (scope.match('^source\\.' + name + '\\b')) {
          return this.scopeMap[name];
        }
      }
    };

    return AtomRunner;

  })();

  module.exports = new AtomRunner;

}).call(this);

//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAiZmlsZSI6ICIiLAogICJzb3VyY2VSb290IjogIiIsCiAgInNvdXJjZXMiOiBbCiAgICAiIgogIF0sCiAgIm5hbWVzIjogW10sCiAgIm1hcHBpbmdzIjogIkFBQUE7QUFBQSxNQUFBLDBEQUFBOztBQUFBLEVBQUMsaUJBQWtCLE9BQUEsQ0FBUSxNQUFSLEVBQWxCLGNBQUQsQ0FBQTs7QUFBQSxFQUVBLEtBQUEsR0FBUSxPQUFBLENBQVEsZUFBUixDQUF3QixDQUFDLEtBRmpDLENBQUE7O0FBQUEsRUFHQSxFQUFBLEdBQUssT0FBQSxDQUFRLElBQVIsQ0FITCxDQUFBOztBQUFBLEVBSUEsR0FBQSxHQUFNLE9BQUEsQ0FBUSxLQUFSLENBSk4sQ0FBQTs7QUFBQSxFQU1BLGNBQUEsR0FBaUIsT0FBQSxDQUFRLG9CQUFSLENBTmpCLENBQUE7O0FBQUEsRUFRTTs0QkFDSjs7QUFBQSx5QkFBQSxHQUFBLEdBQ0U7QUFBQSxNQUFBLEdBQUEsRUFBSyxtQkFBTDtBQUFBLE1BQ0EsS0FBQSxFQUFPLGVBRFA7S0FERixDQUFBOztBQUFBLHlCQUlBLG1CQUFBLEdBQ0U7QUFBQSxNQUFBLGFBQUEsRUFBZSx1QkFBZjtLQUxGLENBQUE7O0FBQUEseUJBT0EsZUFBQSxHQUNFO0FBQUEsTUFBQSxNQUFBLEVBQVEsUUFBUjtBQUFBLE1BQ0EsRUFBQSxFQUFJLE1BREo7QUFBQSxNQUVBLElBQUEsRUFBTSxNQUZOO0FBQUEsTUFHQSxNQUFBLEVBQVEsUUFIUjtBQUFBLE1BSUEsRUFBQSxFQUFJLFFBSko7S0FSRixDQUFBOztBQUFBLHlCQWNBLFlBQUEsR0FBYyxJQWRkLENBQUE7O0FBQUEseUJBZUEsUUFBQSxHQUFVLElBZlYsQ0FBQTs7QUFBQSx5QkFpQkEsT0FBQSxHQUFTLFNBQUEsR0FBQTtBQUNQLE1BQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFaLENBQXNCLElBQUMsQ0FBQSxHQUFHLENBQUMsR0FBM0IsQ0FBQSxDQUFBO2FBQ0EsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFaLENB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
//# sourceURL=/Users/daniel/.atom/packages/atom-runner/lib/atom-runner.coffee