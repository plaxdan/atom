<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>JavaScript Learning Page</title>
        <meta content="inline; learning-javascript.xhtml" name="content-disposition"/>
        <meta content="application/xhtml+xml;charset=UTF-8" http-equiv="Content-Type"/>
        <meta content="blendTrans(Duration=0)" http-equiv="Page-Enter"/>
        <meta content="blendTrans(Duration=0)" http-equiv="Page-Exit"/>
        <meta content="text/css" http-equiv="content-style-type"/>
        <meta content="application/javascript" http-equiv="content-script-type"/>
        <style type="text/css">
            body {
                font-family: "Helvetica Neue", Arial, Helvetica, sans-serif;
                font-size: 10px;
            }
            #execp {
                float: right;
                margin: -1.25em 0em 0em;
            }
            #introduction,
            #caOpen,
            #execute,
            #jspretty {
                display: inline-block;
                font-weight: bold;
                margin-right: 4em;
                width: 15em;
            }
            #caOpen {
                color: #00a;
            }
            #jspretty {
                color: #0a0;
            }
            #execute {
                color: #a00;
                margin: 0em;
            }
            #input {
                background: #eee;
            }
            #output {
                background: #ccc;
            }
            h1 {
                font-size: 1.8em;
            }
            p {
                clear: both;
                float: none;
            }
            label {
                display: block;
                font-size: 1.4em;
            }
            textarea {
                font-family: "Courier New", monospace;
                font-size: 1.3em;
                overflow: scroll;
                width: 100%;
            }
            #ca {
                background: #eee;
                border: 0.2em solid #333;
                box-shadow: 0.4em 0.4em 1em #333;
                left: 2em;
                position: absolute;
                top: -300em;
                z-index: 10;
            }
            #ca h2 {
                background: #ddd;
                border-bottom: 0.1em solid #333;
                border-right: 0.1em solid #333;
                font-size: 1.75em;
                left: 0em;
                margin: 0em;
                padding: 0.25em;
                position: absolute;
                top: 0em;
                z-index: 2;
            }
            #close {
                background: #daa;
                border: 0.1em solid #300;
                box-shadow: 0.05em 0.05em 0.2em #200;
                color: #300;
                cursor: pointer;
                font-size: 1.5em;
                font-weight: bold;
                height: 1.5em;
                margin: 0em;
                padding: 0em;
                position: absolute;
                right: 2em;
                top: 0.25em;
                width: 1.5em;
                z-index: 2;
            }
            #codeAnalysis {
                font-family: monospace;
                font-size: 1.5em;
                height: 100%;
                margin: 0em;
                overflow: scroll;
                padding: 2.2em 0.2em 0.2em;
                width: 100%;
            }
            .intro {
                font-family: "Helvetica Neue", Arial, Helvetica, sans-serif;
            }
            .intro em {
                color: #600;
                font-weight: bold;
            }
            .beautify {
                border: #999 solid 0.1em;
                display: inline-block;
                font-family: 'Courier New', Courier, 'Lucida Console', monospace;
                font-size: 0.8em;
                margin: 0em 1em 1em 0em;
                position: relative;
            }
            .beautify ol {
                border: #999 none 0.1em;
                display: table-cell;
                margin: 0em;
                padding: 0em;
            }
            .beautify li {
                border-style: none none solid;
                border-width: 0em 0em 0.1em;
                display: block;
                line-height: 1.2;
                list-style-type: none;
                margin: 0em;
                padding-bottom: 0em;
                padding-right: 0.5em;
            }
            .beautify .count li.fold {
                color: #f00;
                cursor: pointer;
                font-weight: bold;
            }
            .beautify .count {
                border-style: solid;
                border-width: 0em 0.1em 0em 0em;
                font-family: verdana, arial, 'Bitstream Vera Sans', helvetica, sans-serif;
                font-weight: normal;
                padding: 0em;
                text-align: right;
            }
            .beautify .count li {
                background: #eed;
                border: #bbc solid 0.1em;
                color: #660;
                font-family: monospace;
                padding: 0.5em 0em 0em 2em;
            }
            .beautify .data {
                text-align: left;
                white-space: pre;
            }
            .beautify .data li {
                background-color: #fff;
                border: #eee solid 0.1em;
                letter-spacing: 0.1em;
                padding-left: 0.5em;
                white-space: pre;
            }
            .beautify .data em {
                padding-top: 0.5em;
            }
            .beautify li em {
                display: inline-block;
                font-style: normal;
                font-weight: bold;
                padding-top: 0.5em;
            }
            .beautify em.s0 {
                color: #000;
            }
            .beautify em.s1 {
                color: #f66;
            }
            .beautify em.s2 {
                color: #12f;
            }
            .beautify em.s3 {
                color: #090;
            }
            .beautify em.s4 {
                color: #d6d;
            }
            .beautify em.s5 {
                color: #7cc;
            }
            .beautify em.s6 {
                color: #c85;
            }
            .beautify em.s7 {
                color: #737;
            }
            .beautify em.s8 {
                color: #6d0;
            }
            .beautify em.s9 {
                color: #dd0;
            }
            .beautify em.s10 {
                color: #893;
            }
            .beautify em.s11 {
                color: #b97;
            }
            .beautify em.s12 {
                color: #990;
            }
            .beautify em.s13 {
                color: #987;
            }
            .beautify em.s14 {
                color: #f80;
            }
            .beautify em.s15 {
                color: #fdd;
            }
            .beautify em.s16 {
                color: #0c0;
            }
            .beautify .data .l0 {
                background: #fff;
            }
            .beautify .data .l1 {
                background: #fed;
            }
            .beautify .data .l2 {
                background: #def;
            }
            .beautify .data .l3 {
                background: #efe;
            }
            .beautify .data .l4 {
                background: #fef;
            }
            .beautify .data .l5 {
                background: #eef;
            }
            .beautify .data .l6 {
                background: #fec;
            }
            .beautify .data .l7 {
                background: #ede;
            }
            .beautify .data .l8 {
                background: #efc;
            }
            .beautify .data .l9 {
                background: #ffd;
            }
            .beautify .data .l10 {
                background: #edc;
            }
            .beautify .data .l11 {
                background: #fdb;
            }
            .beautify .data .l12 {
                background: #eeb;
            }
            .beautify .data .l13 {
                background: #432;
            }
            .beautify .data .l14 {
                background: #640;
            }
            .beautify .data .l15 {
                background: #562;
            }
            .beautify .data .l16 {
                background: #eea;
            }
            .beautify .data .c0 {
                background: #ddd;
            }
            .beautify .data li {
                color: #777;
            }
        </style>
    </head>
    <body>
        <h1>JavaScript Learning Page</h1>
        <div>
            <p id="execp"><button id="introduction">Introduction to
                JavaScript</button>
                <button id="caOpen">Inheritance Analysis</button>
                <button id="jspretty">Beautify Input</button>
                <button id="execute">Execute</button></p>
            <p><label for="input">Code Input</label>
                <textarea cols="10" id="input" rows="10"></textarea>
            </p>
            <p><label for="output">Code Output</label>
                <textarea cols="10" id="output" readonly="readonly" rows="10"></textarea>
            </p>
        </div>
        <div id="ca">
            <h2 id="caTitle">Scope Analysis</h2>
            <button id="close">X</button>
            <div id="codeAnalysis"></div>
        </div>
        <script type="text/javascript">
            <![CDATA[
            /*prettydiff.com api.topcoms:true,api.insize:4,api.inchar:" " */
            /*
             This code may be used internally to Travelocity without limitation,
             exclusion, or restriction.  If this code is used externally the
             following comment must be included everywhere this code is used.

             Special thanks to Harry Whitfield for assistance in providing test
             cases.
             */
            /***********************************************************************
             jspretty is written by Austin Cheney on 2 Nov 2012.  Anybody may use
             this code without permission so long as this comment exists verbatim in
             each instance of its use.

             http://www.travelocity.com/
             http://mailmarkup.org/
             http://prettydiff.com/
             **********************************************************************/
            /*
             This application beautifies JavaScript code. This application was
             written with extension in mind using the same array based architecture
             used for the markup_beauty application.  The architecture focuses on
             separation of roles.  The first area of the application reads the code
             and writes an array of tokens.  The second area is the algorithm that
             determines what white space and indentation should be applied.  The
             third area applies the white space.  The final area is a report on the
             analysis of the code.

             Arguments:

             * source - The code to process as a string.
             * insize - The size of a single indentation.  The type is number and
             the default is 4.
             * inchar - The string character(s) to make up an indentation.  The
             default is a single space.
             * preserve - Determines whether empty lines should be kept in the code
             for organizational reasons.  The type is boolean and the default
             value is true.
             * inlevel - Sets the starting point for indentation.  The type is
             number and the default value is 0.
             * space - Type is boolean.  If true a space will be applied between
             the function keyword and the first opening parenthesis.  The default
             is true.
             * braces - This accepts the string values "knr" or "allman".  The
             default is "knr".  The value "allman" will push curly braces that do
             not immediately follow an operator onto a newline.
             * comments - Determines whether comments should be indented with the
             rest of the code or flush to the left side.  Accepted values are
             "indent" (the default) and "noindent".
             -----------------------------------------------------------------------
             */
            var summary                 = "",
                jspretty                = function jspretty(args) {
                    "use strict";
                    var source    = (typeof args.source === "string" && args.source.length > 0) ? args.source + " " : "Error: no source code supplied to jspretty!",
                        jsize     = (args.insize > 0) ? args.insize : ((Number(args.insize) > 0) ? Number(args.insize) : 4),
                        jchar     = (typeof args.inchar === "string" && args.inchar.length > 0) ? args.inchar : " ",
                        jpres     = (args.preserve === false) ? false : true,
                        jlevel    = (args.inlevel > -1) ? args.inlevel : ((Number(args.inlevel) > -1) ? Number(args.inlevel) : 0),
                        jspace    = (args.space === false) ? false : true,
                        jbrace    = (args.braces === "allman") ? true : false,
                        jcomment  = (args.comments === "noindent") ? "noindent" : (args.comments === "nocomment") ? "nocomment" : "indent",
                        jsscope   = (args.jsscope === true) ? true : false,
                        jscorrect = (args.correct === true) ? true : false,
                        jvarspace = (args.varspace === false || args.varspace === "false") ? false : true,
                        token     = [],
                        types     = [],
                        level     = [],
                        lines     = [],
                        globals   = [],
                        meta      = [],
                        varlist   = [],
                        news      = 0,
                        stats     = {
                            comma       : 0,
                            commentBlock: {
                                token: 0,
                                chars: 0
                            },
                            commentLine : {
                                token: 0,
                                chars: 0
                            },
                            container   : 0,
                            number      : {
                                token: 0,
                                chars: 0
                            },
                            operator    : {
                                token: 0,
                                chars: 0
                            },
                            regex       : {
                                token: 0,
                                chars: 0
                            },
                            semicolon   : 0,
                            server      : {
                                token: 0,
                                chars: 0
                            },
                            space       : {
                                newline: 0,
                                other  : 0,
                                space  : 0,
                                tab    : 0
                            },
                            string      : {
                                token: 0,
                                chars: 0,
                                quote: 0
                            },
                            word        : {
                                token: 0,
                                chars: 0
                            }
                        },
                        semi      = 0,
                        result    = "";
                    if (source === "Error: no source code supplied to jspretty!") {
                        return source;
                    }
                    (function jspretty__tokenize() {
                        var a            = 0,
                            b            = source.length,
                            c            = source.split(""),
                            lasttwo      = [],
                            ltoke        = "",
                            ltype        = "",
                            lengtha      = 0,
                            lengthb      = 0,
                            block        = {
                                count : 0,
                                start : -1,
                                dotest: false,
                                flag  : false,
                                bcount: [],
                                brace : [],
                                method: [],
                                pcount: [],
                                prev  : [],
                                prior : [],
                                simple: [],
                                word  : [],
                                cs    : (jscorrect === true) ? "{" : "x{",
                                ce    : (jscorrect === true) ? "}" : "x}"
                            },
                            blockpop     = function jspretty__tokenize_blockpop() {
                                block.bcount.pop();
                                block.brace.pop();
                                block.method.pop();
                                block.pcount.pop();
                                block.prior.pop();
                                block.simple.pop();
                            },
                            commentcheck = function jspretty__tokenize_commentcheck() {
                                var aa = 0,
                                    bb = 0,
                                    cc = token.length - 1;
                                if ((token[cc] !== "}" && token[cc] !== "x}") || block.prior[block.prior.length - 1] === true) {
                                    return;
                                }
                                for (aa = cc - 1; aa > -1; aa -= 1) {
                                    if (types[aa] === "end") {
                                        bb += 1;
                                    }
                                    if (types[aa] === "start" || types[aa] === "method") {
                                        bb -= 1;
                                    }
                                    if (bb === -1) {
                                        break;
                                    }
                                }
                                if ((token[aa] === "{" || token[aa] === "x{") && (types[aa - 1] === "comment" || types[aa - 1] === "comment-inline")) {
                                    token.pop();
                                    types.pop();
                                    token.splice(aa, 1);
                                    types.splice(aa, 1);
                                }
                            },
                            elsestart    = function jspretty__tokenize_elsestart() {
                                var bb   = 0,
                                    r    = 0,
                                    x    = block.word.length - 1,
                                    y    = token.length - 1,
                                    z    = 0,
                                    test = (function jspretty__tokenize_elsestart_test() {
                                        var g     = a + 1,
                                            space = /\s/;
                                        for (g; g < b; g += 1) {
                                            if (c[g] === "{") {
                                                return true;
                                            }
                                            if (space.test(c[g]) === false) {
                                                return false;
                                            }
                                        }
                                    }());
                                if (test === true) {
                                    return;
                                }
                                block.bcount.push(0);
                                block.brace.push("else");
                                block.method.push(0);
                                block.pcount.push(0);
                                block.prior.push(false);
                                block.simple.push(true);
                                block.flag  = false;
                                block.count = 0;
                                types.pop();
                                token.pop();
                                for (y; y > -1; y -= 1) {
                                    if (token[y] === "}" || token[y] === "x}") {
                                        r += 1;
                                    }
                                    if (token[y] === "{" || token[y] === "x{") {
                                        r -= 1;
                                    }
                                    if (token[y] === "if") {
                                        bb += 1;
                                    }
                                    if (token[y] === "else" && token[y + 1] !== "if") {
                                        bb -= 1;
                                    }
                                    if (r < 0) {
                                        break;
                                    }
                                }
                                for (x; x > -1; x -= 1) {
                                    if (block.word[x] !== "if" && block.word[x] !== "else") {
                                        bb -= 1;
                                    }
                                    if (block.word[x] === "if") {
                                        if (block.prev[x] === true) {
                                            bb -= 1;
                                        }
                                        break;
                                    }
                                }
                                if (block.prev[block.prev.length - 1] === true || (token[token.length - 2] !== "}" && token[token.length - 2] !== "x}" && block.prev[block.prev.length - 1] === false)) {
                                    token.push("else");
                                    types.push("word");
                                    return;
                                }
                                r = a - 4;
                                if ((/\s/).test(c[r]) === true) {
                                    do {
                                        r -= 1;
                                    } while ((/\s/).test(c[r]) === true);
                                }
                                if (c[r] === "}" || c[r] === "x}") {
                                    token.push("else");
                                    types.push("word");
                                    return;
                                }
                                for (bb -= 1; bb > -1; bb -= 1) {
                                    z -= 1;
                                    if ((token[token.length - 2] !== "}" && token[token.length - 2] !== "x}") || block.prev[z] === true) {
                                        break;
                                    }
                                    token.pop();
                                    types.pop();
                                    if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                        lines[lines.length - 1][0] -= 1;
                                    }
                                    block.bcount.push(0);
                                    block.brace.push("else");
                                    block.method.push(0);
                                    block.pcount.push(0);
                                    block.prior.push(false);
                                    block.simple.push(true);
                                }
                                token.push("else");
                                types.push("word");
                            },
                            methodtest   = function jspretty__tokenize_methodtest() {
                                var cc = 0,
                                    dd = 0;
                                for (cc = token.length - 2; cc > -1; cc -= 1) {
                                    if (types[cc] === "end") {
                                        dd += 1;
                                    }
                                    if (types[cc] === "start" || types[cc] === "method") {
                                        dd -= 1;
                                    }
                                    if (dd === -1) {
                                        if (types[cc] === "method") {
                                            block.method[block.method.length - 1] += 1;
                                        }
                                        return;
                                    }
                                }
                            },
                            objtest      = function jspretty__tokenize_objtest() {
                                var cc = 0,
                                    dd = 0;
                                for (cc = token.length - 2; cc > -1; cc -= 1) {
                                    if (types[cc] === "end") {
                                        dd += 1;
                                    }
                                    if (types[cc] === "start" || types[cc] === "method") {
                                        dd -= 1;
                                    }
                                    if (dd === -1) {
                                        if (token[cc - 1] !== "=" && token[cc - 1] !== "==" && token[cc - 1] !== "===" && (token[cc] === "{" || token[cc] === "x{") && block.method.length > 0 && ((types[cc - 1] === "operator" && token[cc - 1] !== ":") || token[cc - 1] === "{" || token[cc - 1] === "x{" || token[cc - 1] === "[")) {
                                            block.method[block.method.length - 1] -= 1;
                                        }
                                        return;
                                    }
                                }
                            },
                            whiletest    = function jspretty__tokenize_whiletest() {
                                var cc = 0,
                                    dd = 1;
                                for (cc = token.length - 3; cc > -1; cc -= 1) {
                                    if (token[cc] === "}" || token[cc] === "x}") {
                                        dd += 1;
                                    }
                                    if (token[cc] === "{" || token[cc] === "x{") {
                                        dd -= 1;
                                    }
                                    if (dd > 0 && token[cc] === "do") {
                                        block.dotest = true;
                                        token.pop();
                                        types.pop();
                                        do {
                                            dd -= 1;
                                            block.brace.push(-1);
                                            block.simple.push(false);
                                            block.method.push(0);
                                            token.pop();
                                            types.pop();
                                        } while (dd > 0);
                                        if (block.start === -1) {
                                            block.start = 0;
                                        }
                                        block.flag  = false;
                                        block.count = 0;
                                        token.push("while");
                                        return types.push("word");
                                    }
                                    if (dd === 0) {
                                        if (token[cc - 1] === "do") {
                                            block.dotest = true;
                                        }
                                        return;
                                    }
                                }
                            },
                            plusplus     = function jspretty__tokenize_plusplus(x, y) {
                                var store = [],
                                    op    = "",
                                    cc    = 0,
                                    dd    = 0;
                                if (y === "post" && c[a] === ")" && token[lengtha - 3] === ",") {
                                    for (cc = lengtha - 1; cc > -1; cc -= 1) {
                                        if (types[cc] === "end") {
                                            dd += 1;
                                        }
                                        if (types[cc] === "start" || types[cc] === "method") {
                                            dd -= 1;
                                        }
                                        if (dd < 0) {
                                            if (types[cc] === "method" || token[cc - 1] === "function") {
                                                return;
                                            }
                                            break;
                                        }
                                    }
                                }
                                if (token[x] === "++") {
                                    op = "+=";
                                } else {
                                    op = "-=";
                                }
                                if (y === "pre") {
                                    store.push(token[x + 1]);
                                    store.push(types[x + 1]);
                                    token.pop();
                                    types.pop();
                                    token.pop();
                                    types.pop();
                                    token.push(store[0]);
                                    types.push(store[1]);
                                    token.push(op);
                                    types.push("operator");
                                    token.push("1");
                                    types.push("literal");
                                } else {
                                    token.pop();
                                    types.pop();
                                    token.push(op);
                                    types.push("operator");
                                    token.push("1");
                                    types.push("literal");
                                }
                                if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                    lines[lines.length - 1][0] += 1;
                                }
                            },
                            asi          = function jspretty__tokenize_asi(z) {
                                var length    = token.length - 1,
                                    last      = token[length],
                                    nextCharA = c[z],
                                    nextCharB = c[z + 1],
                                    asiTest   = false,
                                    syntax    = (/[\(\)\[\]\{\}\=&<>\+\-\*\/\!\?\|\^:%(0-9)\\]/),
                                    jj        = 0,
                                    kk        = 0,
                                    ll        = 0,
                                    store     = [],
                                    space     = (/\s/),
                                    colon     = false,
                                    elsetest  = false;
                                if (space.test(c[z]) === true) {
                                    do {
                                        z += 1;
                                    } while (z < b && space.test(c[z]) === true);
                                    if (c[z] === ":") {
                                        return;
                                    }
                                    nextCharA = c[z];
                                    nextCharB = c[z + 1];
                                }
                                if (last === "else" || nextCharA === "]") {
                                    return;
                                }
                                if (last === "return" || last === "break" || last === "continue" || last === "throw") {
                                    jj = length - 1;
                                    if (types[jj] === "comment" || types[jj] === "comment-inline") {
                                        do {
                                            jj -= 1;
                                        } while (types[jj] === "comment" || types[jj] === "comment-inline");
                                    }
                                    if (token[jj] !== ":") {
                                        asiTest = true;
                                    }
                                }
                                if (asiTest === false && last === ")") {
                                    for (jj = length - 1; jj > -1; jj -= 1) {
                                        if (types[jj] === "end") {
                                            kk += 1;
                                        }
                                        if (types[jj] === "start" || types[jj] === "method") {
                                            kk -= 1;
                                        }
                                        if (kk === -1) {
                                            if (token[jj] === "(" && (token[jj - 1] === "function" || token[jj - 2] === "function" || token[jj - 1] === "if" || token[jj - 1] === "for" || token[jj - 1] === "while" || token[jj - 1] === "catch" || token[jj - 1] === "switch")) {
                                                return;
                                            }
                                            break;
                                        }
                                    }
                                }
                                if (asiTest === false && (last === "}" || last === "x}")) {
                                    for (jj = a; jj < b; jj += 1) {
                                        if (space.test(c[jj]) === false) {
                                            break;
                                        }
                                    }
                                    if (c[jj] === "e" && c[jj + 1] === "l" && c[jj + 2] === "s" && c[jj + 3] === "e") {
                                        return;
                                    }
                                }
                                if (asiTest === false && (nextCharB + c[z + 2] === "++" || nextCharB + c[z + 2] === "--")) {
                                    if (space.test(c[z]) === true) {
                                        for (jj = z; jj > -1; jj -= 1) {
                                            if (c[jj] === "\n" || c[jj] === "\r" || space.test(c[jj]) === false) {
                                                break;
                                            }
                                        }
                                        if (c[jj] === "\n" || c[jj] === "\r") {
                                            for (jj = z + 3; jj < b; jj += 1) {
                                                if (space.test(c[jj]) === false) {
                                                    if (syntax.test(c[jj]) === true) {
                                                        c.splice(jj, 0, ";");
                                                        b    += 1;
                                                        semi += 1;
                                                        return;
                                                    }
                                                    asiTest   = true;
                                                    nextCharB = "";
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                                if (asiTest === false && (last === ";" || last === "x;" || last === "," || last === ":" || last === "{" || last === "x{" || last === "[" || nextCharB === "]" || (nextCharA !== "}" && (nextCharB === ";" || nextCharB === "," || nextCharB === "." || nextCharB === "(")) || nextCharB === "+" || nextCharB === "*" || nextCharB === "-" || nextCharB === "%" || nextCharB === "!" || nextCharB === "=" || nextCharB === "^" || nextCharB === "?" || ltype === "operator" || ltype === "comment" || ltype === "comment-inline" || (nextCharB === "/" && c[z + 2] !== "/" && c[z + 2] !== "*"))) {
                                    return;
                                }
                                if (asiTest === false && (last === ")" || last === "]" || token[length - 1] === "break" || token[length - 1] === "return" || token[length - 1] === "continue" || token[length - 1] === "throw" || (nextCharA === "}" && (token[length - 1] === "{" || token[length - 1] === "x{")))) {
                                    kk = 0;
                                    for (jj = length; jj > -1; jj -= 1) {
                                        if (types[jj] === "end") {
                                            kk += 1;
                                        }
                                        if (types[jj] === "start" || types[jj] === "method") {
                                            kk -= 1;
                                        }
                                        if (kk < 0 && jj < length - 1) {
                                            if (((token[length - 1] === "{" || token[length - 1] === "x{") && (token[jj - 1] === "if" || token[jj - 1] === "for" || token[jj - 1] === "while")) || ((token[jj] === "{" || token[jj] === "x{") && jj < length - 1 && colon === false)) {
                                                kk      = 0;
                                                asiTest = true;
                                                break;
                                            }
                                            return;
                                        }
                                        if (kk === 0) {
                                            if (token[jj] === ":") {
                                                colon = true;
                                            }
                                            if (token[jj] === "=" || token[jj] === "return" || token[jj] === ";") {
                                                break;
                                            }
                                            if (c[a] === ")" && token[jj] === "(" && (token[jj - 1] === "function" || (types[jj - 1] === "word" && token[jj - 2] === "function"))) {
                                                return;
                                            }
                                        }
                                    }
                                    kk      = 0;
                                    asiTest = true;
                                }
                                if (asiTest === false && nextCharA !== "}" && nextCharB + c[z + 2] + c[z + 3] + c[z + 4] === "else") {
                                    asiTest  = true;
                                    elsetest = true;
                                }
                                if (asiTest === false) {
                                    for (jj = length; jj > -1; jj -= 1) {
                                        if (types[jj] === "end") {
                                            kk    += 1;
                                            colon = false;
                                        }
                                        if (types[jj] === "start" || types[jj] === "method") {
                                            kk -= 1;
                                        }
                                        if (kk < 0) {
                                            if (((token[jj] === "{" || token[jj] === "x{") && token[jj - 1] === ")") || ((token[length - 1] === "{" || token[length - 1] === "x{") && nextCharA === "}") || token[jj + 1] === "return" || token[jj + 1] === "break" || token[jj + 1] === "continue" || token[jj + 1] === "throw") {
                                                asiTest = true;
                                                break;
                                            }
                                            return;
                                        }
                                        if (kk === 0) {
                                            if (nextCharA === "}" || (nextCharA !== "}" && nextCharB === "}")) {
                                                if (token[jj] === ":") {
                                                    colon = true;
                                                }
                                                if (token[jj] === "," && colon === true) {
                                                    return;
                                                }
                                            }
                                            if (token[jj] === "return" || token[jj] === "=" || (token[jj] === "else" && token[jj + 1] !== "{" && token[jj + 1] !== "x{" && token[jj + 1] !== "if")) {
                                                asiTest = true;
                                                break;
                                            }
                                            if (token[jj - 1] === "while") {
                                                for (ll = jj - 2; ll > -1; ll -= 1) {
                                                    if (token[jj - 2] !== "}" && token[jj - 2] !== "x}" && token[ll] === ";" && ll < jj - 2 && kk === 0) {
                                                        return;
                                                    }
                                                    if (types[ll] === "end") {
                                                        kk += 1;
                                                    }
                                                    if (types[ll] === "start" || types[ll] === "method") {
                                                        kk -= 1;
                                                    }
                                                    if (kk < 0) {
                                                        return;
                                                    }
                                                    if (kk === 0 && token[ll] === "do") {
                                                        break;
                                                    }
                                                }
                                                if (ll === -1) {
                                                    return;
                                                }
                                                break;
                                            }
                                            if (token[jj] === "do" && token[jj + 1] !== "{" && token[jj + 1] !== "x{") {
                                                asiTest = true;
                                                break;
                                            }
                                            if (types[jj] === "start" || types[jj] === "method" || token[jj] === ";" || token[jj] === "," || token[jj] === "do") {
                                                if (((token[jj - 1] === "else" || token[jj - 1] === "for" || token[jj - 1] === "catch" || token[jj - 1] === "if") && elsetest === false) || ((token[jj] === "{" || token[jj] === "x{") && token[jj - 1] === "do")) {
                                                    if (token[jj - 1] !== "if" && token[jj - 1] !== "for") {
                                                        if (types[length] === "end") {
                                                            return;
                                                        }
                                                        asiTest = true;
                                                        break;
                                                    }
                                                    kk = 1;
                                                    for (ll = jj + 1; ll < length + 1; ll += 1) {
                                                        if (token[ll] === "(") {
                                                            kk += 1;
                                                        }
                                                        if (token[ll] === ")") {
                                                            kk -= 1;
                                                            if (kk === 0) {
                                                                if (token[ll + 1] === undefined) {
                                                                    return;
                                                                }
                                                                last = token[ll + 1];
                                                                if (last === "{" || last === "x{" || last === "for" || last === "if" || last === "while" || last === "do") {
                                                                    return;
                                                                }
                                                                last = token[length];
                                                                break;
                                                            }
                                                        }
                                                    }
                                                    kk = 0;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (asiTest === false) {
                                    colon = false;
                                    if (token[jj - 1] === ":") {
                                        if (token[jj] === "{") {
                                            ll = 0;
                                            for (kk = jj - 2; kk > -1; kk -= 1) {
                                                if (types[kk] === "start" && token[kk] !== "(") {
                                                    ll += 1;
                                                }
                                                if (types[kk] === "end" && token[kk] !== ")") {
                                                    ll -= 1;
                                                }
                                                if (ll === 0) {
                                                    if (token[kk] === "?") {
                                                        asiTest = true;
                                                        break;
                                                    }
                                                    if (token[kk] === ",") {
                                                        break;
                                                    }
                                                }
                                                if (ll > 1) {
                                                    return;
                                                }
                                            }
                                        }
                                        if (asiTest === false) {
                                            kk = 0;
                                            for (jj -= 1; jj > -1; jj -= 1) {
                                                if (types[jj] === "end") {
                                                    kk += 1;
                                                }
                                                if (types[jj] === "start" || types[jj] === "method") {
                                                    kk -= 1;
                                                }
                                                if (kk === 1) {
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                    if (token[jj - 1] === ")" && asiTest === false) {
                                        kk = 0;
                                        for (jj -= 1; jj > -1; jj -= 1) {
                                            if (types[jj] === "end") {
                                                kk += 1;
                                            }
                                            if (types[jj] === "start" || types[jj] === "method") {
                                                kk -= 1;
                                            }
                                            if (kk === 0) {
                                                if (types[jj] === "operator" && token[jj + 1] === "function") {
                                                    asiTest = true;
                                                    break;
                                                }
                                                if (nextCharA === "}" || (nextCharA !== "}" && nextCharB === "}")) {
                                                    if (token[jj] === ":") {
                                                        colon = true;
                                                    }
                                                    if (token[jj] === "," && colon === true) {
                                                        return;
                                                    }
                                                }
                                                if (token[jj] === ";") {
                                                    break;
                                                }
                                                if (token[jj] === "(") {
                                                    jj -= 1;
                                                    if (token[jj] === "if" || token[jj] === "for" || token[jj] === "switch" || token[jj] === "catch" || token[jj] === "while") {
                                                        if (types[length] === "end") {
                                                            return;
                                                        }
                                                        asiTest = true;
                                                        break;
                                                    }
                                                    if (token[jj - 1] === "function") {
                                                        jj -= 1;
                                                    }
                                                    if (token[jj] === "function") {
                                                        if ((types[jj - 1] === "operator" && token[jj - 1] !== ":") || token[jj - 1] === "(" || token[jj - 1] === "[") {
                                                            asiTest = true;
                                                        } else {
                                                            return;
                                                        }
                                                    } else {
                                                        asiTest = true;
                                                    }
                                                }
                                            }
                                        }
                                    } else if (jj > -1 && token[jj] !== ",") {
                                        asiTest = true;
                                    }
                                }
                                if (asiTest === true) {
                                    if (jscorrect === true) {
                                        token.push(";");
                                    } else {
                                        token.push("x;");
                                    }
                                    if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                        lines[lines.length - 1][0] += 1;
                                    }
                                    ltoke = ";";
                                    ltype = "separator";
                                    types.push("separator");
                                    lengtha += 1;
                                    semi    += 1;
                                    if (block.prior[block.prior.length - 1] === false && block.start > -1 && block.count === 0 && block.simple.length > 0 && block.method[block.method.length - 1] === 0) {
                                        if (token[lengtha - 3] === "else" && token[lengtha - 2] !== "{" && token[lengtha - 2] !== "x{" && token[lengtha - 2] !== "if") {
                                            store.push(token[token.length - 2]);
                                            store.push(types[types.length - 2]);
                                            token.pop();
                                            types.pop();
                                            token.pop();
                                            types.pop();
                                            token.push(block.cs);
                                            types.push("start");
                                            token.push(store[0]);
                                            types.push(store[1]);
                                            token.push(ltoke);
                                            types.push(ltype);
                                            lengtha += 1;
                                        }
                                        do {
                                            if (block.prior[block.prior.length - 1] === false) {
                                                token.push(block.ce);
                                                types.push("end");
                                                if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                                    lines[lines.length - 1][0] += 1;
                                                }
                                            }
                                            blockpop();
                                            lengtha += 1;
                                        } while (block.simple.length > 0 && block.prior[block.prior.length - 1] === false);
                                        ltoke = "}";
                                        ltype = "end";
                                        if (block.simple.length === 0) {
                                            block.start = -1;
                                        }
                                    }
                                }
                            },
                            newarray     = function jspretty__tokenize_newarray() {
                                var aa       = token.length - 1,
                                    bb       = 0,
                                    cc       = aa,
                                    arraylen = 0;
                                for (aa; aa > -1; aa -= 1) {
                                    if (types[aa] === "end") {
                                        bb += 1;
                                    }
                                    if (types[aa] === "start" || types[aa] === "method") {
                                        bb -= 1;
                                    }
                                    if (bb === -1 || (bb === 0 && token[aa] === ";")) {
                                        break;
                                    }
                                }
                                if (types[aa] === "method" && token[aa - 1] === "Array" && token[aa - 2] === "new") {
                                    if (cc - aa === 1 && (/^([0-9])$/).test(token[cc]) === true) {
                                        arraylen = token[cc] - 1;
                                        token.pop();
                                        token.pop();
                                        token.pop();
                                        token.pop();
                                        types.pop();
                                        types.pop();
                                        types.pop();
                                        types.pop();
                                        token.push("[");
                                        types.push("start");
                                        do {
                                            token.push(",");
                                            types.push("separator");
                                            arraylen -= 1;
                                        } while (arraylen > 0);
                                    } else {
                                        token[aa] = "[";
                                        types[aa] = "start";
                                        token.splice(aa - 2, 2);
                                        types.splice(aa - 2, 2);
                                    }
                                    token.push("]");
                                } else {
                                    token.push(")");
                                }
                                types.push("end");
                            },
                            generic      = function jspretty__tokenize_genericBuilder(start, ending) {
                                var ee       = 0,
                                    f        = 0,
                                    g        = 0,
                                    end      = ending.split(""),
                                    endlen   = end.length - 1,
                                    jj       = b,
                                    exittest = false,
                                    build    = [start],
                                    rtest    = (end[0] === "\r") ? true : false,
                                    base     = a + start.length,
                                    output   = "",
                                    escape   = false;
                                if (c[a - 2] !== "\\" && c[a - 1] === "\\" && (c[a] === "\"" || c[a] === "'")) {
                                    token.pop();
                                    types.pop();
                                    if (token[0] === "{") {
                                        if (c[a] === "\"") {
                                            start  = "\"";
                                            ending = "\\\"";
                                            build  = ["\""];
                                        } else {
                                            start  = "'";
                                            ending = "\\'";
                                            build  = ["'"];
                                        }
                                        escape = true;
                                    } else {
                                        if (c[a] === "\"") {
                                            return "\\\"";
                                        }
                                        return "\\'";
                                    }
                                }
                                for (ee = base; ee < jj; ee += 1) {
                                    build.push(c[ee]);
                                    if (c[ee] === end[endlen] || (rtest === true && (c[ee] === "\n" || ee === jj - 1))) {
                                        if (endlen > 0) {
                                            g = endlen;
                                            for (f = ee; g > -1; f -= 1) {
                                                if (c[f] !== end[g]) {
                                                    break;
                                                }
                                                g -= 1;
                                            }
                                            if (g === -1) {
                                                exittest = true;
                                            }
                                        } else {
                                            exittest = true;
                                        }
                                        if (ee > endlen + 1 && c[ee - endlen - 1] === "\\" && ending.charAt(0) !== "\\") {
                                            g = 1;
                                            for (f = ee - 2; f > -1; f -= 1) {
                                                if (c[f] === "\\") {
                                                    g += 1;
                                                } else {
                                                    break;
                                                }
                                            }
                                            if (g % 2 === 1) {
                                                exittest = false;
                                            }
                                        }
                                        if (exittest === true) {
                                            break;
                                        }
                                    }
                                }
                                if (escape === true) {
                                    output = build[build.length - 1];
                                    build.pop();
                                    build.pop();
                                    build.push(output);
                                }
                                if (ee < jj) {
                                    a = ee;
                                    if (start === "//") {
                                        stats.space.newline += 1;
                                        build.pop();
                                    }
                                    if (jsscope === true) {
                                        output = build.join("").replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                                    } else {
                                        output = build.join("");
                                    }
                                    return output;
                                }
                                return "";
                            },
                            comtest      = function jspretty__tokenize_commentTester() {
                                var z = 0;
                                if (ltype === "comment" || ltype === "comment-inline") {
                                    return "comment";
                                }
                                for (z = a - 1; z > -1; z -= 1) {
                                    if ((/\S/).test(c[z]) === true) {
                                        return "comment-inline";
                                    }
                                    if (c[z] === "\n" || c[z] === "\r") {
                                        return "comment";
                                    }
                                }
                                return "comment";
                            },
                            operator     = function jspretty__tokenize_operator() {
                                var syntax = [
                                        "=", "<", ">", "+", "*", "?", "|", "^", ":", "&"
                                    ],
                                    g      = 0,
                                    h      = 0,
                                    jj     = b,
                                    build  = [c[a]],
                                    synlen = syntax.length,
                                    output = "";
                                if (lines[lines.length - 1] !== undefined && lines[lines.length - 1][0] === token.length - 1) {
                                    lines.pop();
                                }
                                if (a < b - 1) {
                                    if (c[a] === "!" && c[a + 1] === "/") {
                                        return "!";
                                    }
                                    if (c[a] === ":" && c[a + 1] !== ":") {
                                        return ":";
                                    }
                                    if (c[a] === "-") {
                                        if (c[a + 1] === "-") {
                                            output = "--";
                                        } else if (c[a + 1] === "=") {
                                            output = "-=";
                                        }
                                        if (output === "") {
                                            return "-";
                                        }
                                    }
                                }
                                if (output === "") {
                                    for (g = a + 1; g < jj; g += 1) {
                                        for (h = 0; h < synlen; h += 1) {
                                            if (c[g] === syntax[h]) {
                                                build.push(syntax[h]);
                                                break;
                                            }
                                        }
                                        if (h === synlen) {
                                            break;
                                        }
                                    }
                                    output = build.join("");
                                }
                                a = a + (output.length - 1);
                                if (jsscope === true) {
                                    output = output.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                                }
                                return output;
                            },
                            regex        = function jspretty__tokenize_regex() {
                                var ee     = 0,
                                    f      = b,
                                    h      = 0,
                                    i      = 0,
                                    build  = ["/"],
                                    output = "";
                                for (ee = a + 1; ee < f; ee += 1) {
                                    build.push(c[ee]);
                                    if (c[ee] === "/") {
                                        if (c[ee - 1] === "\\") {
                                            i = 0;
                                            for (h = ee - 1; h > 0; h -= 1) {
                                                if (c[h] === "\\") {
                                                    i += 1;
                                                } else {
                                                    break;
                                                }
                                            }
                                            if (i % 2 === 0) {
                                                break;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                if (c[ee + 1] === "g" || c[ee + 1] === "i" || c[ee + 1] === "m" || c[ee + 1] === "y") {
                                    build.push(c[ee + 1]);
                                    if (c[ee + 2] !== c[ee + 1] && (c[ee + 2] === "g" || c[ee + 2] === "i" || c[ee + 2] === "m" || c[ee + 2] === "y")) {
                                        build.push(c[ee + 2]);
                                        if (c[ee + 3] !== c[ee + 1] && c[ee + 3] !== c[ee + 2] && (c[ee + 3] === "g" || c[ee + 3] === "i" || c[ee + 3] === "m" || c[ee + 3] === "y")) {
                                            build.push(c[ee + 3]);
                                            if (c[ee + 4] !== c[ee + 1] && c[ee + 4] !== c[ee + 2] && c[ee + 4] !== c[ee + 3] && (c[ee + 4] === "g" || c[ee + 4] === "i" || c[ee + 4] === "m" || c[ee + 4] === "y")) {
                                                build.push(c[ee + 4]);
                                                a = ee + 4;
                                            } else {
                                                a = ee + 3;
                                            }
                                        } else {
                                            a = ee + 2;
                                        }
                                    } else {
                                        a = ee + 1;
                                    }
                                } else {
                                    a = ee;
                                }
                                if (jsscope === true) {
                                    output = build.join("").replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                                } else {
                                    output = build.join("");
                                }
                                return output;
                            },
                            numb         = function jspretty__tokenize_number() {
                                var ee    = 0,
                                    f     = b,
                                    build = [c[a]],
                                    dot   = (build[0] === ".") ? true : false;
                                if (a < b - 2 && c[a + 1] === "x" && (/[0-9A-Fa-f]/).test(c[a + 2])) {
                                    build.push("x");
                                    for (ee = a + 2; ee < f; ee += 1) {
                                        if ((/[0-9A-Fa-f]/).test(c[ee])) {
                                            build.push(c[ee]);
                                        } else {
                                            break;
                                        }
                                    }
                                } else {
                                    for (ee = a + 1; ee < f; ee += 1) {
                                        if ((/[0-9]/).test(c[ee]) || (c[ee] === "." && dot === false)) {
                                            build.push(c[ee]);
                                            if (c[ee] === ".") {
                                                dot = true;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                if (ee < f - 1 && (c[ee] === "e" || c[ee] === "E")) {
                                    build.push(c[ee]);
                                    if (c[ee + 1] === "-") {
                                        build.push("-");
                                        ee += 1;
                                    }
                                    dot = false;
                                    for (ee += 1; ee < f; ee += 1) {
                                        if ((/[0-9]/).test(c[ee]) || (c[ee] === "." && dot === false)) {
                                            build.push(c[ee]);
                                            if (c[ee] === ".") {
                                                dot = true;
                                            }
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                a = ee - 1;
                                return build.join("");
                            },
                            space        = function jspretty__tokenize_space() {
                                var schars    = [],
                                    f         = 0,
                                    locallen  = b,
                                    emptyline = false,
                                    output    = "",
                                    stest     = (/\s/),
                                    asitest   = false;
                                for (f = a; f < locallen; f += 1) {
                                    if (c[f] === "\n") {
                                        stats.space.newline += 1;
                                        asitest             = true;
                                    } else if (c[f] === " ") {
                                        stats.space.space += 1;
                                    } else if (c[f] === "\t") {
                                        stats.space.tab += 1;
                                    } else if (stest.test(c[f]) === true) {
                                        stats.space.other += 1;
                                        if (c[f] === "\r") {
                                            asitest = true;
                                        }
                                    } else {
                                        break;
                                    }
                                    schars.push(c[f]);
                                }
                                a = f - 1;
                                if (token.length === 0) {
                                    return;
                                }
                                output = schars.join("");
                                if (jpres === true && output.indexOf("\n") > -1) {
                                    if (output.indexOf("\n") !== output.lastIndexOf("\n") || token[token.length - 1].indexOf("//") === 0) {
                                        emptyline = true;
                                    }
                                    lines.push([
                                        token.length - 1, emptyline
                                    ]);
                                }
                                if (asitest === true && ltoke !== ";" && lengthb < token.length) {
                                    asi(a);
                                    lengthb = token.length;
                                }
                            },
                            word         = function jspretty__tokenize_word() {
                                var f      = a,
                                    g      = b,
                                    build  = [],
                                    output = "";
                                do {
                                    build.push(c[f]);
                                    f += 1;
                                } while (f < g && " \f\n\r\t\v\u00A0\u2028\u2029;=.,&<>+-/*!?|^:\"'\\(){}[]%".indexOf(c[f]) === -1);
                                output = build.join("");
                                if (types.length > 1 && output === "function" && types[types.length - 1] === "method" && (token[token.length - 2] === "{" || token[token.length - 2] === "x{")) {
                                    types[types.length - 1] = "start";
                                }
                                a = f - 1;
                                if (types.length > 2 && output === "function" && ltype === "method" && (token[token.length - 2] === "}" || token[token.length - 2] === "x}")) {
                                    types[types.length - 1] = "start";
                                }
                                return output;
                            };
                        for (a = 0; a < b; a += 1) {
                            lengtha = token.length;
                            if ((/\s/).test(c[a])) {
                                space();
                            } else if (c[a] === "<" && c[a + 1] === "?" && c[a + 2] === "p" && c[a + 3] === "h" && c[a + 4] === "p") {
                                ltoke              = generic("<?php", "?>");
                                ltype              = "literal";
                                stats.server.token += 1;
                                stats.server.chars += ltoke.length;
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "<" && c[a + 1] === "%") {
                                ltoke              = generic("<%", "%>");
                                ltype              = "literal";
                                stats.server.token += 1;
                                stats.server.chars += ltoke.length;
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "<" && c[a + 1] === "!" && c[a + 2] === "-" && c[a + 3] === "-" && c[a + 4] === "#") {
                                ltoke              = generic("<!--#", "--" + ">");
                                ltype              = "literal";
                                stats.server.token += 1;
                                stats.server.chars += ltoke.length;
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "/" && (a === b - 1 || c[a + 1] === "*")) {
                                ltoke                    = generic("/*", "*\/");
                                stats.commentBlock.token += 1;
                                stats.commentBlock.chars += ltoke.length;
                                if (jcomment !== "nocomment") {
                                    ltype = "comment";
                                    token.push(ltoke);
                                    types.push(ltype);
                                }
                            } else if (c[a] === "/" && (a === b - 1 || c[a + 1] === "/")) {
                                if (jcomment !== "nocomment") {
                                    ltype = comtest();
                                }
                                ltoke                   = generic("//", "\r");
                                stats.commentLine.token += 1;
                                stats.commentLine.chars += ltoke.length;
                                if (jcomment !== "nocomment") {
                                    token.push(ltoke);
                                    types.push(ltype);
                                }
                            } else if (c[a] === "/" && (lengtha > 0 && (ltype !== "word" || ltoke === "typeof" || ltoke === "return") && ltype !== "literal" && ltype !== "end")) {
                                ltoke             = regex();
                                ltype             = "regex";
                                stats.regex.token += 1;
                                stats.regex.chars += ltoke.length;
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "\"") {
                                ltoke              = generic("\"", "\"");
                                ltype              = "literal";
                                stats.string.token += 1;
                                stats.string.chars += ltoke.length - 2;
                                stats.string.quote += 2;
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "'") {
                                ltoke              = generic("'", "'");
                                ltype              = "literal";
                                stats.string.token += 1;
                                stats.string.chars += ltoke.length - 2;
                                stats.string.quote += 2;
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "-" && (a < b - 1 && c[a + 1] !== "=" && c[a + 1] !== "-") && (ltype === "literal" || ltype === "word") && ltoke !== "return" && (ltoke === ")" || ltoke === "]" || ltype === "word" || ltype === "literal")) {
                                stats.operator.token += 1;
                                stats.operator.chars += 1;
                                ltoke                = "-";
                                ltype                = "operator";
                                token.push(ltoke);
                                types.push(ltype);
                            } else if ((/\d/).test(c[a]) || (a !== b - 2 && c[a] === "-" && c[a + 1] === "." && (/\d/).test(c[a + 2])) || (a !== b - 1 && (c[a] === "-" || c[a] === ".") && (/\d/).test(c[a + 1]))) {
                                if (ltype === "end" && c[a] === "-") {
                                    ltoke                = "-";
                                    ltype                = "operator";
                                    stats.operator.token += 1;
                                    stats.operator.chars += 1;
                                } else {
                                    ltoke              = numb();
                                    ltype              = "literal";
                                    stats.number.token += 1;
                                    stats.number.chars += ltoke.length;
                                }
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === ",") {
                                stats.comma += 1;
                                ltoke       = ",";
                                ltype       = "separator";
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === ".") {
                                stats.operator.token += 1;
                                stats.operator.chars += 1;
                                if (lines[lines.length - 1] !== undefined && lines[lines.length - 1][0] === lengtha - 1) {
                                    lines.pop();
                                }
                                ltoke = ".";
                                ltype = "separator";
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === ";") {
                                stats.semicolon += 1;
                                if ((token[lengtha - 3] === ";" || token[lengtha - 3] === "}" || token[lengtha - 3] === "[" || token[lengtha - 3] === "(" || token[lengtha - 3] === ")" || token[lengtha - 3] === "," || token[lengtha - 3] === "return") && jscorrect === true) {
                                    if (ltoke === "++" || ltoke === "--") {
                                        plusplus(lengtha - 1, "post");
                                    } else if (token[lengtha - 2] === "++" || token[lengtha - 2] === "--") {
                                        plusplus(lengtha - 2, "pre");
                                    }
                                }
                                ltoke = ";";
                                ltype = "separator";
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "(") {
                                stats.container += 1;
                                if (ltype === "comment" || ltype === "comment-inline" || ltype === "start") {
                                    ltype = "start";
                                } else if (lengtha > 2 && token[lengtha - 2] === "function") {
                                    ltype = "method";
                                } else if (lengtha === 0 || ltoke === "return" || ltoke === "function" || ltoke === "for" || ltoke === "if" || ltoke === "while" || ltoke === "switch" || ltoke === "catch" || ltype === "separator" || ltype === "operator" || (a > 0 && (/\s/).test(c[a - 1]))) {
                                    ltype = "start";
                                } else {
                                    ltype = "method";
                                }
                                ltoke = "(";
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "[") {
                                stats.container += 1;
                                ltoke           = "[";
                                ltype           = "start";
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "{") {
                                stats.container += 1;
                                if ((ltype === "comment" || ltype === "comment-inline") && token[lengtha - 2] === ")") {
                                    ltoke              = token[lengtha - 1];
                                    token[lengtha - 1] = "{";
                                    ltype              = types[lengtha - 1];
                                    types[lengtha - 1] = "start";
                                } else {
                                    ltoke = "{";
                                    ltype = "start";
                                }
                                if (jscorrect === true && block.start > -1) {
                                    if (types[types.length - 1] === "method" || token[token.length - 1] === "=") {
                                        block.method[block.method.length - 1] += 1;
                                    }
                                    if (token[lengtha - 1] === ",") {
                                        methodtest();
                                    }
                                }
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === ")") {
                                stats.container += 1;
                                if ((token[lengtha - 3] === ";" || token[lengtha - 3] === "}" || token[lengtha - 3] === "[" || token[lengtha - 3] === "(" || token[lengtha - 3] === ")" || token[lengtha - 3] === "," || token[lengtha - 3] === "return") && jscorrect === true) {
                                    if (types[lengtha - 3] !== "method" && (ltoke === "++" || ltoke === "--")) {
                                        plusplus(lengtha - 1, "post");
                                    } else if (token[lengtha - 2] === "++" || token[lengtha - 2] === "--") {
                                        plusplus(lengtha - 2, "pre");
                                    }
                                }
                                ltoke = ")";
                                ltype = "end";
                                if (jscorrect === true) {
                                    newarray();
                                } else {
                                    token.push(ltoke);
                                    types.push(ltype);
                                }
                            } else if (c[a] === "]") {
                                stats.container += 1;
                                if ((token[lengtha - 3] === "[" || token[lengtha - 3] === ";" || token[lengtha - 3] === "}" || token[lengtha - 3] === "(" || token[lengtha - 3] === ")" || token[lengtha - 3] === "," || token[lengtha - 3] === "return") && jscorrect === true) {
                                    if (ltoke === "++" || ltoke === "--") {
                                        plusplus(lengtha - 1, "post");
                                    } else if (token[lengtha - 2] === "++" || token[lengtha - 2] === "--") {
                                        plusplus(lengtha - 2, "pre");
                                    }
                                }
                                ltoke = "]";
                                ltype = "end";
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "}") {
                                if (ltoke !== ";" && lengthb < token.length) {
                                    asi(a);
                                    lengthb = token.length;
                                }
                                if ((token[lengtha - 3] === ";" || token[lengtha - 3] === "}" || token[lengtha - 3] === "[" || token[lengtha - 3] === "(" || token[lengtha - 3] === ")" || token[lengtha - 3] === "," || token[lengtha - 3] === "return") && jscorrect === true) {
                                    if (token[lengtha - 1] === "++" || token[lengtha - 1] === "--") {
                                        plusplus(lengtha - 1, "post");
                                        token.push(";");
                                        types.push("separator");
                                    } else if (token[lengtha - 2] === "++" || token[lengtha - 2] === "--") {
                                        plusplus(lengtha - 2, "pre");
                                        token.push(";");
                                        types.push("separator");
                                    }
                                }
                                stats.container += 1;
                                ltoke           = "}";
                                ltype           = "end";
                                token.push(ltoke);
                                types.push(ltype);
                            } else if (c[a] === "=" || c[a] === "&" || c[a] === "<" || c[a] === ">" || c[a] === "+" || c[a] === "-" || c[a] === "*" || c[a] === "/" || c[a] === "!" || c[a] === "?" || c[a] === "|" || c[a] === "^" || c[a] === ":" || c[a] === "%") {
                                ltoke                = operator();
                                ltype                = "operator";
                                stats.operator.token += 1;
                                stats.operator.chars += ltoke.length;
                                token.push(ltoke);
                                types.push(ltype);
                            } else {
                                ltoke = word();
                                ltype = "word";
                                if (ltoke === "function" && block.start > -1) {
                                    if (types[lengtha - 1] === "method" || token[lengtha - 1] === "=") {
                                        block.method[block.method.length - 1] += 1;
                                    }
                                    if (token[lengtha - 1] === ",") {
                                        methodtest();
                                    }
                                }
                                if (jscorrect === true && (ltoke === "Object" || ltoke === "Array") && c[a + 1] === "(" && c[a + 2] === ")" && token[lengtha - 2] === "=" && token[lengtha - 1] === "new") {
                                    if (ltoke === "Object") {
                                        token[lengtha - 1] = "{";
                                        token.push("}");
                                    } else {
                                        token[lengtha - 1] = "[";
                                        token.push("]");
                                    }
                                    types[lengtha - 1] = "start";
                                    types.push("end");
                                    a += 2;
                                } else {
                                    token.push(ltoke);
                                    types.push(ltype);
                                    stats.word.token += 1;
                                    stats.word.chars += ltoke.length;
                                }
                            }
                            if (lengtha < token.length) {
                                lengtha = token.length;
                                lasttwo = [
                                    token[lengtha - 2], types[lengtha - 2]
                                ];
                                if (lengtha === 0) {
                                    lengtha += 1;
                                }
                                if (ltoke === "}") {
                                    block.bcount[block.bcount.length - 1] -= 1;
                                    if (block.prior[block.prior.length - 1] === true) {
                                        block.pcount[block.pcount.length - 1] -= 1;
                                    }
                                    if (block.method > 0 && block.method[block.method.length - 1] > 0) {
                                        block.method[block.method.length - 1] -= 1;
                                    }
                                    if (block.method[block.method.length - 1] > 0) {
                                        block.method[block.method.length - 1] -= 1;
                                    } else if (token[lengtha - 2] !== "{" && types[lengtha - 3] !== "operator") {
                                        objtest();
                                    }
                                }
                                if (ltoke === "{") {
                                    block.bcount[block.bcount.length - 1] += 1;
                                    if (block.prior[block.prior.length - 1] === true) {
                                        block.pcount[block.pcount.length - 1] += 1;
                                    }
                                    if (lasttwo[0] === "else" || (block.word[block.word.length - 2] === "else" && block.word[block.word.length - 1] === "if")) {
                                        block.prev[block.prev.length - 1] = true;
                                    }
                                }
                                if (token[lengtha - 3] === "else" && lasttwo[0] !== "{" && lasttwo[0] !== "x{" && lasttwo[0] !== "if") {
                                    token.pop();
                                    types.pop();
                                    token.pop();
                                    types.pop();
                                    token.push(block.cs);
                                    types.push("start");
                                    block.prev.push(false);
                                    token.push(lasttwo[0]);
                                    types.push(lasttwo[1]);
                                    token.push(ltoke);
                                    types.push(ltype);
                                    if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                        lines[lines.length - 1][0] += 1;
                                    }
                                    lengtha += 1;
                                }
                                if ((ltoke === "}" || ltoke === ";") && block.count === 0 && block.simple.length > 0 && block.method[block.method.length - 1] === 0) {
                                    if (ltoke === "}" && block.prior[block.prior.length - 1] === true && block.pcount[block.pcount.length - 1] === 0) {
                                        blockpop();
                                        if (block.simple.length === 0) {
                                            block.start = -1;
                                        }
                                    } else if (ltoke === ";" && (block.brace[block.brace.length - 1] === "else" || (block.prior[block.prior.length - 1] === false && block.start > -1))) {
                                        if ((token[block.start - 1] === "while" && token[block.start] === "(" && lengtha - 1 === block.brace[block.brace.length - 1]) || (block.word[block.word.length - 1] === "while" && lengtha - 2 === block.brace[block.brace.length - 1])) {
                                            blockpop();
                                            if (block.simple.length === 0) {
                                                block.start = -1;
                                            }
                                        } else if (block.bcount[block.bcount.length - 1] === 0) {
                                            do {
                                                if (block.prior[block.prior.length - 1] === false && block.brace[block.brace.length - 1] !== lengtha - 2) {
                                                    token.push(block.ce);
                                                    types.push("end");
                                                    if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                                        lines[lines.length - 1][0] += 1;
                                                    }
                                                }
                                                commentcheck();
                                                lengtha += 1;
                                                blockpop();
                                            } while (block.simple.length > 0 && block.prior[block.prior.length - 1] === false && block.bcount[block.bcount.length - 1] === 0);
                                            ltoke = "}";
                                            ltype = "end";
                                            if (block.simple.length === 0) {
                                                block.start = -1;
                                            }
                                        }
                                    }
                                }
                                if (block.flag === false && (ltoke === "for" || ltoke === "if" || ltoke === "while" || ltoke === "do" || ltoke === "else") && (block.brace.length === 0 || block.brace[block.brace.length - 1] === "else" || block.brace[block.brace.length - 1] < lengtha - 1)) {
                                    if (ltoke === "while" && (lasttwo[0] === "}" || lasttwo[0] === "x}")) {
                                        whiletest();
                                    }
                                    if (block.dotest === true) {
                                        block.dotest = false;
                                    } else {
                                        if ((ltoke === "if" && lasttwo[0] === "else") || (ltoke === "while" && token[block.start] === "do")) {
                                            blockpop();
                                        } else if (ltoke === "if" && (lasttwo[0] === "{" || lasttwo[0] === "x{") && token[lengtha - 3] === "else" && block.word[block.word.length - 2] === "else" && block.word[block.word.length - 1] === "if") {
                                            token.pop();
                                            types.pop();
                                            token.pop();
                                            types.pop();
                                            token.push("if");
                                            types.push("word");
                                        }
                                        if (ltoke === "do") {
                                            block.bcount.push(0);
                                            block.brace.push(lengtha - 1);
                                            block.method.push(0);
                                            block.pcount.push(0);
                                            block.prior.push(false);
                                            block.simple.push(true);
                                            block.flag  = false;
                                            block.count = 0;
                                        } else if (ltoke === "else") {
                                            elsestart();
                                        } else {
                                            block.method.push(0);
                                            block.pcount.push(0);
                                            block.prior.push(false);
                                            block.simple.push(false);
                                            block.flag = true;
                                        }
                                        block.start = lengtha;
                                        block.word.push(ltoke);
                                    }
                                }
                                if (block.start > -1) {
                                    if (block.flag === true && block.simple[block.simple.length - 1] === false) {
                                        if (ltoke === "(") {
                                            block.count += 1;
                                        }
                                        if (ltoke === ")") {
                                            block.count -= 1;
                                            if (block.count === 0) {
                                                block.bcount.push(0);
                                                block.brace.push(lengtha - 1);
                                                block.flag = false;
                                            }
                                        }
                                    }
                                    if (ltoke === "for" && lasttwo[0] === "else") {
                                        token.pop();
                                        types.pop();
                                        token.push(block.cs);
                                        types.push("start");
                                        token.push(ltoke);
                                        types.push(ltype);
                                        if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                            lines[lines.length - 1][0] += 1;
                                        }
                                        lengtha += 1;
                                    } else if ((block.flag === false || lasttwo[0] === "else" || (lasttwo[0] === ")" && (ltoke === "if" || ltoke === "for" || ltoke === "while"))) && block.count === 0 && lengtha - 2 === block.brace[block.brace.length - 1]) {
                                        if (block.word[block.word.length - 1] === "else" && (ltoke === "{" || lasttwo[0] === "{" || lasttwo[0] === "x{")) {
                                            if (lasttwo[0] === "{" || lasttwo[0] === "x{") {
                                                token[token.length - 2] = token[token.length - 1];
                                                types[types.length - 2] = types[types.length - 1];
                                                token.pop();
                                                types.pop();
                                                if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                                    lines[lines.length - 1][0] -= 1;
                                                }
                                            }
                                            block.prev.push(true);
                                        } else if (ltoke === "{") {
                                            block.prior[block.prior.length - 1]   = true;
                                            block.pcount[block.pcount.length - 1] = 1;
                                            block.prev.push(true);
                                        } else if (block.brace[block.brace.length - 1] !== -1) {
                                            token.pop();
                                            types.pop();
                                            token.push(block.cs);
                                            types.push("start");
                                            token.push(ltoke);
                                            types.push(ltype);
                                            if (lines.length > 0 && types[lines[lines.length - 1][0]] !== "comment") {
                                                lines[lines.length - 1][0] += 1;
                                            }
                                            block.prev.push(false);
                                            lengtha += 1;
                                        }
                                    } else if (ltoke === "{" && lasttwo[0] === "else" && block.brace[block.brace.length - 1] === "else") {
                                        blockpop();
                                        block.prev.push(true);
                                    }
                                }
                            }
                        }
                        lines.push([
                            token.length, false
                        ]);
                        asi(a);
                    }());
                    (function jspretty__algorithm() {
                        var a          = 0,
                            b          = token.length,
                            lcount     = 0,
                            indent     = jlevel,
                            obj        = [],
                            list       = [],
                            listtest   = [],
                            lastlist   = false,
                            ternary    = [],
                            varline    = [],
                            casetest   = [],
                            fortest    = 0,
                            ctype      = "",
                            ctoke      = "",
                            ltype      = types[0],
                            ltoke      = token[0],
                            varlen     = [],
                            methodtest = [],
                            assignlist = [false],
                            separator  = function jspretty__algorithm_separator() {
                                if (types[a - 1] === "comment-inline" && a > 1) {
                                    return (function jspretty__algorithm_commentfix() {
                                        var c    = 0,
                                            d    = b,
                                            last = token[a - 1];
                                        level[a - 2] = "x";
                                        level[a - 1] = "x";
                                        for (c = a; c < d; c += 1) {
                                            token[c - 1] = token[c];
                                            types[c - 1] = types[c];
                                            if (token[c] === ";" || token[c] === "x;" || token[c] === "{" || token[c] === "x{" || c === lines[lcount][0]) {
                                                token[c] = last;
                                                types[c] = "comment-inline";
                                                a        -= 1;
                                                return;
                                            }
                                        }
                                        token[c - 1] = last;
                                        types[c - 1] = "comment-inline";
                                        a            -= 1;
                                    }());
                                }
                                if (ctoke === ".") {
                                    level[a - 1] = "x";
                                    return level.push("x");
                                }
                                if (ctoke === ",") {
                                    level[a - 1] = "x";
                                    if (ternary.length > 0) {
                                        ternary[ternary.length - 1] = false;
                                    }
                                    if (listtest[listtest.length - 1] === false) {
                                        listtest[listtest.length - 1] = true;
                                        (function jspretty__algorithm_separator_listTest() {
                                            var c         = 0,
                                                d         = 0,
                                                assign    = false,
                                                compare   = false,
                                                semicolon = false;
                                            if (methodtest[methodtest.length - 1] === true) {
                                                list[list.length - 1] = true;
                                                return;
                                            }
                                            for (c = a - 1; c > -1; c -= 1) {
                                                if (types[c] === "end") {
                                                    d += 1;
                                                }
                                                if (types[c] === "start" || types[c] === "method") {
                                                    d -= 1;
                                                    if (token[c] === "[" && d === -1) {
                                                        obj[obj.length - 1] = false;
                                                    }
                                                }
                                                if (d === 0) {
                                                    if (semicolon === false && token[c] === "return") {
                                                        list[list.length - 1] = true;
                                                        return;
                                                    }
                                                    if (assign === false && (token[c] === "=" || token[c] === ";")) {
                                                        assign = true;
                                                    }
                                                    if (compare === false && (token[c] === "&&" || token[c] === "||")) {
                                                        compare = true;
                                                    }
                                                    if (semicolon === false && token[c] === ";") {
                                                        semicolon = true;
                                                    }
                                                }
                                                if (d === -1) {
                                                    if (types[c] === "method") {
                                                        list[list.length - 1] = true;
                                                    } else if (token[c] === "{" || token[c] === "x{") {
                                                        if (token[c - 1] !== ")") {
                                                            obj[obj.length - 1] = true;
                                                        } else if (compare === false && semicolon === false) {
                                                            for (c = c - 1; c > -1; c -= 1) {
                                                                if (types[c] === "end") {
                                                                    d += 1;
                                                                }
                                                                if (types[c] === "start" || types[c] === "method") {
                                                                    d -= 1;
                                                                }
                                                                if (d === -1 && token[c] === "(") {
                                                                    if (token[c - 1] === "function" || token[c - 2] === "function" || token[c - 1] === "if" || token[c - 1] === "for") {
                                                                        return;
                                                                    }
                                                                    break;
                                                                }
                                                            }
                                                        }
                                                    } else if (compare === false && semicolon === false && ((token[c] === "(" && token[c - 1] === "for") || token[c] === "[")) {
                                                        list[list.length - 1] = true;
                                                        return;
                                                    }
                                                    if (compare === false && semicolon === false && varline[varline.length - 1] === false && (assign === false || token[c] === "(")) {
                                                        list[list.length - 1] = true;
                                                    }
                                                    return;
                                                }
                                            }
                                        }());
                                    }
                                    if (obj[obj.length - 1] === true) {
                                        return level.push(indent);
                                    }
                                    if (list[list.length - 1] === true) {
                                        return (function jspretty__algorithm_separator_inList() {
                                            var c = 0,
                                                d = 0;
                                            for (c = a - 1; c > -1; c -= 1) {
                                                if (types[c] === "end") {
                                                    d += 1;
                                                }
                                                if (types[c] === "start" || types[c] === "method") {
                                                    d -= 1;
                                                }
                                                if (d === -1) {
                                                    if (token[c] === "[" && token[c + 1] !== "]" && token[c + 2] !== "]") {
                                                        level[c] = indent;
                                                    }
                                                    return level.push("s");
                                                }
                                            }
                                            return level.push("s");
                                        }());
                                    }
                                    if (varline[varline.length - 1] === true && fortest === 0) {
                                        if (ltoke !== "]") {
                                            (function jspretty__algorithm_separator_varline() {
                                                var c     = 0,
                                                    brace = false;
                                                for (c = a - 1; c > -1; c -= 1) {
                                                    if (token[c] === "]") {
                                                        brace = true;
                                                    }
                                                    if (types[c] === "method" || types[c] === "start") {
                                                        if (token[c] === "[" && token[c + 1] !== "]" && brace === false) {
                                                            level[c] = indent;
                                                        }
                                                        return;
                                                    }
                                                }
                                            }());
                                        }
                                        return level.push(indent);
                                    }
                                    return level.push(indent);
                                }
                                if (ctoke === ";" || ctoke === "x;") {
                                    if (ternary.length > 0) {
                                        ternary[ternary.length - 1] = false;
                                    }
                                    level[a - 1] = "x";
                                    if (fortest === 0) {
                                        if (varline[varline.length - 1] === true) {
                                            varline[varline.length - 1] = false;
                                            if ((methodtest.length === 0 || methodtest[methodtest.length - 1] === false) && varlen.length > 0 && varlen[varlen.length - 1].length > 1) {
                                                varlist.push(varlen[varlen.length - 1]);
                                            }
                                            varlen.pop();
                                            indent -= 1;
                                        }
                                        return level.push(indent);
                                    }
                                    if (fortest > 0) {
                                        if (varline[varline.length - 1] === true) {
                                            varline[varline.length - 1] = false;
                                        }
                                        return level.push("s");
                                    }
                                    return level.push("s");
                                }
                            },
                            method     = function jspretty__algorithm_method() {
                                level[a - 1] = "x";
                                level.push("x");
                                list.push(false);
                                listtest.push(false);
                                methodtest.push(true);
                                obj.push(false);
                                ternary.push(false);
                                assignlist.push(false);
                                if (fortest > 0) {
                                    fortest += 1;
                                }
                            },
                            start      = function jspretty__algorithm_start() {
                                list.push(false);
                                listtest.push(false);
                                methodtest.push(false);
                                ternary.push(false);
                                assignlist.push(false);
                                if (ctoke !== "(") {
                                    indent += 1;
                                }
                                if (ltoke === "for") {
                                    fortest = 1;
                                }
                                if (ctoke === "{" || ctoke === "x{") {
                                    casetest.push(false);
                                    varlen.push([]);
                                    if (ctoke === "{") {
                                        varline.push(false);
                                    }
                                    if (ltoke === "=" || ltoke === ";" || ltoke === "," || ltoke === ":" || ltoke === "?" || ltoke === "return" || ltoke === "in" || ltype === "start" || ltype === "method") {
                                        obj.push(true);
                                    } else {
                                        obj.push(false);
                                    }
                                    if (jbrace && ltype !== "operator" && ltoke !== "return") {
                                        level[a - 1] = indent - 1;
                                    } else if (ltoke === ")") {
                                        level[a - 1] = "s";
                                    } else if (ltoke === "{" || ltoke === "x{" || ltoke === "[" || ltoke === "}" || ltoke === "x}") {
                                        level[a - 1] = indent - 1;
                                    }
                                    if (jsscope === true) {
                                        meta.push("");
                                    }
                                    return level.push(indent);
                                }
                                obj.push(false);
                                if (ctoke === "(") {
                                    if (ltoke === "-" && token[a - 2] === "(") {
                                        level[a - 2] = "x";
                                    }
                                    if (ltoke === "function" || ltoke === "switch" || ltoke === "for" || ltoke === "while") {
                                        methodtest[methodtest.length - 1] = true;
                                    }
                                    if (jsscope === true) {
                                        if (ltoke === "function" || token[a - 2] === "function") {
                                            meta.push(0);
                                        } else {
                                            meta.push("");
                                        }
                                    }
                                    if (fortest > 0 && ltoke !== "for") {
                                        fortest += 1;
                                    }
                                    if (ltoke === "}" || ltoke === "x}") {
                                        level[a - 1] = indent;
                                        return level.push("x");
                                    }
                                    if ((ltoke === "-" && (a < 2 || (token[a - 2] !== ")" && token[a - 2] !== "]" && types[a - 2] !== "word" && types[a - 2] !== "literal"))) || (jspace === false && ltoke === "function")) {
                                        level[a - 1] = "x";
                                    }
                                    return level.push("x");
                                }
                                if (ctoke === "[") {
                                    if (jsscope === true) {
                                        meta.push("");
                                    }
                                    if (ltoke === "[") {
                                        list[list.length - 2] = true;
                                    }
                                    if (ltoke === "return") {
                                        level[a - 1] = "s";
                                    } else if (ltoke === "]" || ltype === "word" || ltoke === ")") {
                                        level[a - 1] = "x";
                                    } else if (ltoke === "[" || ltoke === "{" || ltoke === "x{") {
                                        level[a - 1] = indent - 1;
                                    }
                                    return (function jspretty__algorithm_start_squareBrace() {
                                        var c = 0;
                                        for (c = a + 1; c < b; c += 1) {
                                            if (token[c] === "]") {
                                                return level.push("x");
                                            }
                                            if (token[c] === ",") {
                                                return level.push(indent);
                                            }
                                        }
                                        return level.push("x");
                                    }());
                                }
                                if (jsscope === true && meta[a] === undefined) {
                                    meta.push("");
                                }
                                return level.push("x");
                            },
                            end        = function jspretty__algorithm_end() {
                                if (fortest === 1 && ctoke === ")" && varline[varline.length - 1] === true) {
                                    varline[varline.length - 1] = false;
                                }
                                if (ctoke !== ")") {
                                    indent -= 1;
                                } else if (fortest > 0 && ctoke === ")") {
                                    fortest -= 1;
                                }
                                if (ctoke === "}" || ctoke === "x}") {
                                    if (types[a - 1] !== "comment" && types[a - 1] !== "comment-inline" && ltoke !== "{" && ltoke !== "x{" && ltype !== "end" && ltype !== "literal" && ltype !== "separator" && ltoke !== "++" && ltoke !== "--" && varline[varline.length - 1] === false && (a < 2 || token[a - 2] !== ";" || ltoke === "break" || ltoke === "return")) {
                                        (function jspretty__algorithm_end_curlyBrace() {
                                            var c       = 0,
                                                d       = 1,
                                                assign  = false,
                                                listlen = list.length;
                                            for (c = a - 1; c > -1; c -= 1) {
                                                if (types[c] === "end") {
                                                    d += 1;
                                                }
                                                if (types[c] === "start" || types[c] === "method") {
                                                    d -= 1;
                                                }
                                                if (d === 1) {
                                                    if (token[c] === "=" || token[c] === ";") {
                                                        assign = true;
                                                    }
                                                    if (c > 0 && token[c] === "return" && (token[c - 1] === ")" || token[c - 1] === "{" || token[c - 1] === "x{" || token[c - 1] === "}" || token[c - 1] === "x}" || token[c - 1] === ";")) {
                                                        indent       -= 1;
                                                        level[a - 1] = indent;
                                                        return;
                                                    }
                                                    if ((token[c] === ":" && ternary[ternary.length - 1] === false) || (token[c] === "," && assign === false && varline[varline.length - 1] === false)) {
                                                        return;
                                                    }
                                                    if ((c === 0 || token[c - 1] === "{" || token[c - 1] === "x{") || token[c] === "for" || token[c] === "if" || token[c] === "do" || token[c] === "function" || token[c] === "while" || token[c] === "var") {
                                                        if (list[listlen - 1] === false && listlen > 1 && (a === b - 1 || token[a + 1] !== ")") && obj[obj.length - 1] === false) {
                                                            indent -= 1;
                                                        }
                                                        if (varline[varline.length - 1] === true) {
                                                            indent -= 1;
                                                        }
                                                        return;
                                                    }
                                                }
                                            }
                                        }());
                                    }
                                    if (jsscope === true) {
                                        (function jspretty__algorithm_end_jsscope() {
                                            var c     = 0,
                                                d     = 1,
                                                build = [],
                                                paren = false;
                                            for (c = a - 1; c > -1; c -= 1) {
                                                if (types[c] === "end") {
                                                    d += 1;
                                                } else if (types[c] === "start" || types[c] === "method") {
                                                    d -= 1;
                                                }
                                                if (d < 0) {
                                                    return;
                                                }
                                                if (d === 1) {
                                                    if (meta[c] === "v" && token[c] !== build[build.length - 1]) {
                                                        build.push(token[c]);
                                                    } else if (token[c] === ")") {
                                                        paren = true;
                                                    } else if (paren === true && types[c] === "word" && token[c] !== build[build.length - 1]) {
                                                        build.push(token[c]);
                                                    }
                                                }
                                                if (c > 0 && token[c - 1] === "function" && types[c] === "word" && token[c] !== build[build.length - 1]) {
                                                    build.push(token[c]);
                                                }
                                                if (d === 0) {
                                                    if (types[c] === "separator" || types[c] === "operator" || types[c] === "literal" || token[c] === "if" || token[c] === "else" || token[c] === "for" || token[c] === "switch" || token[c] === "do" || token[c] === "return" || token[c] === "while" || token[c] === "catch" || token[c] === "try") {
                                                        return;
                                                    }
                                                    if (token[c] === "function") {
                                                        if (types[c + 1] === "word") {
                                                            meta[c + 2] = a;
                                                        } else {
                                                            meta[c + 1] = a;
                                                        }
                                                        meta.push(build);
                                                        return;
                                                    }
                                                }
                                            }
                                        }());
                                    }
                                    casetest.pop();
                                }
                                if ((types[a - 1] === "comment" && token[a - 1].substr(0, 2) === "//") || types[a - 1] === "comment-inline") {
                                    level[a - 1] = indent;
                                    level.push("x");
                                } else if ((ltoke === "{" && ctoke === "}") || (ltoke === "[" && ctoke === "]")) {
                                    level[a - 1] = "x";
                                    level.push("x");
                                } else if (ctoke === "]") {
                                    if (list[list.length - 1] === true || (ltoke === "]" && level[a - 2] === indent + 1)) {
                                        level[a - 1] = indent;
                                    } else if (level[a - 1] === "s") {
                                        level[a - 1] = "x";
                                    }
                                    if (list[list.length - 1] === false) {
                                        if (ltoke === "}" || ltoke === "x}") {
                                            level[a - 1] = indent;
                                        }
                                        (function jspretty__algorithm_end_squareBrace() {
                                            var c = 0,
                                                d = 1;
                                            for (c = a - 1; c > -1; c -= 1) {
                                                if (token[c] === "]") {
                                                    d += 1;
                                                }
                                                if (token[c] === "[") {
                                                    d -= 1;
                                                    if (d === 0) {
                                                        if (c > 0 && (token[c + 1] === "{" || token[c + 1] === "x{" || token[c + 1] === "[")) {
                                                            level[c] = indent + 1;
                                                            return;
                                                        }
                                                        if (token[c + 1] !== "[" || lastlist === false) {
                                                            level[c] = "x";
                                                            return;
                                                        }
                                                        return;
                                                    }
                                                }
                                            }
                                        }());
                                    }
                                    level.push("x");
                                } else if (ctoke === ")") {
                                    level[a - 1] = "x";
                                    level.push("s");
                                } else if ((ctoke === "}" || ctoke === "x}") && obj[obj.length - 1] === false && ltype === "word" && list[list.length - 1] === false && casetest[casetest.length - 1] === false) {
                                    indent       += 1;
                                    level[a - 1] = indent;
                                    level.push(indent);
                                } else if (ctoke === "}" || ctoke === "x}" || list[list.length - 1] === true) {
                                    level[a - 1] = indent;
                                    level.push("x");
                                } else {
                                    level.push("x");
                                }
                                lastlist = list[list.length - 1];
                                list.pop();
                                listtest.pop();
                                methodtest.pop();
                                ternary.pop();
                                if (ctoke === "}") {
                                    if (varline[varline.length - 1] === true || (obj[obj.length - 1] === true && ltoke !== "{")) {
                                        if (varlen.length > 0 && assignlist[assignlist.length - 1] === false) {
                                            if (varlen[varlen.length - 1].length > 1) {
                                                varlist.push(varlen[varlen.length - 1]);
                                            }
                                        }
                                    }
                                    varlen.pop();
                                    varline.pop();
                                }
                                assignlist.pop();
                                obj.pop();
                                if (jsscope === true && meta[a] === undefined) {
                                    meta.push("");
                                }
                            },
                            operator   = function jspretty__algorithm_operator() {
                                if (ctoke === "!") {
                                    if (ltoke === "(") {
                                        level[a - 1] = "x";
                                    }
                                    if (ltoke === "}" || ltoke === "x}") {
                                        level[a - 1] = indent;
                                    }
                                    return level.push("x");
                                }
                                if (ctoke === "?") {
                                    if (ternary.length === 0) {
                                        ternary.push(true);
                                    } else {
                                        ternary[ternary.length - 1] = true;
                                    }
                                }
                                if (ctoke === ":") {
                                    if (ternary[ternary.length - 1] === false) {
                                        level[a - 1] = "x";
                                    } else {
                                        level[a - 1] = "s";
                                    }
                                    return (function jspretty__algorithm_operator_colon() {
                                        var c      = 0,
                                            d      = 0,
                                            listin = (varlen.length > 0) ? varlen[varlen.length - 1][varlen[varlen.length - 1].length - 1] + 1 : 0,
                                            listop = token[listin],
                                            assign = (listop === undefined || listop.indexOf("=") > -1) ? false : true;
                                        if (listin === 0) {
                                            return;
                                        }
                                        if (obj[obj.length - 1] === true && varlen.length > 0 && (listop === undefined || (assign === true && types[listin] === "operator"))) {
                                            c = a - 1;
                                            if (types[c] === "comment" || types[c] === "comment-inline") {
                                                do {
                                                    c -= 1;
                                                } while (types[c] === "comment" || types[c] === "comment-inline");
                                            }
                                            if (ternary[ternary.length - 1] === false) {
                                                varlen[varlen.length - 1].push(c);
                                            }
                                        }
                                        for (c = a - 1; c > -1; c -= 1) {
                                            if (types[c] === "start" || types[c] === "method") {
                                                d += 1;
                                            }
                                            if (types[c] === "end") {
                                                d -= 1;
                                            }
                                            if (d > 0) {
                                                if (d === 1 && token[c] === "{" && ternary[ternary.length - 1] === false) {
                                                    obj[obj.length - 1] = true;
                                                }
                                                break;
                                            }
                                            if (d === 0) {
                                                if (ternary[ternary.length - 1] === false && (token[c] === "case" || token[c] === "default")) {
                                                    if (token[a + 1] !== "case") {
                                                        indent += 1;
                                                    }
                                                    return level.push(indent);
                                                }
                                                if (token[c] === "," && ternary[ternary.length - 1] === false) {
                                                    obj[obj.length - 1] = true;
                                                }
                                            }
                                        }
                                        return level.push("s");
                                    }());
                                }
                                if (ctoke === "++" || ctoke === "--") {
                                    if (ltype === "literal" || ltype === "word") {
                                        level[a - 1] = "x";
                                        level.push("s");
                                    } else if (a < b - 1 && (types[a + 1] === "literal" || types[a + 1] === "word")) {
                                        level.push("x");
                                    } else {
                                        level.push("s");
                                    }
                                    return;
                                }
                                level[a - 1] = "s";
                                if (ctoke.indexOf("=") > -1 && ctoke !== "==" && ctoke !== "===" && ctoke !== "!=" && ctoke !== "!==" && ctoke !== ">=" && ctoke !== "<=" && varline[varline.length - 1] === false && methodtest[methodtest.length - 1] === false && obj[obj.length - 1] === false) {
                                    if (assignlist[assignlist.length - 1] === true) {
                                        (function jspretty__algorithm_operator_assignTest() {
                                            var c = 0,
                                                d = "";
                                            for (c = a - 1; c > -1; c -= 1) {
                                                d = token[c];
                                                if (d === ";") {
                                                    return varlen[varlen.length - 1].push(a - 1);
                                                }
                                                if (d.indexOf("=") > -1 && d !== "==" && d !== "===" && d !== "!=" && d !== "!==" && d !== ">=" && d !== "<=") {
                                                    return;
                                                }
                                            }
                                        }());
                                    }
                                    (function jspretty__algorithm_operator_assignSpaces() {
                                        var c = 0,
                                            d = 0,
                                            e = false,
                                            f = "";
                                        for (c = a + 1; c < b; c += 1) {
                                            if (types[c] === "start" || types[c] === "method") {
                                                if (e === true && types[c] === "start" && token[c] !== "[") {
                                                    if (assignlist[assignlist.length - 1] === true) {
                                                        assignlist[assignlist.length - 1] = false;
                                                        if (varlen[varlen.length - 1].length > 1) {
                                                            varlist.push(varlen[varlen.length - 1]);
                                                        }
                                                        varlen.pop();
                                                    }
                                                    break;
                                                }
                                                d += 1;
                                            }
                                            if (types[c] === "end") {
                                                d -= 1;
                                            }
                                            if (d < 0) {
                                                if (assignlist[assignlist.length - 1] === true) {
                                                    assignlist[assignlist.length - 1] = false;
                                                    if (varlen[varlen.length - 1].length > 1) {
                                                        varlist.push(varlen[varlen.length - 1]);
                                                    }
                                                    varlen.pop();
                                                }
                                                break;
                                            }
                                            if (d === 0) {
                                                if (e === true) {
                                                    if (types[c] === "operator" || token[c] === ";" || token[c] === "var") {
                                                        f = token[c];
                                                        if (f !== undefined && f.indexOf("=") > -1 && f !== "==" && f !== "===" && f !== "!=" && f !== "!==" && f !== ">=" && f !== "<=") {
                                                            if (assignlist[assignlist.length - 1] === false) {
                                                                varlen.push([a - 1]);
                                                                assignlist[assignlist.length - 1] = true;
                                                            }
                                                        }
                                                        if ((token[c] === ";" || token[c] === "var") && assignlist[assignlist.length - 1] === true) {
                                                            assignlist[assignlist.length - 1] = false;
                                                            if (varlen.length > 0) {
                                                                if (varlen[varlen.length - 1].length > 1) {
                                                                    varlist.push(varlen[varlen.length - 1]);
                                                                }
                                                                varlen.pop();
                                                            }
                                                        }
                                                        return;
                                                    }
                                                    if (assignlist[assignlist.length - 1] === true && (token[c] === "return" || token[c] === "break" || token[c] === "continue" || token[c] === "throw")) {
                                                        assignlist[assignlist.length - 1] = false;
                                                        if (varlen[varlen.length - 1].length > 1) {
                                                            varlist.push(varlen[varlen.length - 1]);
                                                        }
                                                        varlen.pop();
                                                    }
                                                }
                                                if (token[c] === ";") {
                                                    e = true;
                                                }
                                            }
                                        }
                                    }());
                                }
                                if ((ctoke === "-" && ltoke === "return") || ltoke === "=") {
                                    return level.push("x");
                                }
                                level.push("s");
                            },
                            word       = function jspretty__algorithm_word() {
                                var next    = token[a + 1],
                                    compare = (next === undefined || next === "==" || next === "===" || next === "!=" || next === "!==" || next === ">=" || next === "<=" || next.indexOf("=") < 0) ? false : true;
                                if (varline[varline.length - 1] === true && (ltoke === "," || ltoke === "var")) {
                                    if (fortest === 0 && (methodtest[methodtest.length - 1] === false || methodtest.length === 0)) {
                                        if (types[a + 1] === "operator" && compare === true && varlen.length > 0 && token[varlen[varlen.length - 1][varlen[varlen.length - 1].length - 1] + 1] !== ":") {
                                            varlen[varlen.length - 1].push(a);
                                        }
                                    }
                                    if (jsscope === true) {
                                        meta.push("v");
                                    }
                                } else if (jsscope === true) {
                                    if (ltoke === "function") {
                                        meta.push("v");
                                    } else {
                                        meta.push("");
                                    }
                                }
                                if (ltoke === "}" || ltoke === "x}") {
                                    level[a - 1] = indent;
                                }
                                if (ctoke === "else" && ltoke === "}" && token[a - 2] === "x}") {
                                    level[a - 3] -= 1;
                                }
                                if (varline.length === 1 && varline[0] === true && (ltoke === "var" || ltoke === "," || (ltoke === "function" && types[a + 1] === "method"))) {
                                    globals.push(ctoke);
                                }
                                if (ctoke === "new") {
                                    (function jspretty__algorithm_word_new() {
                                        var c       = 0,
                                            nextish = (typeof next === "string") ? next : "",
                                            apiword = (nextish === "") ? [] : [
                                                "Date", "RegExp", "Error", "XMLHttpRequest", "FileReader", "ActiveXObject", "DataView", "ArrayBuffer", "Proxy", "DOMParser", "ParallelArray", "Int8Array", "Uint8Array", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array", "Canvas", "CustomAnimation", "FadeAnimation", "Flash", "FormField", "Frame", "HotKey", "Image", "MenuItem", "MoveAnimation", "Point", "Rectangle", "ResizeAnimation", "RotateAnimation", "ScrollBar", "Shadow", "SQLite", "Text", "TextArea", "Timer", "URL", "Web", "Window"
                                            ],
                                            apilen  = apiword.length;
                                        for (c = 0; c < apilen; c += 1) {
                                            if (nextish === apiword[c]) {
                                                return;
                                            }
                                        }
                                        news += 1;
                                        if (jsscope === true) {
                                            token[a] = "<strong class='new'>" + token[a] + "</strong>";
                                        }
                                    }());
                                }
                                if (ctoke === "function" && jspace === false && a < b - 1 && token[a + 1] === "(") {
                                    return level.push("x");
                                }
                                if (ctoke === "return") {
                                    listtest[listtest.length - 1] = false;
                                }
                                if (ltoke === "-" && a > 1) {
                                    if (types[a - 2] === "operator" || token[a - 2] === ",") {
                                        level[a - 1] = "x";
                                    } else if (types[a - 2] === "start" || types[a - 2] === "method") {
                                        level[a - 2] = "x";
                                        level[a - 1] = "x";
                                    }
                                } else if (ctoke === "while" && (ltoke === "}" || ltoke === "x}")) {
                                    (function jspretty__algorithm_word_curlyBrace() {
                                        var c = 0,
                                            d = 0;
                                        for (c = a - 1; c > -1; c -= 1) {
                                            if (token[c] === "}" || token[c] === "x}") {
                                                d += 1;
                                            }
                                            if (token[c] === "{" || token[c] === "x{") {
                                                d -= 1;
                                            }
                                            if (d === 0) {
                                                if (token[c - 1] === "do") {
                                                    level[a - 1] = "s";
                                                    return;
                                                }
                                                level[a - 1] = indent;
                                                return;
                                            }
                                        }
                                    }());
                                } else if (ctoke === "in" || ((ctoke === "else" || ctoke === "catch") && (ltoke === "}" || ltoke === "x}"))) {
                                    level[a - 1] = "s";
                                } else if (ctoke === "var") {
                                    if (methodtest.length === 0 || methodtest[methodtest.length - 1] === false) {
                                        varlen.push([]);
                                    }
                                    if (ltype === "end") {
                                        level[a - 1] = indent;
                                    }
                                    if (varline.length === 0) {
                                        varline.push(true);
                                    } else {
                                        varline[varline.length - 1] = true;
                                    }
                                    if (fortest === 0) {
                                        indent += 1;
                                    }
                                } else if (ctoke === "default" || ctoke === "case") {
                                    if (casetest[casetest.length - 1] === false) {
                                        if (ltoke === "{" || ltoke === "x{") {
                                            indent -= 1;
                                        }
                                        level[a - 1]                  = indent;
                                        casetest[casetest.length - 1] = true;
                                    } else if ((ltoke === ":" && (ctoke === "default" || types[a - 1] === "comment-inline" || types[a - 1] === "comment")) || ltoke !== ":") {
                                        indent       -= 1;
                                        level[a - 1] = indent;
                                    }
                                } else if ((ctoke === "break" || ctoke === "return") && casetest[casetest.length - 1] === true) {
                                    level[a - 1] = indent;
                                    (function jspretty__algorithm_word_break() {
                                        var c = 0;
                                        for (c = a + 1; c < b; c += 1) {
                                            if (token[c] === "}" || token[c] === "x}") {
                                                casetest[casetest.length - 1] = false;
                                                return;
                                            }
                                            if (token[c] === "{" || token[c] === "x{" || token[c] === "[") {
                                                return;
                                            }
                                            if (token[c] === "case" || token[c] === "default" || token[c] === "switch") {
                                                indent                        -= 1;
                                                casetest[casetest.length - 1] = false;
                                                return;
                                            }
                                        }
                                    }());
                                }
                                level.push("s");
                            };
                        for (a = 0; a < b; a += 1) {
                            if (jsscope === true && types[a] !== "start" && types[a] !== "word" && types[a] !== "end") {
                                meta.push("");
                            }
                            ctype = types[a];
                            ctoke = token[a];
                            if (a - 1 > lines[lcount][0]) {
                                lcount += 1;
                            }
                            if (ctype === "comment") {
                                if (ltoke === "=" && (/^(\/\*\*\s*@[a-z_]+\s)/).test(ctoke) === true) {
                                    level[a - 1] = "s";
                                } else {
                                    level[a - 1] = indent;
                                }
                                level.push(indent);
                            }
                            if (ctype === "comment-inline") {
                                if (a < b - 1 && (token[a + 1] === "{" || token[a + 1] === "x{")) {
                                    token[a]     = token[a + 1];
                                    types[a]     = "start";
                                    token[a + 1] = ctoke;
                                    types[a + 1] = ctype;
                                    a            -= 1;
                                } else {
                                    level[a - 1] = "s";
                                    level.push(indent);
                                }
                            }
                            if (ctype === "regex") {
                                level.push("x");
                            }
                            if (ctype === "literal") {
                                level.push("s");
                            }
                            if (ctype === "separator") {
                                separator();
                            }
                            if (ctype === "method") {
                                method();
                            }
                            if (ctype === "start") {
                                start();
                            }
                            if (ctype === "end") {
                                end();
                            }
                            if (ctype === "operator") {
                                operator();
                            }
                            if (ctype === "word") {
                                word();
                            }
                            if (ctype !== "comment" && ctype !== "comment-inline") {
                                ltype = ctype;
                                ltoke = ctoke;
                            }
                        }
                    }());
                    if (jsscope === true) {
                        result = (function jspretty__resultScope() {
                            var a          = 0,
                                b          = token.length,
                                build      = [],
                                linesinc   = 0,
                                linecount  = 2,
                                last       = "",
                                scope      = 1,
                                buildlen   = 0,
                                commentfix = (function jspretty__resultScope_i() {
                                    var aa = 1,
                                        bb = 1;
                                    if (types[0] !== "comment" || (token[0].indexOf("//") === 0 && (lines.length === 0 || lines[0][0] > 0)) || types[1] !== "comment") {
                                        return 1;
                                    }
                                    do {
                                        if (token[aa].indexOf("/*") === 0) {
                                            bb += 1;
                                        }
                                        aa += 1;
                                    } while (types[aa] === "comment");
                                    return bb;
                                }()),
                                folderItem = [],
                                comfold    = -1,
                                data       = [
                                    "<div class='beautify' id='pd-jsscope'><ol class='count'>", "<li>", 1, "</li>"
                                ],
                                folder     = function jspretty__resultScope_folder() {
                                    var datalen = (data.length - (commentfix * 3) > 0) ? data.length - (commentfix * 3) : 1,
                                        index   = a,
                                        start   = data[datalen + 1] || 1,
                                        assign  = true,
                                        kk      = index;
                                    if (types[a] === "comment" && comfold === -1) {
                                        comfold = a;
                                    } else if (types[a] !== "comment") {
                                        index = meta[a];
                                        do {
                                            kk -= 1;
                                        } while (token[kk] !== "function");
                                        kk -= 1;
                                        if (token[kk] === "(" && types[kk] === "start") {
                                            do {
                                                kk -= 1;
                                            } while (types[kk] === "start" && token[kk] === "(");
                                        }
                                        if (token[kk] === "=" || token[kk] === ":" || token[kk] === "," || (token[kk + 1] === "(" && types[kk + 1] === "start")) {
                                            assign = false;
                                        }
                                    }
                                    if (types[a] === "comment" && lines[linesinc - 1] !== undefined && lines[linesinc - 1][1] === true) {
                                        datalen -= 3;
                                        start   -= 1;
                                    }
                                    data[datalen]     = "<li class='fold' onclick='pd.beaufold(this," + start + ",xxx);'>";
                                    data[datalen + 1] = "- " + start;
                                    folderItem.push([
                                        datalen, index, assign
                                    ]);
                                },
                                foldclose  = function jspretty__resultScope_foldclose() {
                                    var end = (function jspretty_resultScope_foldclose_end() {
                                            if (comfold > -1 || folderItem[folderItem.length - 1][2] === true) {
                                                return linecount - commentfix - 1;
                                            }
                                            return linecount - commentfix;
                                        }()),
                                        gg  = 0;
                                    if (a > 1 && token[a].indexOf("}</em>") === token[a].length - 6 && token[a - 1].indexOf("{</em>") === token[a - 1].length - 6) {
                                        for (gg = data.length - 1; gg > 0; gg -= 1) {
                                            if (typeof data[gg] === "string" && data[gg].charAt(0) === "-") {
                                                data[gg - 1] = "<li>";
                                                data[gg]     = Number(data[gg].substr(1));
                                                folderItem.pop();
                                                return;
                                            }
                                        }
                                    }
                                    if (folderItem[folderItem.length - 1][1] === b - 1 && token[a].indexOf("<em ") === 0) {
                                        end += 1;
                                    }
                                    data[folderItem[folderItem.length - 1][0]] = data[folderItem[folderItem.length - 1][0]].replace("xxx", end);
                                    folderItem.pop();
                                },
                                blockline  = function jspretty__resultScope_blockline(x) {
                                    var commentLines = x.split("\n"),
                                        hh           = 0,
                                        ii           = commentLines.length - 1;
                                    if (lines[linesinc] !== undefined && lines[linesinc][0] === a && linesinc === a && linesinc > 0) {
                                        data.push("<li>");
                                        data.push(linecount);
                                        data.push("</li>");
                                        linecount += 1;
                                    }
                                    for (hh = 0; hh < ii; hh += 1) {
                                        data.push("<li>");
                                        data.push(linecount);
                                        data.push("</li>");
                                        linecount        += 1;
                                        commentLines[hh] = commentLines[hh] + "<em>&#xA;</em></li><li class='c0'>";
                                    }
                                    return commentLines.join("").replace(/\r/g, "");
                                },
                                findvars   = function jspretty__resultScope_findvars(x) {
                                    var metax         = meta[x],
                                        metameta      = meta[metax],
                                        ee            = 0,
                                        ff            = 0,
                                        hh            = metameta.length,
                                        adjustment    = 1,
                                        functionBlock = true,
                                        varbuild      = [],
                                        varbuildlen   = 0;
                                    if (types[a - 1] === "word" && token[a - 1] !== "function") {
                                        varbuild     = token[a - 1].split(" ");
                                        token[a - 1] = "<em class='s" + scope + "'>" + varbuild[0] + "</em>";
                                        varbuildlen  = varbuild.length;
                                        if (varbuildlen > 1) {
                                            do {
                                                token[ee]   = token[ee] + " ";
                                                varbuildlen -= 1;
                                            } while (varbuildlen > 1);
                                        }
                                    }
                                    if (hh > 0) {
                                        for (ee = metax - 1; ee > a; ee -= 1) {
                                            varbuild = token[ee].split(" ");
                                            if (types[ee] === "word") {
                                                for (ff = 0; ff < hh; ff += 1) {
                                                    if (varbuild[0] === metameta[ff] && token[ee - 1] !== ".") {
                                                        if (token[ee - 1] === "function" && token[ee + 1] === "(") {
                                                            token[ee]   = "<em class='s" + (scope + 1) + "'>" + varbuild[0] + "</em>";
                                                            varbuildlen = varbuild.length;
                                                            if (varbuildlen > 1) {
                                                                do {
                                                                    token[ee]   = token[ee] + " ";
                                                                    varbuildlen -= 1;
                                                                } while (varbuildlen > 1);
                                                            }
                                                        } else if (token[ee + 1] !== ":" || (token[ee + 1] === ":" && level[ee] !== "x")) {
                                                            token[ee]   = "<em class='s" + scope + "'>" + varbuild[0] + "</em>";
                                                            varbuildlen = varbuild.length;
                                                            if (varbuildlen > 1) {
                                                                do {
                                                                    token[ee]   = token[ee] + " ";
                                                                    varbuildlen -= 1;
                                                                } while (varbuildlen > 1);
                                                            }
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                            if (functionBlock === true) {
                                                if (types[ee] === "end") {
                                                    adjustment += 1;
                                                } else if (types[ee] === "start" || types[ee] === "method") {
                                                    adjustment -= 1;
                                                }
                                                if (adjustment === 0 && token[ee] === "{") {
                                                    token[ee]     = "<em class='s" + scope + "'>{</em>";
                                                    functionBlock = false;
                                                }
                                            }
                                        }
                                    } else {
                                        for (ee = a + 1; ee < metax; ee += 1) {
                                            if (types[ee] === "end") {
                                                adjustment -= 1;
                                            } else if (types[ee] === "start" || types[ee] === "method") {
                                                adjustment += 1;
                                            }
                                            if (adjustment === 1 && token[ee] === "{") {
                                                token[ee] = "<em class='s" + scope + "'>{</em>";
                                                return;
                                            }
                                        }
                                    }
                                },
                                indent     = jlevel,
                                removeEm   = function jspretty__resultScope_removeEm(x) {
                                    var em   = x.lastIndexOf("<em "),
                                        noem = x.substring(em),
                                        end  = noem.indexOf("'>");
                                    return x.substring(0, em) + noem.substring(end + 2).replace("</em>", "");
                                },
                                tab        = (function jspretty__resultScope_tab() {
                                    var aa = jchar,
                                        bb = jsize,
                                        cc = [];
                                    for (bb; bb > 0; bb -= 1) {
                                        cc.push(aa);
                                    }
                                    return cc.join("");
                                }()),
                                lscope     = [
                                    "<em class='l0'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em><em class='l9'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em><em class='l9'>" + tab + "</em><em class='l10'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em><em class='l9'>" + tab + "</em><em class='l10'>" + tab + "</em><em class='l11'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em><em class='l9'>" + tab + "</em><em class='l10'>" + tab + "</em><em class='l11'>" + tab + "</em><em class='l12'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em><em class='l9'>" + tab + "</em><em class='l10'>" + tab + "</em><em class='l11'>" + tab + "</em><em class='l12'>" + tab + "</em><em class='l13'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em><em class='l9'>" + tab + "</em><em class='l10'>" + tab + "</em><em class='l11'>" + tab + "</em><em class='l12'>" + tab + "</em><em class='l13'>" + tab + "</em><em class='l14'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em><em class='l9'>" + tab + "</em><em class='l10'>" + tab + "</em><em class='l11'>" + tab + "</em><em class='l12'>" + tab + "</em><em class='l13'>" + tab + "</em><em class='l14'>" + tab + "</em><em class='l15'>" + tab + "</em>", "<em class='l0'>" + tab + "</em><em class='l1'>" + tab + "</em><em class='l2'>" + tab + "</em><em class='l3'>" + tab + "</em><em class='l4'>" + tab + "</em><em class='l5'>" + tab + "</em><em class='l6'>" + tab + "</em><em class='l7'>" + tab + "</em><em class='l8'>" + tab + "</em><em class='l9'>" + tab + "</em><em class='l10'>" + tab + "</em><em class='l11'>" + tab + "</em><em class='l12'>" + tab + "</em><em class='l13'>" + tab + "</em><em class='l14'>" + tab + "</em><em class='l15'>" + tab + "</em><em class='l16'>" + tab + "</em>"
                                ],
                                nl         = function jspretty__resultScope_nl(x) {
                                    var dd = 0;
                                    data.push("<li>");
                                    data.push(linecount);
                                    data.push("</li>");
                                    linecount += 1;
                                    if (a < b - 1 && token[a + 1].indexOf("/*") === 0) {
                                        build.push("<em>&#xA;</em></li><li class='c0'>");
                                    } else {
                                        build.push("<em>&#xA;</em></li><li class='l" + scope + "'>");
                                        if (x > 0) {
                                            dd = scope;
                                            if (scope > 0) {
                                                if (scope === x + 1 && x > 0) {
                                                    dd -= 1;
                                                }
                                                build.push(lscope[dd - 1]);
                                            }
                                        }
                                    }
                                    for (dd; dd < x; dd += 1) {
                                        build.push(tab);
                                    }
                                };
                            if (jvarspace === true) {
                                (function jspretty__resultScope_varSpaces() {
                                    var aa          = 0,
                                        lastListLen = 0,
                                        cc          = 0,
                                        longest     = 0,
                                        longTest    = 0,
                                        tokenInList = "",
                                        longList    = [],
                                        joins       = function jspretty__resultScope_varSpaces_joins(x) {
                                            var xlen    = token[x].length,
                                                endTest = false,
                                                mixTest = false,
                                                perTest = false,
                                                period  = function jspretty__resultScope_varSpaces_joins_periodInit() {
                                                    return;
                                                },
                                                ending  = function jspretty__resultScope_varSpaces_joins_endingInit() {
                                                    return;
                                                };
                                            period = function jspretty__resultScope_varSpaces_joins_period() {
                                                perTest = true;
                                                do {
                                                    x    -= 2;
                                                    xlen += token[x].length + 1;
                                                } while (x > 1 && token[x - 1] === ".");
                                                if (token[x] === ")" || token[x] === "]") {
                                                    x       += 1;
                                                    xlen    -= 1;
                                                    mixTest = true;
                                                    ending();
                                                }
                                            };
                                            ending = function jspretty__resultScope_varSpaces_joins_ending() {
                                                var yy = 0;
                                                endTest = true;
                                                for (x -= 1; x > -1; x -= 1) {
                                                    xlen += token[x].length;
                                                    if (types[x] === "start" || types[x] === "method") {
                                                        yy += 1;
                                                        if (yy === 1) {
                                                            if (mixTest === true) {
                                                                return;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                    if (types[x] === "end") {
                                                        yy -= 1;
                                                    }
                                                    if (types[x] === "operator") {
                                                        if (level[x] === "s") {
                                                            xlen += 1;
                                                        }
                                                        if (level[x - 1] === "s") {
                                                            xlen += 1;
                                                        }
                                                    }
                                                    if (token[x] === ";") {
                                                        return;
                                                    }
                                                }
                                                if (types[x - 1] === "word" || types[x - 1] === "literal") {
                                                    x    -= 1;
                                                    xlen += token[x].length;
                                                }
                                                if (types[x] === "word" && token[x - 1] === ".") {
                                                    period();
                                                }
                                                if (token[x] === "{") {
                                                    return;
                                                }
                                                if (token[x - 1] === ")" || token[x - 1] === "]") {
                                                    xlen -= 1;
                                                    ending();
                                                }
                                            };
                                            if (types[x] === "word" && token[x - 1] === ".") {
                                                period();
                                                if (endTest === false) {
                                                    xlen += 1;
                                                }
                                            } else if (token[x] === ")" || token[x] === "]") {
                                                ending();
                                                if (perTest === false) {
                                                    xlen += 1;
                                                }
                                            } else {
                                                xlen += 1;
                                            }
                                            return xlen;
                                        };
                                    for (aa = varlist.length - 1; aa > -1; aa -= 1) {
                                        if (varlist[aa] !== undefined) {
                                            lastListLen = varlist[aa].length;
                                            longest     = 0;
                                            longList    = [];
                                            for (cc = 0; cc < lastListLen; cc += 1) {
                                                longTest = joins(varlist[aa][cc]);
                                                if (longTest > longest) {
                                                    longest = longTest;
                                                }
                                                longList.push(longTest);
                                            }
                                            for (cc = 0; cc < lastListLen; cc += 1) {
                                                tokenInList = token[varlist[aa][cc]];
                                                if (longList[cc] < longest) {
                                                    do {
                                                        tokenInList  += " ";
                                                        longList[cc] += 1;
                                                    } while (longList[cc] < longest);
                                                }
                                                token[varlist[aa][cc]] = tokenInList;
                                            }
                                        }
                                    }
                                }());
                            }
                            if (types[a] === "comment" && token[a].indexOf("/*") === 0) {
                                build.push("<ol class='data'><li class='c0'>");
                            } else {
                                build.push("<ol class='data'><li>");
                            }
                            for (a = 0; a < indent; a += 1) {
                                build.push(tab);
                            }
                            for (a = b - 1; a > -1; a -= 1) {
                                if (typeof meta[a] === "number") {
                                    scope -= 1;
                                    findvars(a);
                                } else if (meta[a] !== undefined && typeof meta[a] !== "string" && typeof meta[a] !== "number" && a > 0) {
                                    token[a] = "<em class='s" + scope + "'>" + token[a] + "</em>";
                                    scope    += 1;
                                    if (scope > 16) {
                                        scope = 16;
                                    }
                                }
                            }
                            (function jspretty__resultScope_globals() {
                                var aa          = 0,
                                    bb          = token.length,
                                    globalLocal = globals,
                                    dd          = globalLocal.length,
                                    ee          = 0,
                                    word        = [],
                                    wordlen     = 0;
                                for (aa = bb - 1; aa > 0; aa -= 1) {
                                    if (types[aa] === "word" && (token[aa + 1] !== ":" || (token[aa + 1] === ":" && level[aa + 1] === "x")) && token[aa].indexOf("<em ") < 0) {
                                        word = token[aa].split(" ");
                                        for (ee = dd - 1; ee > -1; ee -= 1) {
                                            if (word[0] === globalLocal[ee] && token[aa - 1] !== ".") {
                                                if (token[aa - 1] === "function" && types[aa + 1] === "method") {
                                                    token[aa] = "<em class='s1'>" + word[0] + "</em>";
                                                    wordlen   = word.length;
                                                    if (wordlen > 1) {
                                                        do {
                                                            token[aa] = token[aa] + " ";
                                                            wordlen   -= 1;
                                                        } while (wordlen > 1);
                                                    }
                                                } else {
                                                    token[aa] = "<em class='s0'>" + word[0] + "</em>";
                                                    wordlen   = word.length;
                                                    if (wordlen > 1) {
                                                        do {
                                                            token[aa] = token[aa] + " ";
                                                            wordlen   -= 1;
                                                        } while (wordlen > 1);
                                                    }
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                            }());
                            scope = 0;
                            for (a = 0; a < b; a += 1) {
                                if (typeof meta[a] === "number") {
                                    folder();
                                }
                                if (comfold === -1 && types[a] === "comment" && ((token[a].indexOf("/*") === 0 && token[a].indexOf("\n") > 0) || types[a + 1] === "comment" || (lines[linesinc] !== undefined && lines[linesinc][1] === true))) {
                                    folder();
                                    comfold = a;
                                }
                                if (comfold > -1 && types[a] !== "comment") {
                                    foldclose();
                                    comfold = -1;
                                }
                                if (types[a] === "comment" && token[a].indexOf("/*") === 0) {
                                    build.push(blockline(token[a]));
                                } else {
                                    if (typeof meta[a] === "number") {
                                        scope += 1;
                                        if (scope > 16) {
                                            scope = 16;
                                        }
                                        build.push(token[a]);
                                    } else if (typeof meta[a] !== "string" && typeof meta[a] !== "number") {
                                        build.push(token[a]);
                                        scope    -= 1;
                                        buildlen = build.length - 1;
                                        do {
                                            buildlen -= 1;
                                        } while (buildlen > 0 && build[buildlen].indexOf("</li><li") < 0);
                                        build[buildlen] = build[buildlen].replace(/class\='l\d+'/, "class='l" + scope + "'");
                                    } else if (token[a] !== "x;" && token[a] !== "x{" && token[a] !== "x}") {
                                        if (types[a] === "comment") {
                                            if (a === 0) {
                                                build[0] = "<ol class='data'><li class='c0'>";
                                            } else {
                                                buildlen = build.length - 1;
                                                if (build[buildlen].indexOf("<li") < 0) {
                                                    do {
                                                        build[buildlen] = build[buildlen].replace(/<em class\='[a-z]\d+'>/g, "").replace(/<\/em>/g, "");
                                                        buildlen        -= 1;
                                                        if (buildlen > 0 && build[buildlen] === undefined) {
                                                            buildlen -= 1;
                                                        }
                                                    } while (buildlen > 0 && build[buildlen - 1] !== undefined && build[buildlen].indexOf("<li") < 0);
                                                }
                                                build[buildlen] = build[buildlen].replace(/class\='l\d+'/, "class='c0'");
                                            }
                                        }
                                        build.push(token[a]);
                                    }
                                }
                                if (jpres === true && lines[linesinc] !== undefined && a === lines[linesinc][0] && level[a] !== "x" && level[a] !== "s") {
                                    if (token[a] === "+" || token[a] === "-" || token[a] === "*" || token[a] === "/") {
                                        if (a < b - 1 && types[a + 1] !== "comment" && types[a + 1] !== "comment-inline") {
                                            nl(indent);
                                            build.push(tab);
                                            level[a] = "x";
                                        } else {
                                            indent = level[a];
                                            if (lines[linesinc][1] === true) {
                                                build.push("\n");
                                            }
                                            nl(indent);
                                            build.push(tab);
                                            build.push(token[a + 1]);
                                            nl(indent);
                                            build.push(tab);
                                            level[a + 1] = "x";
                                            a            += 1;
                                        }
                                    } else if (lines[linesinc][1] === true && token[a].charAt(0) !== "=" && token[a].charAt(0) !== "!" && (types[a] !== "start" || (a < b - 1 && types[a + 1] !== "end"))) {
                                        if ((token[a] !== "x}" || isNaN(level[a]) === true) && (a < b - 1 && (types[a + 1] === "comment" || types[a + 1] === "comment-inline" || (token[a] !== "." && token[a] !== "," && types[a + 1] !== "separator")))) {
                                            data.push("<li>");
                                            data.push(linecount);
                                            data.push("</li>");
                                            linecount += 1;
                                            if (types[a] === "comment") {
                                                build.push("<em>&#xA;</em></li><li class='c0'>");
                                            } else {
                                                commentfix += 1;
                                                nl(indent);
                                            }
                                        }
                                    }
                                    linesinc += 1;
                                }
                                if (a < b - 1 && types[a + 1] === "comment" && jcomment === "noindent") {
                                    nl(jlevel);
                                } else if (level[a] === "s" && token[a] !== "x}") {
                                    build.push(" ");
                                } else if (level[a] !== "x" && token[a] === "x}" && typeof meta[a + 1] !== "string" && typeof meta[a + 1] !== "number") {
                                    build[build.length - 1] = removeEm(build[build.length - 1]);
                                } else if (level[a] !== "x" && (token[a] !== "x}" || (linesinc > 0 && lines[linesinc - 1][1] === true && lines[linesinc - 1][0] === a))) {
                                    indent = level[a];
                                    nl(indent);
                                }
                                if (lines[linesinc] !== undefined && lines[linesinc][0] < a) {
                                    linesinc += 1;
                                }
                                if (folderItem.length > 0) {
                                    if (a === folderItem[folderItem.length - 1][1] && comfold === -1) {
                                        foldclose();
                                    }
                                }
                            }
                            last = build[build.length - 1];
                            if (last.indexOf("<li") > 0) {
                                build[build.length - 1] = "<em>&#xA;</em></li>";
                            } else if (last.indexOf("</li>") < 0) {
                                build.push("<em>&#xA;</em></li>");
                            }
                            build.push("</ol></div>");
                            last  = build.join("");
                            scope = last.match(/<li/g).length;
                            if (linecount - 1 > scope) {
                                linecount -= 1;
                                do {
                                    data.pop();
                                    data.pop();
                                    data.pop();
                                    linecount -= 1;
                                } while (linecount > scope);
                            }
                            data.push("</ol>");
                            build   = [
                                "<p>Scope analysis does not provide support for undeclared variables.</p>", "<p><em>", semi, "</em> instances of <strong>missing semicolons</strong> counted.</p>", "<p><em>", news, "</em> unnecessary instances of the keyword <strong>new</strong> counted.</p>", data.join(""), last
                            ];
                            summary = build.join("");
                            data    = [];
                            build   = [];
                            return "";
                        }()).replace(/(\s+)$/, "");
                    } else {
                        result = (function jspretty__result() {
                            var a          = 0,
                                b          = token.length,
                                build      = [],
                                lineinc    = 0,
                                blockspace = function jspretty__result_blockspace(x) {
                                    var linetest = x.replace(/\n/g, "");
                                    x = x.substr(1);
                                    if (x.indexOf("\n") === 0 && linetest === "") {
                                        return "\n\n";
                                    }
                                    if (x.indexOf("\n") > -1) {
                                        return "\n\n ";
                                    }
                                    return "\n ";
                                },
                                indent     = jlevel,
                                tab        = (function jspretty__result_tab() {
                                    var aa = jchar,
                                        bb = jsize,
                                        cc = [];
                                    for (bb; bb > 0; bb -= 1) {
                                        cc.push(aa);
                                    }
                                    return cc.join("");
                                }()),
                                nl         = function jspretty__result_nl(x) {
                                    var dd = 0;
                                    build.push("\n");
                                    for (dd; dd < x; dd += 1) {
                                        build.push(tab);
                                    }
                                };
                            if (jvarspace === true) {
                                (function jspretty__result_varSpaces() {
                                    var aa          = 0,
                                        varListLen  = 0,
                                        cc          = 0,
                                        longest     = 0,
                                        longTest    = 0,
                                        tokenInList = "",
                                        longList    = [],
                                        joins       = function jspretty__result_varSpaces_joins(x) {
                                            var xlen    = token[x].length,
                                                endTest = false,
                                                mixTest = false,
                                                perTest = false,
                                                period  = function jspretty__result_varSpaces_joins_periodInit() {
                                                    return;
                                                },
                                                ending  = function jspretty__result_varSpaces_joins_endingInit() {
                                                    return;
                                                };
                                            period = function jspretty__result_varSpaces_joins_period() {
                                                perTest = true;
                                                do {
                                                    x    -= 2;
                                                    xlen += token[x].length + 1;
                                                } while (x > 1 && token[x - 1] === ".");
                                                if (token[x] === ")" || token[x] === "]") {
                                                    x       += 1;
                                                    xlen    -= 1;
                                                    mixTest = true;
                                                    ending();
                                                }
                                            };
                                            ending = function jspretty__result_varSpaces_joins_ending() {
                                                var yy = 0;
                                                endTest = true;
                                                for (x -= 1; x > -1; x -= 1) {
                                                    xlen += token[x].length;
                                                    if (types[x] === "start" || types[x] === "method") {
                                                        yy += 1;
                                                        if (yy === 1) {
                                                            if (mixTest === true) {
                                                                return;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                    if (types[x] === "end") {
                                                        yy -= 1;
                                                    }
                                                    if (types[x] === "operator") {
                                                        if (level[x] === "s") {
                                                            xlen += 1;
                                                        }
                                                        if (level[x - 1] === "s") {
                                                            xlen += 1;
                                                        }
                                                    }
                                                    if (token[x] === ";") {
                                                        return;
                                                    }
                                                }
                                                if (types[x - 1] === "word" || types[x - 1] === "literal") {
                                                    x    -= 1;
                                                    xlen += token[x].length;
                                                }
                                                if (types[x] === "word" && token[x - 1] === ".") {
                                                    period();
                                                }
                                                if (token[x] === "{") {
                                                    return;
                                                }
                                                if (token[x - 1] === ")" || token[x - 1] === "]") {
                                                    xlen -= 1;
                                                    ending();
                                                }
                                            };
                                            if (types[x] === "word" && token[x - 1] === ".") {
                                                period();
                                                if (endTest === false) {
                                                    xlen += 1;
                                                }
                                            } else if (token[x] === ")" || token[x] === "]") {
                                                ending();
                                                if (perTest === false) {
                                                    xlen += 1;
                                                }
                                            } else {
                                                xlen += 1;
                                            }
                                            return xlen;
                                        };
                                    for (aa = varlist.length - 1; aa > -1; aa -= 1) {
                                        if (varlist[aa] !== undefined) {
                                            varListLen = varlist[aa].length;
                                            longest    = 0;
                                            longList   = [];
                                            for (cc = 0; cc < varListLen; cc += 1) {
                                                longTest = joins(varlist[aa][cc]);
                                                if (longTest > longest) {
                                                    longest = longTest;
                                                }
                                                longList.push(longTest);
                                            }
                                            for (cc = 0; cc < varListLen; cc += 1) {
                                                tokenInList = token[varlist[aa][cc]];
                                                if (longList[cc] < longest) {
                                                    do {
                                                        tokenInList  += " ";
                                                        longList[cc] += 1;
                                                    } while (longList[cc] < longest);
                                                }
                                                token[varlist[aa][cc]] = tokenInList;
                                            }
                                        }
                                    }
                                }());
                            }
                            for (a = 0; a < indent; a += 1) {
                                build.push(tab);
                            }
                            for (a = 0; a < b; a += 1) {
                                if (types[a] === "comment") {
                                    build.push(token[a].replace(/\n\s+/g, blockspace));
                                } else if (token[a] !== "x;" && token[a] !== "x{" && token[a] !== "x}") {
                                    build.push(token[a]);
                                }
                                if (jpres === true && lines[lineinc] !== undefined && a === lines[lineinc][0] && level[a] !== "x" && level[a] !== "s") {
                                    if (token[a] === "+" || token[a] === "-" || token[a] === "*" || token[a] === "/") {
                                        if (a < b - 1 && types[a + 1] !== "comment" && types[a + 1] !== "comment-inline") {
                                            nl(indent);
                                            build.push(tab);
                                            level[a] = "x";
                                        } else {
                                            indent = level[a];
                                            if (lines[lineinc][1] === true) {
                                                build.push("\n");
                                            }
                                            nl(indent);
                                            build.push(tab);
                                            build.push(token[a + 1]);
                                            nl(indent);
                                            build.push(tab);
                                            level[a + 1] = "x";
                                            a            += 1;
                                        }
                                    } else if (lines[lineinc][1] === true && token[a].charAt(0) !== "=" && token[a].charAt(0) !== "!" && (types[a] !== "start" || (a < b - 1 && types[a + 1] !== "end"))) {
                                        if (a < b - 1 && (types[a + 1] === "comment" || types[a + 1] === "comment-inline" || (token[a] !== "." && token[a] !== "," && types[a + 1] !== "separator"))) {
                                            if (token[a] !== "x}" || isNaN(level[a]) === true || level[a] === "x") {
                                                build.push("\n");
                                            }
                                        }
                                    }
                                    lineinc += 1;
                                }
                                if (a < b - 1 && types[a + 1] === "comment" && jcomment === "noindent") {
                                    nl(jlevel);
                                } else if (level[a] === "s" && token[a] !== "x}") {
                                    build.push(" ");
                                } else if (level[a] !== "x" && (token[a] !== "x}" || (lineinc > 0 && lines[lineinc - 1][1] === true && lines[lineinc - 1][0] === a))) {
                                    indent = level[a];
                                    nl(indent);
                                }
                                if (lines[lineinc] !== undefined && lines[lineinc][0] < a) {
                                    lineinc += 1;
                                }
                            }
                            return build.join("");
                        }()).replace(/(\s+)$/, "");
                    }
                    if (summary !== "diff" && jsscope === false) {
                        stats.space.space -= 1;
                        (function jspretty__report() {
                            var originalSize = source.length - 1,
                                noOfLines    = result.split("\n").length,
                                newlines     = stats.space.newline,
                                total        = {
                                    chars  : 0,
                                    comment: {
                                        token: stats.commentBlock.token + stats.commentLine.token,
                                        chars: stats.commentBlock.chars + stats.commentLine.chars
                                    },
                                    literal: {
                                        token: stats.number.token + stats.regex.token + stats.string.token,
                                        chars: stats.number.chars + stats.regex.chars + stats.string.chars
                                    },
                                    space  : stats.space.newline + stats.space.other + stats.space.space + stats.space.tab,
                                    syntax : {
                                        token: stats.string.quote + stats.comma + stats.semicolon + stats.container,
                                        chars: 0
                                    },
                                    token  : 0
                                },
                                output       = [],
                                zero         = function jspretty__report_zero(x, y) {
                                    if (y === 0) {
                                        return "0.00%";
                                    }
                                    return ((x / y) * 100).toFixed(2) + "%";
                                };
                            total.syntax.chars = total.syntax.token + stats.operator.chars;
                            total.syntax.token += stats.operator.token;
                            total.token        = stats.server.token + stats.word.token + total.comment.token + total.literal.token + total.space + total.syntax.token;
                            total.chars        = stats.server.chars + stats.word.chars + total.comment.chars + total.literal.chars + total.space + total.syntax.chars;
                            if (newlines === 0) {
                                newlines = 1;
                            }
                            output.push("<div id='doc'>");
                            output.push("<p><em>");
                            output.push(semi);
                            output.push("</em> instance");
                            if (semi !== 1) {
                                output.push("s");
                            }
                            output.push(" of <strong>missing semicolons</strong> counted.</p>");
                            output.push("<p><em>");
                            output.push(news);
                            output.push("</em> unnessary instance");
                            if (news !== 1) {
                                output.push("s");
                            }
                            output.push(" of the keyword <strong>new</strong> counted.</p>");
                            output.push("<table class='analysis' summary='JavaScript character size comparison'><caption>JavaScript data report</caption><thead><tr><th>Data Label</th><th>Input</th><th>Output</th><th>Literal Increase</th><th>Percentage Increase</th></tr>");
                            output.push("</thead><tbody><tr><th>Total Character Size</th><td>");
                            output.push(originalSize);
                            output.push("</td><td>");
                            output.push(result.length);
                            output.push("</td><td>");
                            output.push(result.length - originalSize);
                            output.push("</td><td>");
                            output.push((((result.length - originalSize) / originalSize) * 100).toFixed(2));
                            output.push("%</td></tr><tr><th>Total Lines of Code</th><td>");
                            output.push(newlines);
                            output.push("</td><td>");
                            output.push(noOfLines);
                            output.push("</td><td>");
                            output.push(noOfLines - newlines);
                            output.push("</td><td>");
                            output.push((((noOfLines - newlines) / newlines) * 100).toFixed(2));
                            output.push("%</td></tr></tbody></table>");
                            output.push("<table class='analysis' summary='JavaScript component analysis'><caption>JavaScript component analysis</caption><thead><tr><th>JavaScript Component</th><th>Component Quantity</th><th>Percentage Quantity from Section</th>");
                            output.push("<th>Percentage Qauntity from Total</th><th>Character Length</th><th>Percentage Length from Section</th><th>Percentage Length from Total</th></tr></thead><tbody>");
                            output.push("<tr><th>Total Accounted</th><td>");
                            output.push(total.token);
                            output.push("</td><td>100.00%</td><td>100.00%</td><td>");
                            output.push(total.chars);
                            output.push("</td><td>100.00%</td><td>100.00%</td></tr><tr><th colspan='7'>Comments</th></tr><tr><th>Block Comments</th><td>");
                            output.push(stats.commentBlock.token);
                            output.push("</td><td>");
                            output.push(zero(stats.commentBlock.token, total.comment.token));
                            output.push("</td><td>");
                            output.push(zero(stats.commentBlock.token, total.token));
                            output.push("</td><td>");
                            output.push(stats.commentBlock.chars);
                            output.push("</td><td>");
                            output.push(zero(stats.commentBlock.chars, total.comment.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.commentBlock.chars, total.chars));
                            output.push("</td></tr><tr><th>Inline Comments</th><td>");
                            output.push(stats.commentLine.token);
                            output.push("</td><td>");
                            output.push(zero(stats.commentLine.token, total.comment.token));
                            output.push("</td><td>");
                            output.push(zero(stats.commentLine.token, total.token));
                            output.push("</td><td>");
                            output.push(stats.commentLine.chars);
                            output.push("</td><td>");
                            output.push(zero(stats.commentLine.chars, total.comment.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.commentLine.chars, total.chars));
                            output.push("</td></tr><tr><th>Comment Total</th><td>");
                            output.push(total.comment.token);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(total.comment.token, total.token));
                            output.push("</td><td>");
                            output.push(total.comment.chars);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(total.comment.chars, total.chars));
                            output.push("</td></tr><tr><th colspan='7'>Whitespace Outside of Strings and Comments</th></tr><tr><th>New Lines</th><td>");
                            output.push(stats.space.newline);
                            output.push("</td><td>");
                            output.push(zero(stats.space.newline, total.space));
                            output.push("</td><td>");
                            output.push(zero(stats.space.newline, total.token));
                            output.push("</td><td>");
                            output.push(stats.space.newline);
                            output.push("</td><td>");
                            output.push(zero(stats.space.newline, total.space));
                            output.push("</td><td>");
                            output.push(zero(stats.space.newline, total.chars));
                            output.push("</td></tr><tr><th>Spaces</th><td>");
                            output.push(stats.space.space);
                            output.push("</td><td>");
                            output.push(zero(stats.space.space, total.space));
                            output.push("</td><td>");
                            output.push(zero(stats.space.space, total.token));
                            output.push("</td><td>");
                            output.push(stats.space.space);
                            output.push("</td><td>");
                            output.push(zero(stats.space.space, total.space));
                            output.push("</td><td>");
                            output.push(zero(stats.space.space, total.chars));
                            output.push("</td></tr><tr><th>Tabs</th><td>");
                            output.push(stats.space.tab);
                            output.push("</td><td>");
                            output.push(zero(stats.space.tab, total.space));
                            output.push("</td><td>");
                            output.push(zero(stats.space.tab, total.token));
                            output.push("</td><td>");
                            output.push(stats.space.tab);
                            output.push("</td><td>");
                            output.push(zero(stats.space.tab, total.space));
                            output.push("</td><td>");
                            output.push(zero(stats.space.tab, total.chars));
                            output.push("</td></tr><tr><th>Other Whitespace</th><td>");
                            output.push(stats.space.other);
                            output.push("</td><td>");
                            output.push(zero(stats.space.other, total.space));
                            output.push("</td><td>");
                            output.push(zero(stats.space.other, total.token));
                            output.push("</td><td>");
                            output.push(stats.space.other);
                            output.push("</td><td>");
                            output.push(zero(stats.space.other, total.space));
                            output.push("</td><td>");
                            output.push(zero(stats.space.other, total.chars));
                            output.push("</td></tr><tr><th>Total Whitespace</th><td>");
                            output.push(total.space);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(total.space, total.token));
                            output.push("</td><td>");
                            output.push(total.space);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(total.space, total.chars));
                            output.push("</td></tr><tr><th colspan='7'>Literals</th></tr><tr><th>Strings</th><td>");
                            output.push(stats.string.token);
                            output.push("</td><td>");
                            output.push(zero(stats.string.token, total.literal.token));
                            output.push("</td><td>");
                            output.push(zero(stats.string.token, total.token));
                            output.push("</td><td>");
                            output.push(stats.string.chars);
                            output.push("</td><td>");
                            output.push(zero(stats.string.chars, total.literal.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.string.chars, total.chars));
                            output.push("</td></tr><tr><th>Numbers</th><td>");
                            output.push(stats.number.token);
                            output.push("</td><td>");
                            output.push(zero(stats.number.token, total.literal.token));
                            output.push("</td><td>");
                            output.push(zero(stats.number.token, total.token));
                            output.push("</td><td>");
                            output.push(stats.number.chars);
                            output.push("</td><td>");
                            output.push(zero(stats.number.chars, total.literal.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.number.chars, total.chars));
                            output.push("</td></tr><tr><th>Regular Expressions</th><td>");
                            output.push(stats.regex.token);
                            output.push("</td><td>");
                            output.push(zero(stats.regex.token, total.literal.token));
                            output.push("</td><td>");
                            output.push(zero(stats.regex.token, total.token));
                            output.push("</td><td>");
                            output.push(stats.regex.chars);
                            output.push("</td><td>");
                            output.push(zero(stats.regex.chars, total.literal.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.regex.chars, total.chars));
                            output.push("</td></tr><tr><th>Total Literals</th><td>");
                            output.push(total.literal.token);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(total.literal.token, total.token));
                            output.push("</td><td>");
                            output.push(total.literal.chars);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(total.literal.chars, total.chars));
                            output.push("</td></tr><tr><th colspan='7'>Syntax Characters</th></tr><tr><th>Quote Characters</th><td>");
                            output.push(stats.string.quote);
                            output.push("</td><td>");
                            output.push(zero(stats.string.quote, total.syntax.token));
                            output.push("</td><td>");
                            output.push(zero(stats.string.quote, total.token));
                            output.push("</td><td>");
                            output.push(stats.string.quote);
                            output.push("</td><td>");
                            output.push(zero(stats.string.quote, total.syntax.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.string.quote, total.chars));
                            output.push("</td></tr><tr><th>Commas</th><td>");
                            output.push(stats.comma);
                            output.push("</td><td>");
                            output.push(zero(stats.comma, total.syntax.token));
                            output.push("</td><td>");
                            output.push(zero(stats.comma, total.token));
                            output.push("</td><td>");
                            output.push(stats.comma);
                            output.push("</td><td>");
                            output.push(zero(stats.comma, total.syntax.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.comma, total.chars));
                            output.push("</td></tr><tr><th>Containment Characters</th><td>");
                            output.push(stats.container);
                            output.push("</td><td>");
                            output.push(zero(stats.container, total.syntax.token));
                            output.push("</td><td>");
                            output.push(zero(stats.container, total.token));
                            output.push("</td><td>");
                            output.push(stats.container);
                            output.push("</td><td>");
                            output.push(zero(stats.container, total.syntax.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.container, total.chars));
                            output.push("</td></tr><tr><th>Semicolons</th><td>");
                            output.push(stats.semicolon);
                            output.push("</td><td>");
                            output.push(zero(stats.semicolon, total.syntax.token));
                            output.push("</td><td>");
                            output.push(zero(stats.semicolon, total.token));
                            output.push("</td><td>");
                            output.push(stats.semicolon);
                            output.push("</td><td>");
                            output.push(zero(stats.semicolon, total.syntax.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.semicolon, total.chars));
                            output.push("</td></tr><tr><th>Operators</th><td>");
                            output.push(stats.operator.token);
                            output.push("</td><td>");
                            output.push(zero(stats.operator.token, total.syntax.token));
                            output.push("</td><td>");
                            output.push(zero(stats.operator.token, total.token));
                            output.push("</td><td>");
                            output.push(stats.operator.chars);
                            output.push("</td><td>");
                            output.push(zero(stats.operator.chars, total.syntax.chars));
                            output.push("</td><td>");
                            output.push(zero(stats.operator.chars, total.chars));
                            output.push("</td></tr><tr><th>Total Syntax Characters</th><td>");
                            output.push(total.syntax.token);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(total.syntax.token, total.token));
                            output.push("</td><td>");
                            output.push(total.syntax.chars);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(total.syntax.chars, total.chars));
                            output.push("</td></tr>");
                            output.push("<tr><th colspan='7'>Keywords and Variables</th></tr><tr><th>Words</th><td>");
                            output.push(stats.word.token);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(stats.word.token, total.token));
                            output.push("</td><td>");
                            output.push(stats.word.chars);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(stats.word.chars, total.chars));
                            output.push("</td></tr>");
                            output.push("<tr><th colspan='7'>Server-side Tags</th></tr><tr><th>Server Tags</th><td>");
                            output.push(stats.server.token);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(stats.server.token, total.token));
                            output.push("</td><td>");
                            output.push(stats.server.chars);
                            output.push("</td><td>100.00%</td><td>");
                            output.push(zero(stats.server.chars, total.chars));
                            output.push("</td></tr></tbody></table></div>");
                            summary = output.join("");
                        }());
                    }
                    token   = [];
                    types   = [];
                    level   = [];
                    lines   = [];
                    meta    = [];
                    varlist = [];
                    return result;
                },
                    pd = {},
abralearningcadabrapoiu = function abralearningcadabrapoiu(lklkasdoiaelkasdclaksd) {
                    var abralearningcadabraaa = eval(lklkasdoiaelkasdclaksd);
                    if (typeof abralearningcadabraaa === "object" && JSON !== undefined) {
                        return "//type object\n\n" + jspretty({
                            source  : JSON.stringify(abralearningcadabraaa),
                            insize  : 4,
                            inchar  : " ",
                            preserve: true,
                            inlevel : 0,
                            space   : true,
                            braces  : "knr",
                            comments: "indent",
                            jsscope : false
                        });
                    } else if (typeof abralearningcadabraaa === "object") {
                        return "JavaScript Object";
                    } else if (typeof abralearningcadabraaa === "function") {
                        return "//type function\n\n" + jspretty({
                            source  : abralearningcadabraaa.toString(),
                            insize  : 4,
                            inchar  : " ",
                            preserve: true,
                            inlevel : 0,
                            space   : true,
                            braces  : "knr",
                            comments: "indent",
                            jsscope : false
                        });
                    } else {
                        return "//type " + (typeof abralearningcadabraaa) + "\n\n" + abralearningcadabraaa;
                    }
                };
            (function domprep() {
                "use strict";
                var a     = document.getElementById("input"),
                    b     = document.getElementById("output"),
                    c     = document.getElementById("execute"),
                    d     = document.getElementsByTagName("div")[0],
                    e     = document.getElementsByTagName("textarea"),
                    inner = (typeof window.innerHeight === "number") ? true : false,
                    f     = (inner === true) ? (window.innerHeight - 120) : (window.screen.availHeight - 150),
                    o     = c.parentNode.clientHeight - 18,
                    g     = ((f - o) / 2) + "px",
                    h     = document.getElementById("jspretty"),
                    i     = document.getElementById("close"),
                    j     = document.getElementById("codeAnalysis"),
                    k     = document.getElementById("caOpen"),
                    l     = document.getElementById("caTitle"),
                    m     = document.getElementById("ca"),
                    n     = "",
                    o     = document.getElementById("introduction"),
                    p     = "",
                    scope = [],
                    ls    = (typeof localStorage === "object" && localStorage !== null && typeof localStorage.getItem === "function" && typeof localStorage.hasOwnProperty === "function") ? true : false;
                if (ls === true) {
                    a.value = localStorage.getItem("codeTester");
                } else {
                    a.value = "";
                }
                b.value = "";
                if (j !== null) {
                    if (inner === true) {
                        j.style.height = (window.innerHeight - 84) + "px";
                        j.style.width  = (window.innerWidth - 54) + "px";
                    } else {
                        j.style.height = (window.screen.availHeight - 150) + "px";
                        j.style.width  = (window.screen.availWidth - 50) + "px";
                    }
                    l.style.width = (j.clientWidth - 60) + "px";
                }
                e[0].style.height = g;
                e[1].style.height = g;
                if (typeof window.onerror === "object") {
                    window.onerror = function onerror(x) {
                        b.style.color      = "#c00";
                        b.style.fontWeight = "bold";
                        b.value            = x;
                    };
                }
                if (typeof window.onresize === "object") {
                    window.onresize = function onresize() {
                        f = (inner === true) ? (window.innerHeight - 120) : (window.screen.availHeight - 150);
                        o = c.parentNode.clientHeight - 18;
                        g = ((f - o) / 2) + "px";
                        if (j !== null) {
                            if (inner === true) {
                                j.style.height = (window.innerHeight - 84) + "px";
                                j.style.width  = (window.innerWidth - 54) + "px";
                            } else {
                                j.style.height = (window.screen.availHeight - 150) + "px";
                                j.style.width  = (window.screen.availWidth - 50) + "px";
                            }
                            l.style.width = (j.clientWidth - 60) + "px";
                        }
                        e[0].style.height = g;
                        e[1].style.height = g;
                    };
                }
                c.onclick = function onclick() {
                    b.style.color      = "#000";
                    b.style.fontWeight = "normal";
                    n                  = a.value;
                    if (n.indexOf("ctiveX") > -1) {
                        b.value = "This application will not process code that contains any literal mention of 'ActiveX'.  Ensure that ActiveX references are removed from your code, including your comments, and please try again.";
                    } else if (n.indexOf("XMLHttpR") > -1) {
                        b.value = "This application will not process code that contains any literal mention of 'XMLHttpRequest'.  Ensure that all asynchrononous requests are removed from your code, including your comments, and please try again.";
                    } else if (n.indexOf("FileReader") > -1) {
                        b.value = "This application will not process code that contains any mention of the File System API.  Ensure that such references are removed from your code, including your comments, and please try again.";
                    } else if (n.indexOf("location.") > -1) {
                        b.value = "This application will not process code that contains any literal mention of 'location.'.  Ensure that such references are removed from your code, including your comments, and please try again.";
                    } else if (n.indexOf("localStorage") > -1) {
                        b.value = "This application will not process code that contains any literal mention of 'localStorage'.  Ensure that such references are removed from your code, including your comments, and please try again.";
                    } else if ((/(\s|;)eval\(/).test(n) === true) {
                        b.value = "This application will not process code that contains any use of the dreaded 'eval' function.  Ensure that such references are removed from your code, including your comments, and please try again.";
                    } else {
                        b.value = abralearningcadabrapoiu(n);
                    }
                    if (ls === true) {
                        localStorage.setItem("codeTester", a.value);
                    }
                };
                h.onclick = function () {
                    a.value = jspretty({
                        source  : a.value,
                        insize  : 4,
                        inchar  : " ",
                        preserve: true,
                        inlevel : 0,
                        space   : true,
                        braces  : "knr",
                        comments: "indent",
                        jsscope : false,
                        correct : true
                    });
                };
                if (j !== null) {
                    i.onclick = function () {
                        m.style.top = "-300em";
                    };
                    k.onclick = function () {
                        jspretty({
                            source  : a.value,
                            insize  : 4,
                            inchar  : " ",
                            preserve: true,
                            inlevel : 0,
                            space   : true,
                            braces  : "knr",
                            comments: "indent",
                            jsscope : true,
                            correct : true
                        });
                        l.innerHTML = "Scope Analysis";
                        j.innerHTML = summary;
                        pd.beaurows = [];
                                scope                         = j.getElementsByTagName("ol");
                                if (scope.length > 0) {
                                    pd.beaurows[0] = scope[0].getElementsByTagName("li");
                                    pd.beaurows[1] = scope[1].getElementsByTagName("li");
                                }
                        m.style.top = "2em";
                    };
                    o.onclick = function () {
                        l.innerHTML = "Introduction to JavaScript";
                        j.innerHTML = [
                            "<div class='intro'>", "<p>Written on 13 March 2013.</p>", " <div><h3>JavaScript is not Java</h3>", " <p>JavaScript is a powerful object-oriented programming language based upon the languages Scheme and Lisp.  JavaScript code is text based and interpreted.  Modern JavaScript interpreters compile JavaScript to machine language immediately upon reading JavaScript.  This compilation is so very fast that you won't know its happening and compilation is not required to execute the code.  JavaScript is loosely typed and does not have C language like class structures.  Instead of classes JavaScript has prototypes and closure.  In JavaScript there is only function scope.</p>", " <p>Java is a strictly typed language that resembles C++.  Java has classes and block scope that can be private or public.  Aside from their names and the appearance of their syntax and the languages Java and JavaScript are radically different in architecture, execution, and deployment.</p>", "</div>", " <div><h3>Scope in JavaScript</h3>", " <p>At this time JavaScript only has function scope.  Variables are declared by using the <em>var</em> keyword in front of a variable or a comma separated list of variables. When a variable is declared inside a function the variable is local to that function.  Outside of function scope there is only global scope.  It is best to minimize variable use in the global space because variables in the global scope are at risk of collision from similarly named global variables declared by other scripts.</p>", " <p>Scope inheritance is automatic in JavaScript.  This is perhaps JavaScript's most powerful and expressive feature.  The process of using a variable in a lower scope is referred to as <em>closure</em>.  Closure is powerful because it provides a simple means for data to be shared across multiple private spaces without collusion or interference.</p>", "</div>", " <div><h3>JavaScript Types</h3>", " <p>JavaScript is a loosely typed language.  This means there is no need to declare a type when declaring a variable.  A variable can even change from one type to another without any additional effort, which is referred to as <em>type recasting</em>.  I recommend avoiding type recasting as this can significantly slow down the execution of your code.</p>", "</div>", "</div>"
                        ].join("");
                        m.style.top = "2em";
                    };
                }
    pd.beaufold            = function dom__beaufold(self, min, max) {
        var a = 0,
            b = "";
        if (self.innerHTML.charAt(0) === "-") {
            for (a = min; a < max; a += 1) {
                pd.beaurows[0][a].style.display = "none";
                pd.beaurows[1][a].style.display = "none";
            }
            self.innerHTML = "+" + self.innerHTML.substr(1);
        } else {
            for (a = min; a < max; a += 1) {
                pd.beaurows[0][a].style.display = "block";
                pd.beaurows[1][a].style.display = "block";
                if (pd.beaurows[0][a].getAttribute("class") === "fold" && pd.beaurows[0][a].innerHTML.charAt(0) === "+") {
                    b = pd.beaurows[0][a].getAttribute("onclick");
                    b = b.substring(b.lastIndexOf(",") + 1, b.indexOf(")"));
                    a = Number(b) - 1;
                }
            }
            self.innerHTML = "-" + self.innerHTML.substr(1);
        }
    };
            }());
            ]]>
        </script>
    </body>
</html>